version: v1.0
name: CDS_PythonPylint
description: |-
  Run pylint.
  By default, each pylint recommendation will be displayed as a Junit test.
  The short errors are fully contained inside the test title,
  an arrow (->) will be present if a part of the recommendation is displayed in
  the test body.
parameters:
  extra_options:
    type: string
    description: Extra options to pass during pylint invocation.
  ignore:
    type: string
    description: |-
      List of ignored files / directory (base name, not path), separated
      by a ;
  module_path:
    type: string
    description: |-
      List of modules paths (absolute or relative) to launch pylint into, separated by a ;.
      If empty, will launch pylint inside the working directory
  pylintrc:
    type: string
    description: |-
      Path of the pylintrc file, or its content.
       +If your pylintrc file is not used, try to use an absolute path using the variable {{.cds.workspace}} that points to the container default working directory
  raw_output:
    type: boolean
    default: "false"
    description: Skip the xunit + Junit step and output a raw pylint result file.
  raw_output_file:
    type: string
    description: File to output the raw result if raw output is checked. If empty,
      will only log the results.
  xml_output_file:
    type: string
    default: pylint_result.xml
    description: File to output the result xunit xml, it should not be empty.
requirements:
- binary: python3.5
- binary: virtualenv
steps:
- script:
  - '#!/bin/bash'
  - set -e
  - ""
  - '# Setup pylint_venv'
  - virtualenv -p python3.5 .pylint_venv
  - . .pylint_venv/bin/activate
  - ""
  - '# Install pylint'
  - pip install --upgrade pip
  - pip install pylint==1.7.2
  - ""
  - ""
- script:
  - '#!.pylint_venv/bin/python3.5'
  - import json
  - import logging
  - import os
  - import tempfile
  - import xml.etree.cElementTree as ET
  - from sys import stdout
  - from textwrap import dedent as _dedent
  - ""
  - from pylint import epylint
  - ""
  - LOG = logging.getLogger(__name__)
  - ""
  - 'def dedent(text):'
  - '    """'
  - '    Remove the common leading tabs on each line of a string'
  - ""
  - '    :param text: String to clean'
  - '    :type text: str'
  - '    :return: Cleaned string'
  - '    :rtype: str'
  - '    """'
  - '    return _dedent(text).strip()'
  - ""
  - ""
  - 'def set_logging(level=logging.INFO):'
  - '    """'
  - '    Setup the script logger.'
  - ""
  - '    :param level: Logging level'
  - '    :type level: python logging level'
  - '    """'
  - '    logging.basicConfig(level=level)'
  - '    LOG.propagate = False'
  - ""
  - '    std_handler = logging.StreamHandler(stream=stdout)'
  - '    formatter = logging.Formatter(''%(asctime)s - %(levelname)s - %(message)s'')'
  - '    std_handler.setFormatter(formatter)'
  - '    LOG.addHandler(std_handler)'
  - ""
  - ""
  - 'def get_lint_result(module_path=None, ignore=None, pylintrc=None, extra_options=None,
    raw_output=False):'
  - '    """'
  - '    Get the pylint result for a list of modules.'
  - ""
  - '    :param module_path: List of module paths'
  - '    :type module_path: list of str'
  - '    :param ignore: list of ignored files / dirs (base name, not path)'
  - '    :type ignore: list of str'
  - '    :param pylintrc: pylintrc filepath or content'
  - '    :type pylintrc: str'
  - '    :param extra_options: pylint extra options'
  - '    :type extra_options: str'
  - '    :param raw_output: Skip the json parsing and output the raw pylint result'
  - '    :type raw_output: boolean'
  - '    :return: A list of json/raw results'
  - '    :rtype: list'
  - '    """'
  - '    # If pylintrc points to a file, use it, else write a temporary file to store
    its value.'
  - '    rcfile_path = None'
  - '    if pylintrc and os.path.isfile(pylintrc):'
  - '        rcfile_path = pylintrc'
  - '    elif pylintrc:'
  - '        pylintrc_file = tempfile.NamedTemporaryFile("w")'
  - '        pylintrc_file.write(pylintrc)'
  - '        rcfile_path = pylintrc_file.name'
  - '        LOG.debug("Wrote pylintrc content to %s" % rcfile_path)'
  - ""
  - '    # If the user didn''t provide module path(s), launch pylint in the working
    directory'
  - '    if not module_path:'
  - '        if os.path.isfile("__init__.py"):'
  - '            LOG.debug("Using current directory as module")'
  - '            module_path = ["."]'
  - '        else:'
  - '            LOG.error("The current working directory is not a valid python module,
    please fill the "'
  - '                      "module variable with a correct list of modules")'
  - '            exit(1)'
  - ""
  - '    final_result = []'
  - '    # For each module, launch pylint'
  - '    for module in module_path:'
  - ""
  - '        # Compute pylint options'
  - '        pylint_options = ['
  - '            "%s" % module,'
  - '            "--persistent=no"'
  - '        ]'
  - ""
  - '        if not raw_output:'
  - '            pylint_options.append("--output-format=json")'
  - ""
  - '        if ignore:'
  - '            pylint_options.append("--ignore=%s" % ignore)'
  - ""
  - '        if rcfile_path:'
  - '            pylint_options.append("--rcfile=%s" % rcfile_path)'
  - ""
  - '        if extra_options:'
  - '            pylint_options.append(extra_options)'
  - ""
  - '        # Launch pylint'
  - '        LOG.debug("Launching pylint with options : %s" % " ".join(pylint_options))'
  - '        pylint_stdout, pylint_stderr = epylint.py_run(" ".join(pylint_options),
    return_std=True)'
  - ""
  - '        result = pylint_stdout.getvalue()'
  - '        if not result and not raw_output:'
  - '            result = "{}"'
  - ""
  - '        err = pylint_stderr.getvalue()'
  - ""
  - '        # Parse the pylint result, if it fails, it means the pylint run failed
    too.'
  - '        if not raw_output:'
  - '            try:'
  - '                file_result_parsed = json.loads(result)'
  - '            except json.decoder.JSONDecodeError:'
  - '                LOG.error("Pylint output decoding failed \n"'
  - '                          "Pylint stdout : %s \n"'
  - '                          "Pylint stderr : %s" % (result, err))'
  - '                exit(1)'
  - '        else:'
  - '            file_result_parsed = [result]'
  - ""
  - '        final_result += file_result_parsed'
  - ""
  - '    try:'
  - '        pylintrc_file.close()'
  - '    except (NameError, AttributeError):'
  - '        pass'
  - ""
  - '    return final_result'
  - ""
  - ""
  - 'def lint(xml_output_file="pylint.xml", raw_output=False, raw_output_file="pylint.txt",
    **kwargs):'
  - '    """'
  - '    Create a xunit file, compatible with CDS Junit parsing with the collected
    pylint results'
  - ""
  - '    :param xml_output_file: File to output the xml'
  - '    :type xml_output_file: str'
  - '    :param raw_output: Output the pylint raw result'
  - '    :type raw_output: boolean'
  - '    :param raw_output_file: File to output the raw result'
  - '    :type raw_output_file: str'
  - '    :param kwargs: Arguments for get_lint_result'
  - '    :type kwargs: dict'
  - '    """'
  - ""
  - '    lint_result = get_lint_result(raw_output=raw_output, **kwargs)'
  - ""
  - '    if raw_output:'
  - '        if raw_output_file is not None:'
  - '            with open(raw_output_file, "w") as raw_f:'
  - '                for line in lint_result:'
  - '                    raw_f.write(line)'
  - '            LOG.info("Wrote raw pylint ouput to %s" % raw_output_file)'
  - '        else:'
  - '            LOG.info("Pylint result : \n %s" % "\n".join(lint_result))'
  - '        with open(xml_output_file, "w") as xml_f:'
  - '            xml_f.write(''<testsuite errors="0" failures="0" name="Fake xunit
    test suite" skip="0" tests="0">'')'
  - '        LOG.info("Wrote fake xunit test suite to %s" % xml_output_file)'
  - ""
  - '        # Exit the script accordingly to the pylint result.'
  - '        for result in lint_result:'
  - '            if result != "":'
  - '                LOG.info("Pylint run failed")'
  - '                exit(1)'
  - '        LOG.info("Pylint run was successful")'
  - '        exit(0)'
  - ""
  - '    # Create the xml tree'
  - '    root = ET.Element("testsuite", name="Pylint results")'
  - ""
  - '    # Create an entry for each test'
  - '    for line in lint_result:'
  - '        # If the message is on multiple lines, only set the title to the first
    line,'
  - '        # the following lines will be displayed inside the body.'
  - '        # An arrow (->) will be added to right side of the title to indicate
    that the rest of the information'
  - '        # is located in the body and need a click to be displayed'
  - '        message = line["message"].split("\n")'
  - '        data = ""'
  - '        if len(message) > 1:'
  - '            data = dedent("\n".join(message[1:]))'
  - '            message = "%s ->" % message[0]'
  - '        else:'
  - '            message = message[0]'
  - ""
  - '        msg = "%s %s - Line %d Column %d: %s" % ('
  - '            line["type"],'
  - '            line["path"],'
  - '            line["line"],'
  - '            line["column"],'
  - '            message'
  - '        )'
  - ""
  - '        LOG.debug("Creating testcase with message \"%s\"" % message)'
  - '        testcase = ET.SubElement(root, "testcase", classname=line["module"],
    name=msg, time="0.000")'
  - '        failure = ET.SubElement(testcase, "failure", message=msg, type=line["type"])'
  - ""
  - '        # Add body'
  - '        failure.append(ET.Comment('' --><![CDATA['' + data.replace('']]>'', '']]]]><![CDATA[>'')
    + '']]><!-- ''))'
  - ""
  - '    test_number = len(lint_result)'
  - ""
  - '    # Set xunit test suite data'
  - '    root.set("errors", "0")'
  - '    root.set("skip", "0")'
  - '    root.set("failures", str(test_number))'
  - '    root.set("tests", str(test_number))'
  - ""
  - '    # Write the xml file'
  - '    tree = ET.ElementTree(root)'
  - '    tree.write(xml_output_file)'
  - '    LOG.info("Successfully wrote %d tests to the file %s" % (test_number, xml_output_file))'
  - ""
  - 'if __name__ == ''__main__'':'
  - '    set_logging(logging.DEBUG)'
  - ""
  - '    # Argument parsing'
  - '    kwargs = {'
  - '        "xml_output_file": "{{.xml_output_file}}" or "pylint_result.xml",'
  - '        "raw_output": "{{.raw_output}}" in ["True", "true", "TRUE", "t", "y",
    "T", "Y"],'
  - '        "raw_output_file": "{{.raw_output_file}}" or None,'
  - '        "module_path": [] if "{{.module_path}}".split(";") == [''''] else "{{.module_path}}".split(";"),'
  - '        "ignore": [] if "{{.ignore}}".split(";") == [''''] else ",". join("{{.ignore}}".split(";")),'
  - '        "pylintrc": """{{.pylintrc}}""" or None,'
  - '        "extra_options": "{{.extra_options}}" or None'
  - '    }'
  - ""
  - '    lint(**kwargs)'
  - ""
  - ""
- jUnitReport: '{{.xml_output_file}}'

