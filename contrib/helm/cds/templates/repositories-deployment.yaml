apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cds.fullname" . }}-repositories
  labels:
    app: {{ template "cds.fullname" . }}-repositories
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "cds.fullname" . }}-repositories
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: {{ template "cds.fullname" . }}-repositories
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      containers:
      - name: {{ template "cds.fullname" . }}-repositories
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        env:
        - name: CDS_CONFIG_FILE
          valueFrom:
            secretKeyRef:
              name: {{ template "cds.fullname" . }}
              key: cds_config_file
        - name: CDS_REPOSITORIES_NAME
          value: '{{ template "cds.fullname" . }}-repositories'
        - name: CDS_REPOSITORIES_BASEDIR
          value: {{.Values.repositories.mountPath}}
        - name: CDS_REPOSITORIES_URL
          value: 'http://{{ template "cds.fullname" . }}-repositories'
        - name: CDS_REPOSITORIES_UI_HTTP_URL
          value: 'http://{{ template "cds.fullname" . }}-ui'
        - name: CDS_REPOSITORIES_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "cds.fullname" . }}
              key: cds-api_auth_sharedinfratoken
        - name: CDS_REPOSITORIES_API_GRPC_URL
          value: 'http://{{ template "cds.fullname" . }}-api:8082'
        - name: CDS_REPOSITORIES_API_HTTP_URL
          value: 'http://{{ template "cds.fullname" . }}-api'
        - name: CDS_REPOSITORIES_CACHE_REDIS_HOST
          value: {{ template "cds.redis.fullname" . }}-master:{{ default "" .Values.redis.master.port }}
        - name: CDS_REPOSITORIES_CACHE_REDIS_PASSWORD
        {{- if .Values.redis.enabled }}
          valueFrom:
            secretKeyRef:
              name: {{ template "cds.redis.fullname" . }}
              key: redis-password #reference postgresql chart secret
        {{- else }}
          value: {{ default "" .Values.redis.password | quote }}
        {{- end }}
        - name: CDS_REPOSITORIES_HTTP_PORT
          value: '8084'
        - name: CDS_LOG_LEVEL
          value: {{ default "" .Values.logLevel | quote }}
        command: ["/bin/sh"]
        args: ["-c", "echo $CDS_CONFIG_FILE | base64 --decode > config.toml && /app/cds-engine-linux-amd64 start repositories --config config.toml"]
        ports:
        - name: http
          containerPort: 8084
        volumeMounts:
        - name: cds-repos-data
          mountPath: {{ .Values.repositories.persistence.mountPath }}
      volumes:
      - name: cds-repos-data
        persistentVolumeClaim:
          claimName: {{ (printf "%s-repositories" (include "cds.fullname" .)) }}
