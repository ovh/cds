[hatchery]

  # Hatchery Kubernetes.
  [hatchery.kubernetes]

    # Certificate authority data (content, not path and not base64 encoded) for tls kubernetes (optional if no tls needed)
    # certAuthorityData = ""

    # Client certificate data (content, not path and not base64 encoded) for tls kubernetes (optional if no tls needed)
    # clientCertData = ""

    # Client certificate data (content, not path and not base64 encoded) for tls kubernetes (optional if no tls needed)
    # clientKeyData = ""

    # Worker default memory in Mo
    defaultMemory = 1024

    # Kubernetes config file in yaml
    kubernetesConfigFile = "kubeconfig.yaml"

    # Address of kubernetes master
    kubernetesMasterURL = "https://1.1.1.1:8443"

    # Kubernetes namespace in which workers are spawned
    namespace = "cds"

    # Nb Workers to provision
    nbProvision = 1

    # Password to connect to kubernetes cluster (optional if config file is set)
    # password = ""

    # Token to connect to kubernetes cluster (optional if config file is set)
    # token = ""

    # Username to connect to kubernetes cluster (optional if config file is set)
    # username = ""

    # Worker TTL (minutes)
    workerTTL = 10

    [hatchery.kubernetes.commonConfiguration]

      # Name of Hatchery
      name = ""

      # URL of this Hatchery
      url = "http://localhost:8086"

      [hatchery.kubernetes.commonConfiguration.api]

        # Maximum allowed consecutives failures on heatbeat routine
        maxHeartbeatFailures = 10

        # Request CDS API: timeout in seconds
        requestTimeout = 10

        # CDS Token to reach CDS API. See https://ovh.github.io/cds/advanced/advanced.worker.token/
        token = ""

        [hatchery.kubernetes.commonConfiguration.api.grpc]

          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          # insecure = false
          # url = "http://localhost:8082"

        [hatchery.kubernetes.commonConfiguration.api.http]

          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          # insecure = false

          # CDS API URL
          # url = "http://localhost:8081"

      ######################
      # CDS Hatchery HTTP Configuration
      #######################
      [hatchery.kubernetes.commonConfiguration.http]

        # Listen address without port, example: 127.0.0.1
        # addr = ""
        port = 8086

      # Hatchery Log Configuration
      [hatchery.kubernetes.commonConfiguration.logOptions]

        [hatchery.kubernetes.commonConfiguration.logOptions.spawnOptions]

          # log critical if spawn take more than this value (in seconds)
          thresholdCritical = 480

          # log warning if spawn take more than this value (in seconds)
          thresholdWarning = 360

      [hatchery.kubernetes.commonConfiguration.provision]

        # Disabled provisioning. Format:true or false
        disabled = false

        # Check provisioning each n Seconds
        frequency = 30

        # if worker is queued less than this value (seconds), hatchery does not take care of it
        graceTimeQueued = 4

        # Maximum allowed simultaneous workers provisioning
        maxConcurrentProvisioning = 10

        # Maximum allowed simultaneous workers
        maxWorker = 10

        # Check if some worker model have to be registered each n Seconds
        registerFrequency = 60

        # Worker Log Configuration
        [hatchery.kubernetes.commonConfiguration.provision.workerLogsOptions]

          [hatchery.kubernetes.commonConfiguration.provision.workerLogsOptions.graylog]

            # Example: X-OVH-TOKEN. You can use many keys: aaa,bbb
            extraKey = ""

            # value for extraKey field. For many keys: valueaaa,valuebbb
            extraValue = ""

            # Example: thot.ovh.com
            host = ""

            # Example: 12202
            port = 0

            # tcp or udp
            protocol = "tcp"

######################
# CDS Hooks Settings
#######################
[hooks]
  URL = "http://localhost:8083"

  # Disable all hooks executions
  disable = false

  # Number of execution to keep
  executionHistory = 10

  # Name of this CDS Hooks Service
  # Enter a name to enable this service
  name = ""

  # Execution retry delay in seconds
  retryDelay = 120

  # Retry execution while this number of error is not reached
  retryError = 3

  # Public url for external call (webhook)
  urlPublic = ""

  ######################
  # CDS API Settings
  #######################
  [hooks.api]
    maxHeartbeatFailures = 10
    requestTimeout = 10
    token = ""

    [hooks.api.grpc]
      # insecure = false
      url = "http://localhost:8082"

    [hooks.api.http]
      # insecure = false
      url = "http://localhost:8081"

  ######################
  # CDS Hooks Cache Settings
  #######################
  [hooks.cache]
    ttl = 60

    # Connect CDS to a redis cache If you more than one CDS instance and to avoid losing data at startup
    [hooks.cache.redis]

      # If your want to use a redis-sentinel based cluster, follow this syntax! <clustername>@sentinel1:26379,sentinel2:26379,sentinel3:26379
      host = "localhost:6379"
      password = ""

  ######################
  # CDS Hooks HTTP Configuration
  #######################
  [hooks.http]

    # Listen address without port, example: 127.0.0.1
    # addr = ""
    port = 8083

#####################
# CDS Logs Settings
#####################
[log]

  # Log Level: debug, info, warning, notice, critical
  level = "info"

  [log.graylog]

    # Example: X-OVH-TOKEN. You can use many keys: aaa,bbb
    extraKey = ""

    # value for extraKey field. For many keys: valueaaa,valuebbb
    extraValue = ""

    # Example: thot.ovh.com
    host = ""

    # Example: 12202
    port = 0

    # tcp or udp
    protocol = ""

######################
# CDS Repositories Settings
#######################
[repositories]
  URL = "http://localhost:8085"

  # Root directory where the service will store all checked-out repositories
  basedir = ""

  # Name of this CDS Repositories Service
  # Enter a name to enable this service
  name = ""

  # Operation retention in redis store (in days)
  operation_retention = 5

  # Re retention on the filesystem (in days)
  repositories_retention = 10

  ######################
  # CDS API Settings
  #######################
  [repositories.api]
    maxHeartbeatFailures = 10
    requestTimeout = 10
    token = ""

    [repositories.api.grpc]
      # insecure = false
      url = "http://localhost:8082"

    [repositories.api.http]
      # insecure = false
      url = "http://localhost:8081"

  ######################
  # CDS Repositories Cache Settings
  #######################
  [repositories.cache]
    ttl = 60

    [repositories.cache.redis]

      # If your want to use a redis-sentinel based cluster, follow this syntax! <clustername>@sentinel1:26379,sentinel2:26379,sentinel3:26379
      host = "localhost:6379"
      password = ""

  ######################
  # CDS Repositories HTTP Configuration
  #######################
  [repositories.http]

    # Listen address without port, example: 127.0.0.1
    # addr = ""
    port = 8085

###########################
# CDS Tracing Settings
###########################
[tracing]
  Enable = false
  SamplingProbability = 0.0

  [tracing.Exporter]

    [tracing.Exporter.Jaeger]
      HTTPCollectorEndpoint = "http://localhost:14268"

    [tracing.Exporter.Prometheus]
      ReporteringPeriod = 60

######################
# CDS VCS Settings
#######################
[vcs]
  # URL = ""

  # Name of this CDS VCS Service
  # Enter a name to enable this service
  # name = ""

  [vcs.UI]

    [vcs.UI.http]
      # url = ""

  ######################
  # CDS API Settings
  #######################
  [vcs.api]
    maxHeartbeatFailures = 10
    requestTimeout = 10
    # token = ""

    [vcs.api.grpc]
      # insecure = false
      # url = "http://localhost:8082"

    [vcs.api.http]
      # insecure = false
      # url = "http://localhost:8081"

  ######################
  # CDS VCS Cache Settings
  #######################
  [vcs.cache]
    ttl = 60

    [vcs.cache.redis]

      # If your want to use a redis-sentinel based cluster, follow this syntax ! <clustername>@sentinel1:26379,sentinel2:26379sentinel3:26379
      # host = "localhost:6379"
      # password = ""

  ######################
  # CDS VCS HTTP Configuration
  #######################
  [vcs.http]

    # Listen address without port, example: 127.0.0.1
    # addr = ""
    # port = 8084

  ######################
  # CDS VCS Server Settings
  #######################
  [vcs.servers]

    # [vcs.servers.Bitbucket]

      # # URL of this VCS Server
      # url = "https://mybitbucket.com"
      #
      # [vcs.servers.Bitbucket.bitbucket]
      #
      #   #######
      #   # CDS <-> Bitbucket. Documentation on https://ovh.github.io/cds/hosting/repositories-manager/bitbucket/
      #   ########
      #   # You can change the consumeKey if you want
      #   consumerKey = "xxx"
      #
      #   # Does polling is supported by VCS Server
      #   disablePolling = false
      #
      #   # Does webhooks are supported by VCS Server
      #   disableWebHooks = false
      #   privateKey = "xxx"
      #
      #   # If you want to have a reverse proxy url for your repository webhook, for example if you put https://myproxy.com it will generate a webhook URL like this https://myproxy.com/UUID_OF_YOUR_WEBHOOK
      #   # proxyWebhook = ""
      #
      #   # optional, Bitbucket Token associated to username, used to add comment on Pull Request
      #   token = ""
      #
      #   # optional. Bitbucket username, used to add comment on Pull Request on failed build.
      #   username = ""
      #
      #   [vcs.servers.Bitbucket.bitbucket.Status]
      #
      #     # Set to true if you don't want CDS to push statuses on the VCS server
      #     # disable = false

    [vcs.servers.Github]

      # URL of this VCS Server
      url = "https://github.com"

      [vcs.servers.Github.github]

        #######
        # CDS <-> Github. Documentation on https://ovh.github.io/cds/hosting/repositories-manager/github/
        ########
        # Github OAuth Application Client ID
        clientId = "XXX"

        # Github OAuth Application Client Secret
        clientSecret = "XXX"

        # Does polling is supported by VCS Server
        disablePolling = false

        # Does webhooks are supported by VCS Server
        disableWebHooks = false

        # If you want to have a reverse proxy url for your repository webhook, for example if you put https://myproxy.com it will generate a webhook URL like this https://myproxy.com/UUID_OF_YOUR_WEBHOOK
        # proxyWebhook = ""

        # optional, Github Token associated to username, used to add comment on Pull Request
        # token = ""

        # optional. Github username, used to add comment on Pull Request on failed build.
        username = ""

        [vcs.servers.Github.github.Status]

          # Set to true if you don't want CDS to push statuses on the VCS server
          # disable = false

          # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server
          # showDetail = false

    # [vcs.servers.Gitlab]
    #
    #   # URL of this VCS Server
    #   url = "https://gitlab.com"
    #
    #   [vcs.servers.Gitlab.gitlab]
    #
    #     #######
    #     # CDS <-> Gitlab. Documentation on https://ovh.github.io/cds/hosting/repositories-manager/gitlab/
    #     ########
    #     appId = "xxxx"
    #
    #     # Does polling is supported by VCS Server
    #     disablePolling = false
    #
    #     # Does webhooks are supported by VCS Server
    #     disableWebHooks = false
    #
    #     # If you want to have a reverse proxy url for your repository webhook, for example if you put https://myproxy.com it will generate a webhook URL like this https://myproxy.com/UUID_OF_YOUR_WEBHOOK
    #     # proxyWebhook = ""
    #     secret = "xxxx"
    #
    #     [vcs.servers.Gitlab.gitlab.Status]
    #
    #       # Set to true if you don't want CDS to push statuses on the VCS server
    #       # disable = false
    #
    #       # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server
    #       # showDetail = false
