[api]

  # if no model and no os/arch is specified in your job's requirements then spawn worker on this architecture (example: amd64, arm, 386)
  defaultArch = "amd64"

  # if no model and os/arch is specified in your job's requirements then spawn worker on this operating system (example: freebsd, linux, windows)
  defaultOS = "linux"

  # Either filesystem local storage or Openstack Swift Storage are supported
  [api.artifact]

    # swift or local
    mode = "local"

    [api.artifact.local]
      baseDirectory = "/app/artifacts"

    [api.artifact.openstack]

      # Use if your want to prefix containers for CDS Artifacts
      containerPrefix = ""

      # True if you want to disable Temporary URL in file upload
      # disableTempURL = false

      # Openstack Domain, generally value of $OS_DOMAIN_NAME, v3 auth only
      domain = ""

      # Openstack Password, generally value of $OS_PASSWORD
      password = ""

      # Region, generally value of $OS_REGION_NAME
      region = ""

      # Openstack Tenant, generally value of $OS_TENANT_NAME, v2 auth only
      tenant = ""

      # Authentication Endpoint, generally value of $OS_AUTH_URL
      url = ""

      # Openstack Username, generally value of $OS_USERNAME
      username = ""

  ##############################
  # CDS Authentication Settings#
  ##############################
  [api.auth]

    # The default group is the group in which every new user will be granted at signup
    defaultGroup = "cdsdemo"

    # The RSA Private Key used to sign and verify the JWT Tokens issued by the API
    #This is mandatory.
    rsaPrivateKey = ""

    # Token for shared.infra group. This value will be used when shared.infra will be created
    #at first CDS launch. This token can be used by CDS CLI, Hatchery, etc...
    #This is mandatory.
    #sharedInfraToken = ""

    [api.auth.ldap]
      base = "dc=myorganization,dc=com"

      # Define it if ldapsearch need to be authenticated
      bindDN = ""

      # Define it if ldapsearch need to be authenticated
      bindPwd = ""
      dn = "uid=%s,ou=people,dc=myorganization,dc=com"
      enable = false
      fullname = "{{.givenName}} {{.sn}}"
      host = ""
      port = 636
      ssl = true

    [api.auth.local]

      # Allow signup from selected domains only - comma separated. Example: your-domain.com,another-domain.com
      # signupAllowedDomains = ""

  ######################
  # CDS Cache Settings
  ######################
  #
  [api.cache]
    ttl = 60

    # Connect CDS to a redis cache If you more than one CDS instance and to avoid losing data at startup
    [api.cache.redis]

      # If your want to use a redis-sentinel based cluster, follow this syntax! <clustername>@sentinel1:26379,sentinel2:26379,sentinel3:26379
      #host = "localhost:6379"
      #password = ""

  ################################
  # Postgresql Database settings
  ################################
  [api.database]

    # Maximum wait for connection, in seconds
    connectTimeout = 10
#    host = "localhost"

    # DB Max connection
    maxconn = 20
    name = "cds"
#    password = "cds"
    port = 5432

    # Set a specific role to run SET ROLE for each connection
    # role = ""

    # DB SSL Mode: require (default), verify-full, or disable
    sslmode = "disable"

    # Statement timeout value in milliseconds
    timeout = 3000
    user = "cds"

  [api.directories]
    download = "/app"
    keys = "/app/keys"

  #######################
  # CDS Events Settings
  #######################
  [api.events]

    [api.events.kafka]
      broker = ""
      enabled = false
      maxmessagebytes = 10000000
      password = ""
      topic = ""
      user = ""

  ###########################
  # CDS Features flipping Settings
  ###########################
  [api.features]

    # Feature flipping provider: https://maif.github.io/izanami
    [api.features.izanami]
      apiurl = ""
      clientid = ""
      clientsecret = ""

      # Token shared between Izanami and CDS to be able to send webhooks from izanami
      token = ""

  ###########################
  # Graylog Search.
  # When CDS API generates errors, you can fetch them with cdsctl.
  # Examples:
  # $ cdsctl admin errors get <error-id>
  # $ cdsctl admin errors get 55f6e977-d39b-11e8-8513-0242ac110007
  ###########################
  [api.graylog]
    accessToken = ""
    stream = ""

    # Example: http://localhost:9000
    url = ""

  [api.grpc]

    # Listen GRPC address without port, example: 127.0.0.1
    # addr = ""
#    port = 8082

  [api.http]

    # Listen HTTP address without port, example: 127.0.0.1
    # addr = ""
#    port = 8081
#    sessionTTL = 60

  ###########################
  # Log settings.
  ###########################
  [api.log]

    # Max service logs size in bytes (default: 15MB)
    serviceMaxSize = 15728640

    # Max step logs size in bytes (default: 15MB)
    stepMaxSize = 15728640

  [api.secrets]
#    key = ""

  #####################
  ## CDS SMTP Settings
  #####################
  [api.smtp]
    disable = true
    from = "no-reply@cds.local"
    host = ""
    password = ""
    port = ""
    tls = false
    user = ""

  ###########################
  # CDS Status Settings
  # Documentation: https://ovh.github.io/cds/hosting/monitoring/
  ###########################
  [api.status]

    [api.status.api]

      # if less than minInstance of API is running, an alert will on Global/API be created on /mon/status
      minInstance = 1

    [api.status.dbmigrate]

      # if less than minInstance of dbmigrate service is running, an alert on Global/dbmigrate will be created on /mon/status
      minInstance = 1

    [api.status.elasticsearch]

      # if less than minInstance of elasticsearch service is running, an alert on Global/elasticsearch will be created on /mon/status
      minInstance = 1

    [api.status.hatchery]

      # if less than minInstance of hatchery service is running, an alert on Global/hatchery will be created on /mon/status
      minInstance = 1

    [api.status.hooks]

      # if less than minInstance of hooks service is running, an alert on Global/hooks will be created on /mon/status
      minInstance = 1

    [api.status.repositories]

      # if less than minInstance of repositories service is running, an alert on Global/hooks will be created on /mon/status
      minInstance = 1

    [api.status.vcs]

      # if less than minInstance of vcs service is running, an alert will on Global/vcs be created on /mon/status
      minInstance = 1

  #####################
  # CDS URLs Settings
  #####################
  [api.url]
#    api = "http://localhost:8081"
#    ui = "http://localhost:2015"

  [api.vault]
    configurationKey = ""



######################
# CDS Hooks Settings
#######################
[hooks]
  URL = "http://localhost:8083"

  # Disable all hooks executions
  disable = false

  # Number of execution to keep
  executionHistory = 10

  # Name of this CDS Hooks Service
  # Enter a name to enable this service
  name = ""

  # Execution retry delay in seconds
  retryDelay = 120

  # Retry execution while this number of error is not reached
  retryError = 3

  # Public url for external call (webhook)
  urlPublic = ""

  ######################
  # CDS API Settings
  #######################
  [hooks.api]
    maxHeartbeatFailures = 10
    requestTimeout = 10
    token = ""

    [hooks.api.grpc]
      # insecure = false
      url = "http://localhost:8082"

    [hooks.api.http]
      # insecure = false
      url = "http://localhost:8081"

  ######################
  # CDS Hooks Cache Settings
  #######################
  [hooks.cache]
    ttl = 60

    # Connect CDS to a redis cache If you more than one CDS instance and to avoid losing data at startup
    [hooks.cache.redis]

      # If your want to use a redis-sentinel based cluster, follow this syntax! <clustername>@sentinel1:26379,sentinel2:26379,sentinel3:26379
      host = "localhost:6379"
      password = ""

  ######################
  # CDS Hooks HTTP Configuration
  #######################
  [hooks.http]

    # Listen address without port, example: 127.0.0.1
    # addr = ""
    port = 8083

#####################
# CDS Logs Settings
#####################
[log]

  # Log Level: debug, info, warning, notice, critical
  level = "info"

  [log.graylog]

    # Example: X-OVH-TOKEN. You can use many keys: aaa,bbb
    extraKey = ""

    # value for extraKey field. For many keys: valueaaa,valuebbb
    extraValue = ""

    # Example: thot.ovh.com
    host = ""

    # Example: 12202
    port = 0

    # tcp or udp
    protocol = ""

######################
# CDS Repositories Settings
#######################
[repositories]
  URL = "http://localhost:8085"

  # Root directory where the service will store all checked-out repositories
  basedir = ""

  # Name of this CDS Repositories Service
  # Enter a name to enable this service
  name = ""

  # Operation retention in redis store (in days)
  operation_retention = 5

  # Re retention on the filesystem (in days)
  repositories_retention = 10

  ######################
  # CDS API Settings
  #######################
  [repositories.api]
    maxHeartbeatFailures = 10
    requestTimeout = 10
    token = ""

    [repositories.api.grpc]
      # insecure = false
      url = "http://localhost:8082"

    [repositories.api.http]
      # insecure = false
      url = "http://localhost:8081"

  ######################
  # CDS Repositories Cache Settings
  #######################
  [repositories.cache]
    ttl = 60

    [repositories.cache.redis]

      # If your want to use a redis-sentinel based cluster, follow this syntax! <clustername>@sentinel1:26379,sentinel2:26379,sentinel3:26379
      host = "localhost:6379"
      password = ""

  ######################
  # CDS Repositories HTTP Configuration
  #######################
  [repositories.http]

    # Listen address without port, example: 127.0.0.1
    # addr = ""
    port = 8085

###########################
# CDS Tracing Settings
###########################
[tracing]
  Enable = false
  SamplingProbability = 0.0

  [tracing.Exporter]

    [tracing.Exporter.Jaeger]
      HTTPCollectorEndpoint = "http://localhost:14268"

    [tracing.Exporter.Prometheus]
      ReporteringPeriod = 60

######################
# CDS VCS Settings
#######################
[vcs]
  # URL = ""

  # Name of this CDS VCS Service
  # Enter a name to enable this service
  # name = ""

  [vcs.UI]

    [vcs.UI.http]
      # url = ""

  ######################
  # CDS API Settings
  #######################
  [vcs.api]
    maxHeartbeatFailures = 10
    requestTimeout = 10
    # token = ""

    [vcs.api.grpc]
      # insecure = false
      # url = "http://localhost:8082"

    [vcs.api.http]
      # insecure = false
      # url = "http://localhost:8081"

  ######################
  # CDS VCS Cache Settings
  #######################
  [vcs.cache]
    ttl = 60

    [vcs.cache.redis]

      # If your want to use a redis-sentinel based cluster, follow this syntax ! <clustername>@sentinel1:26379,sentinel2:26379sentinel3:26379
      # host = "localhost:6379"
      # password = ""

  ######################
  # CDS VCS HTTP Configuration
  #######################
  [vcs.http]

    # Listen address without port, example: 127.0.0.1
    # addr = ""
    # port = 8084

  ######################
  # CDS VCS Server Settings
  #######################
  [vcs.servers]

    # [vcs.servers.Bitbucket]

      # # URL of this VCS Server
      # url = "https://mybitbucket.com"
      #
      # [vcs.servers.Bitbucket.bitbucket]
      #
      #   #######
      #   # CDS <-> Bitbucket. Documentation on https://ovh.github.io/cds/hosting/repositories-manager/bitbucket/
      #   ########
      #   # You can change the consumeKey if you want
      #   consumerKey = "xxx"
      #
      #   # Does polling is supported by VCS Server
      #   disablePolling = false
      #
      #   # Does webhooks are supported by VCS Server
      #   disableWebHooks = false
      #   privateKey = "xxx"
      #
      #   # If you want to have a reverse proxy url for your repository webhook, for example if you put https://myproxy.com it will generate a webhook URL like this https://myproxy.com/UUID_OF_YOUR_WEBHOOK
      #   # proxyWebhook = ""
      #
      #   # optional, Bitbucket Token associated to username, used to add comment on Pull Request
      #   token = ""
      #
      #   # optional. Bitbucket username, used to add comment on Pull Request on failed build.
      #   username = ""
      #
      #   [vcs.servers.Bitbucket.bitbucket.Status]
      #
      #     # Set to true if you don't want CDS to push statuses on the VCS server
      #     # disable = false

    [vcs.servers.Github]

      # URL of this VCS Server
      url = "https://github.com"

      [vcs.servers.Github.github]

        #######
        # CDS <-> Github. Documentation on https://ovh.github.io/cds/hosting/repositories-manager/github/
        ########
        # Github OAuth Application Client ID
        clientId = "XXX"

        # Github OAuth Application Client Secret
        clientSecret = "XXX"

        # Does polling is supported by VCS Server
        disablePolling = false

        # Does webhooks are supported by VCS Server
        disableWebHooks = false

        # If you want to have a reverse proxy url for your repository webhook, for example if you put https://myproxy.com it will generate a webhook URL like this https://myproxy.com/UUID_OF_YOUR_WEBHOOK
        # proxyWebhook = ""

        # optional, Github Token associated to username, used to add comment on Pull Request
        # token = ""

        # optional. Github username, used to add comment on Pull Request on failed build.
        username = ""

        [vcs.servers.Github.github.Status]

          # Set to true if you don't want CDS to push statuses on the VCS server
          # disable = false

          # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server
          # showDetail = false

    # [vcs.servers.Gitlab]
    #
    #   # URL of this VCS Server
    #   url = "https://gitlab.com"
    #
    #   [vcs.servers.Gitlab.gitlab]
    #
    #     #######
    #     # CDS <-> Gitlab. Documentation on https://ovh.github.io/cds/hosting/repositories-manager/gitlab/
    #     ########
    #     appId = "xxxx"
    #
    #     # Does polling is supported by VCS Server
    #     disablePolling = false
    #
    #     # Does webhooks are supported by VCS Server
    #     disableWebHooks = false
    #
    #     # If you want to have a reverse proxy url for your repository webhook, for example if you put https://myproxy.com it will generate a webhook URL like this https://myproxy.com/UUID_OF_YOUR_WEBHOOK
    #     # proxyWebhook = ""
    #     secret = "xxxx"
    #
    #     [vcs.servers.Gitlab.gitlab.Status]
    #
    #       # Set to true if you don't want CDS to push statuses on the VCS server
    #       # disable = false
    #
    #       # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server
    #       # showDetail = false
