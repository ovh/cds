<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CDS Documentation</title>
    <link>https://ovh.github.com/cds/</link>
    <description>Recent content on CDS Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ovh.github.com/cds/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About CDS</title>
      <link>https://ovh.github.com/cds/getting-started/about-cds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/about-cds/</guid>
      <description>What is CDS? CDS is a Continuous Delivery solution with an architecture featuring:
 A complete isolation between tenants High availability oriented architecture Automatic scaling Automation oriented with iso-feature API, CLI and WebUI  Designed for scalability, CDS tasks can run either on cloud infrastructure or on your own machines, should you start some workers using a hatchery.
CDS exposes an API available to workers and humans through cli or WebUI.</description>
    </item>
    
    <item>
      <title>Concepts</title>
      <link>https://ovh.github.com/cds/getting-started/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/concepts/</guid>
      <description>Project A project contains applications, pipelines and environments.
A project is the first level of permissions management. Any CDS application has to be created inside a project.
The project key has to be unique amongst all projects in CDS.
At creation, a project has to have at least one group with edition permissions on it. It is possible to use either an existing group or create a new one.</description>
    </item>
    
    <item>
      <title>Pipeline</title>
      <link>https://ovh.github.com/cds/getting-started/concepts/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/concepts/pipeline/</guid>
      <description>A pipeline describes how things need to be executed in order to achieve wanted result. In CDS, a pipeline a defined on a project and can be used on several applications inside the same project.
A pipeline is structured in sequential stages containing one or multiple concurrent jobs.
In CDS there is several types of pipeline : build, testing and deployment. In Pipeline configuration file, default type is build.</description>
    </item>
    
    <item>
      <title>Stage</title>
      <link>https://ovh.github.com/cds/getting-started/concepts/stage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/concepts/stage/</guid>
      <description>Usually in CDS a build pipeline is structured of the following stages :
 Compile stage : Build the binaries Analysis &amp;amp; Unit Tests stage : Run all unit tests and analyse code quality Packaging stage : Build the final package, Virtual Machine Image or Docker Image.  In CDS, stages are executed sequentially if the previous stage is successfull.
You can define trigger conditions on a stage, to enable it on certain conditions.</description>
    </item>
    
    <item>
      <title>Job</title>
      <link>https://ovh.github.com/cds/getting-started/concepts/job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/concepts/job/</guid>
      <description>The Job is more important concept in CDS. It will be composed of steps which will be run sequencially. A Job will be executed is a dedicated workspace and each new run of a job will have a new dedicated workspace. It means that you cannot share a workspace between jobs or between two runs of a job.
A Job will be executed by a worker. CDS will choose and provision a worker for dependending of the Requirements you define on your job.</description>
    </item>
    
    <item>
      <title>Step</title>
      <link>https://ovh.github.com/cds/getting-started/concepts/step/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/concepts/step/</guid>
      <description>The steps of a job is the list of the different operation performed by the CDS worker. Each steps is based on an Action which is defined by CDS. The list of all actions is defined on *&amp;lt;your cds url ui&amp;gt;/#/action*. On the very first step failed, the job is marked as Failed and execution is stopped.
You can define a Step as final. It mean that even if the job is failed, the step will be executed.</description>
    </item>
    
    <item>
      <title>Actions</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/</guid>
      <description>Inside a Job, each steps is based on an action.
Types of actions :
 Built-in actions, available on each CDS Installation User actions, added by CDS Administrators for now Plugins actions, added by CDS Administrators  </description>
    </item>
    
    <item>
      <title>Advanced</title>
      <link>https://ovh.github.com/cds/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/</guid>
      <description> Hatcheries Repositories Manager Write a Plugin Worker  </description>
    </item>
    
    <item>
      <title>Artifact Download</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/builtin/artifact-download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/builtin/artifact-download/</guid>
      <description> Artifact Download Action is a builtin action, you can&amp;rsquo;t modify it.
This action can be used to get artifact uploaded by the Artifact Upload action
Action Parameter  application: Application from where artifacts will be downloaded pipeline: Pipeline from where artifacts will be downloaded tag: Tag set in the Artifact Upload action path: Path where artifacts will be downloaded  Example of Job Configuration  Download artifact from the parent pipeline   Download artifact from the previous stage  </description>
    </item>
    
    <item>
      <title>Artifact Upload</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/builtin/artifact-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/builtin/artifact-upload/</guid>
      <description> Artifact Upload Action Artifact Upload Action is a builtin action, you can&amp;rsquo;t modify it.
This action can be used to upload artifact in CDS. This is the good way to share files between pipelines or stages.
Action Parameter  path: Path of file to upload tag: Tag to apply to your file.  Example of Job Configuration  With a tag to indicate the build version   With a latest tag  </description>
    </item>
    
    <item>
      <title>Bitbucket</title>
      <link>https://ovh.github.com/cds/advanced/repositories_manager/bitbucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/repositories_manager/bitbucket/</guid>
      <description>Authorize CDS on your Bitbucket instance You need to perform the following steps :
 Bitbucket admin privileges A RSA Key Pair  Create a CDS application in BitBucket In Bitbucket go to Administration Settings / Application Links. Create a new Application with :
 Name : CDS Type : Generic Application Application URL : Your CDS URL Display URL : Your CDS URL  On this application, you just have to set up OAuth Incoming Authentication :</description>
    </item>
    
    <item>
      <title>Building Pipelines</title>
      <link>https://ovh.github.com/cds/building-pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Built-in Actions</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/builtin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/builtin/</guid>
      <description>User actions use built-in action(s) and / or other existing action(s).
There can be created by CLI and / or Web UI.
User actions from CDS Contributions :
Artifact Download Artifact Upload GitClone JUnit Script </description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://ovh.github.com/cds/getting-started/installation/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/installation/configuration/</guid>
      <description>The toml configuration can be provided by a file or via consul k/v store.
Start CDS with local configuration file You can also generate a configuration file template with the following command.
$ $PATH_TO_CDS/api --config my_conf_file.toml Generating default config file my_conf_file.toml  Edit this file.
Run CDS
$ $PATH_TO_CDS/api --config my_conf_file.toml Reading configuration file my_new_file.toml 2017/04/04 16:33:17 [NOTICE] Starting CDS server... ...  Start CDS with Consul Upload your toml configuration to consul</description>
    </item>
    
    <item>
      <title>Database Management</title>
      <link>https://ovh.github.com/cds/getting-started/installation/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/installation/database/</guid>
      <description>CDS provides all needed tools scripts to perform Schema creation and auto-migration. Those tools are embedded inside the api binary.
Creation On a brand new database run the following command:
$ $PATH_TO_CDS/api database upgrade --db-host &amp;lt;host&amp;gt; --db-host &amp;lt;port&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt; --limit 0  Upgrade On an existing database, run the following command on each CDS update:
$ $PATH_TO_CDS/api database upgrade --db-host &amp;lt;host&amp;gt; --db-host &amp;lt;port&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt;  More details Read more about CDS Database Management</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://ovh.github.com/cds/getting-started/installation/ready-to-run/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/installation/ready-to-run/docker-compose/</guid>
      <description>Run with Docker-Compose The docker-compose.yml contains:
 cds-db service with a postgresql cds-cache service with a redis cds-migrate service to prepare DB tables. cds-api service cds-ui service cds-hatchery-swarm service cds-hatchery-local service  Docker compose is very convenient to launch CDS for testing it. But this is not recommended for a Production Installation.
How to run $ git clone https://github.com/ovh/cds.git $ cd cds $ export HOSTNAME=$(hostname) # Create PG Database $ docker-compose up --no-recreate -d cds-db # check if db is UP # check if last log is &amp;quot;LOG: database system is ready to accept connections&amp;quot; $ docker-compose logs $ docker-compose up --no-recreate cds-migrate # You should have this log: &amp;quot;cds_cds-migrate_1 exited with code 0&amp;quot; # run API and UI $ docker-compose up cds-api cds-ui  Open a browser on http://localhost:2015, then register a new user.</description>
    </item>
    
    <item>
      <title>Download</title>
      <link>https://ovh.github.com/cds/getting-started/installation/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/installation/download/</guid>
      <description>You&amp;rsquo;ll find last release of CDS on Github Releases</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ovh.github.com/cds/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/</guid>
      <description>Discover what is CDS and the core-concepts behind it.
About CDS Concepts Installation  </description>
    </item>
    
    <item>
      <title>Git track </title>
      <link>https://ovh.github.com/cds/tutorials/git-track/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/git-track/</guid>
      <description>Introduction This tutorial introduce the cds track &amp;lt;git commit&amp;gt; function of CDS cli.
Goal: Immediate feedback cds track aims to display in your terminal the status of the pipeline building code refered by given commit hash.
Push your branch, start cds track and get immediate feedback.
Git track will display all pipelines related to given hash.
This means triggered testing and deployment pipelines will be displayed.
Git alias sugar To enhance even more your daily routine, you can create a git alias:</description>
    </item>
    
    <item>
      <title>GitClone</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/builtin/gitclone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/builtin/gitclone/</guid>
      <description>GitClone is a builtin action, you can&amp;rsquo;t modify it.
This action clone a repository into a new directory.
Git Clone will be done with a depth of 1.
You can use a privateKey, this is usually a project or application variable of type key. {{.cds.app.a-key.pub}}
Parameters  url - mandatory - URL must contain information about the transport protocol, the address of the remote server, and the path to the repository.</description>
    </item>
    
    <item>
      <title>Github</title>
      <link>https://ovh.github.com/cds/advanced/repositories_manager/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/repositories_manager/github/</guid>
      <description>Authorize CDS on Github Create a CDS application on Github Go to https://github.com/settings/developers and Register a new application: set an application name, the url and a description. Dont set up Authorization callback URL.
On the next page Github give you a Client ID and a Client Secret
Connect CDS To Github With CDS CLI run :
 $ cds admin reposmanager add GITHUB github http://github.com client-id=&amp;lt;your_client_id&amp;gt; client-secret=&amp;lt;client-secret&amp;gt;  If you use Vault as Secret Manager: Set in Vault you CDS Client Secret in a secret named : cds/repositoriesmanager-secrets-github.</description>
    </item>
    
    <item>
      <title>Hatcheries</title>
      <link>https://ovh.github.com/cds/advanced/hatcheries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/hatcheries/</guid>
      <description>Hatchery is a binary dedicated to spawn and kill worker in accordance with build queue needs.
An hatchery is started with permissions to build all pipelines accessible from a given group, using token generated by user.
There are 5 modes for hatcheries:
 Local (Start workers on a single host) Local Docker (Start worker model instances on a single host) Marathon (Start worker model instances on a mesos cluster with marathon framework) Swarm (Start worker on a docker swarm cluster) Openstack (Start hosts on an openstack cluster)  Local mode Hatchery starts workers directly as local process.</description>
    </item>
    
    <item>
      <title>Hatchery Openstack</title>
      <link>https://ovh.github.com/cds/advanced/hatcheries/openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/hatcheries/openstack/</guid>
      <description>CDS build using OVH.com Openstack infrastructure
Start Opentack hatchery Generate a token for group:
$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Then start hatchery:
OPENSTACK_USER=&amp;lt;user&amp;gt; OPENSTACK_TENANT=&amp;lt;tenant&amp;gt; OPENSTACK_AUTH_ENDPOINT=https://auth.cloud.ovh.net OPENSTACK_PASSWORD=&amp;lt;password&amp;gt; OPENSTACK_REGION=SBG1 hatchery openstack \ --api=https://api.domain \ --max-worker=10 \ --provision=1 \ --token=fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  This hatchery will now start worker of model &amp;lsquo;docker&amp;rsquo; on OVH.com Openstack infrastructure when a pipeline is in queue with requirement docker.
Setup a worker model See Tutorial</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://ovh.github.com/cds/getting-started/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/installation/</guid>
      <description> Requirements Download Configuration Database Management Ready to RUN  </description>
    </item>
    
    <item>
      <title>JUnit</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/builtin/junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/builtin/junit/</guid>
      <description> JUnit is a builtin action, you can&amp;rsquo;t modify it.
This action parse given file to extract Unit Test results.
Parameters  path: Path to junit xml file  </description>
    </item>
    
    <item>
      <title>Plugins Actions</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/plugins/</guid>
      <description>CDS Plugin System lets users develop complex actions. See How to write a plugin
CDS Administrators have to import plugins on CDS to let user use them.
Plugins from CDS Contributions:
plugin-download plugin-group-tmpl plugin-kafka-publish plugin-marathon plugin-ssh-cmd plugin-tmpl plugin-venom </description>
    </item>
    
    <item>
      <title>Ready to RUN</title>
      <link>https://ovh.github.com/cds/getting-started/installation/ready-to-run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/installation/ready-to-run/</guid>
      <description> Docker Compose  </description>
    </item>
    
    <item>
      <title>Repositories Manager</title>
      <link>https://ovh.github.com/cds/advanced/repositories_manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/repositories_manager/</guid>
      <description>CDS can be linked to following repositories manager :
 Atlassian Stash Github  It allows you to enable some CDS features such as :
 Create application in CDS from Stash or Github Attach an application to its Stash or Github repository Fully automatic hook management Branch filtering on application workflows Commit logs on pipeline build details  Go through this tutorial to enable the link between repositories managers and CDS.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://ovh.github.com/cds/building-pipelines/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/requirements/</guid>
      <description>A Job will be executed by a worker.
CDS will choose and provision a worker for dependending of the requirements you define on your job.
You can set as many requirements as you want, following those rules :
 Only one model can be set as requirement Only one hostname can be set as requirement Memory and Services requirements are availabe only on Docker models  Note on Service Requirement A Service in CDS is a docker container which is linked with your base image.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://ovh.github.com/cds/getting-started/installation/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/getting-started/installation/requirements/</guid>
      <description>CDS API is the core component of CDS. To start CDS api, the only mandatory dependency is a PostgreSQL database and a path to the directory containing other CDS binaries.
There is are two ways to set up CDS:
 as toml configuration over environment variables.  CDS API Third-parties At the minimum, CDS needs a PostgreSQL Database &amp;gt;= 9.4. But for serious usage your may need :
 A Redis server or sentinels based cluster used as a cache and session store A LDAP Server for authentication A SMTP Server for mails A Kafka Broker to manage CDS events A Openstack Swift Tenant to store builds artifacts A Vault server for cipher and app keys A Consul to manage CDS Configuration  See Configuration template for more details</description>
    </item>
    
    <item>
      <title>Script</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/builtin/script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/builtin/script/</guid>
      <description>Script is a builtin action, you can&amp;rsquo;t modify it.
This action execute a script, written in script attribute
Parameters  script: Content of your script. You can put  #!/bin/bash  or
#!/bin/perl  at first line.
Make sure that the binary used is in the pre-requisites of action</description>
    </item>
    
    <item>
      <title>Service Requirement Nginx</title>
      <link>https://ovh.github.com/cds/tutorials/service-link-requirement-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/service-link-requirement-nginx/</guid>
      <description>Add the service requirement  Name: mypg. This will be the service hostname Type: service Value: nginx:1.11.1. This is the name of docker image to link to current job  And a requirement model which allow you to execute apt-get install -y postgresql-client
worker-model-docker-simple.md
Add a step of type script docker image nginx:1.11.1 start a nginx at startup. So, it&amp;rsquo;s now available on http://mynginx
curl -v -X GET http://mynginx  Execute Pipeline</description>
    </item>
    
    <item>
      <title>Service Requirement PostgreSQL</title>
      <link>https://ovh.github.com/cds/tutorials/service-link-requirement-pg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/service-link-requirement-pg/</guid>
      <description>Add the service requirement Requirement Service
 Name: mypg. This will be the service hostname Type: service Value: postgres:9.5.3 POSTGRES_USER=myuser POSTGRES_PASSWORD=mypassword. This is the name of docker image to link to current job  And a requirement model which allow you to execute apt-get install -y postgresql-client, see HowTo
Add a step of type script docker image postgres:9.5.3 start a nginx at startup. So, it&amp;rsquo;s now available on http://mynginx</description>
    </item>
    
    <item>
      <title>Setup Worker Model Docker Customized</title>
      <link>https://ovh.github.com/cds/tutorials/worker-model-docker-customized/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/worker-model-docker-customized/</guid>
      <description>A worker model of type docker can be spawned by a Hatchery Docker or Docker Swarm
Create a customized Worker Model In this example, we will build a Docker model able to build an AngularJs application with webfonts. To create webfonts, a grunt task (optionnally) requires fontforge and ttfautohint.
The following tools must be included in the model:
 NodeJs and npm bower grunt-cli gulp-cli fontforge ttfautohint  We will use the official nodejs image from Docker.</description>
    </item>
    
    <item>
      <title>Setup Worker Model Docker Simple</title>
      <link>https://ovh.github.com/cds/tutorials/worker-model-docker-simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/worker-model-docker-simple/</guid>
      <description>A worker model of type docker can be spawned by a Hatchery Docker or Docker Swarm
Register a worker Model from a existing Docker Image Docker Image golang:1.8.1 have a &amp;ldquo;curl&amp;rdquo; in $PATH, so it can be used as it is.
 In the UI, click on the wheel on the hand right top corner and select *workers&amp;rdquo; (or go the the route #/worker) At the bottom of the page, fill the form  Name of your worker Golang-1.</description>
    </item>
    
    <item>
      <title>Setup Worker Model Openstack</title>
      <link>https://ovh.github.com/cds/tutorials/worker-model-openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/worker-model-openstack/</guid>
      <description>CDS build using OVH.com Openstack infrastructure
Create Openstack user In OVH manager, in cloud section, click on the menu on the Servers&amp;gt;Openstack item.
You will be able to create an Openstack user, enter description (name and password will be generated).
Add Openstack worker model We need to define an Openstack worker model to have Openstack hatchery booting workers.
We will create a model called docker:
 With low hardware capacity (vps-ssd-1) On Debian 8 With docker ready to use Git installed  First, define a udata file.</description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>https://ovh.github.com/cds/building-pipelines/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/templates/</guid>
      <description>Templates from CDS Contributions :
cds-template-cds-plugin cds-template-cds-template cds-template-deploy-marathon-app cds-template-only-git-clone-job cds-template-plain </description>
    </item>
    
    <item>
      <title>Token</title>
      <link>https://ovh.github.com/cds/advanced/worker/token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/worker/token/</guid>
      <description> Generate a Token Purpose In order to start a worker, you need to provide a worker key to be able to build your pipelines.
CLI Run the following command, replace yourgroup with your group
$ cds generate token -g yourgroup -e persistent  </description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://ovh.github.com/cds/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/</guid>
      <description> Worker Setup Setup Worker Model Docker Simple Setup Worker Model Docker Customized Setup Worker Model Openstack Service Requirement Nginx Service Requirement PostgreSQL Git track   </description>
    </item>
    
    <item>
      <title>User Actions</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/user-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/user-actions/</guid>
      <description>CDS User Actions are developed in CDS. There are available on all CDS Installation.
Built-in actions :
cds-docker-package cds-nexus-upload cds-perl-test </description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://ovh.github.com/cds/building-pipelines/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/variables/</guid>
      <description>In CDS, it is possible to define variables at different levels:
 Project Environment Application  Variable types Existing variable types:
 String Text Boolean Number Password Key  Placeholder format All variables in CDS can be invoked using the simple {{.VAR}} format. To simplify the use between all the variable sources, we have defined the following prefixes:
 Action variable: {{.VAR}} Builtin CDS: {{.cds.VAR}} Git: {{.git.VAR}} Pipeline: {{.cds.pip.VAR}} Application: {{.</description>
    </item>
    
    <item>
      <title>Worker</title>
      <link>https://ovh.github.com/cds/advanced/worker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/worker/</guid>
      <description>A pipeline is structured in sequential stages containing one or multiple concurrent jobs. A Job will be executed by a worker.
Building your own worker model enable you to integrate your own tools, or to customize the tools you need to use. For instance, to build an AngularJs application, you shall need a worker capable of installing npm tools, importing bower packages (these are nodeJs tools), building webfonts with fontforge, &amp;hellip;</description>
    </item>
    
    <item>
      <title>Worker Model</title>
      <link>https://ovh.github.com/cds/advanced/worker/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/worker/model/</guid>
      <description>Purpose The goal of CDS is to start a worker when you need it and matching all your requirements exactly. In order to scale automatically on demand, it is possible to register a worker model.
The goal of worker model is to describe the capabities of a given docker/iso image in terms of architecture, pre-installed binaries or libraries.
Types There is 2 types of worker models:
 Docker images, see how to create a worker model docker Openstack images, see how to create a worker model openstack  Capabilities Capabilities have a name, a type and a value.</description>
    </item>
    
    <item>
      <title>Worker Setup</title>
      <link>https://ovh.github.com/cds/tutorials/worker-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/worker-setup/</guid>
      <description>Introduction Why would you need to setup your own worker ? There is several cases where one would need to setup his own worker:
 Perform incremental build Build on a specific architecture Perform integration tests in a specific network  How does this work ? Workers authenticate on CDS with a token and have the same permissions as the user who generated it.
Bottom line, if you can access the application, your worker will too.</description>
    </item>
    
    <item>
      <title>Write a Plugin</title>
      <link>https://ovh.github.com/cds/advanced/write-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/advanced/write-plugin/</guid>
      <description>A CDS worker executes job, and job is composed of steps.
A step is :
 a builtin action, as GitClone, etc&amp;hellip; read more a user action read more a Plugin Action  A Plugin is a Golang Binary.
Take a look at https://github.com/ovh/cds/tree/master/sdk/plugin/dummy/dummy_plugin.go
Contribute on https://github.com/ovh/cds/tree/master/contrib/plugins</description>
    </item>
    
    <item>
      <title>cds-docker-package</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/user/cds-docker-package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/user/cds-docker-package/</guid>
      <description>Build image and push it to docker repository
Parameters  imageName: Name of your docker image, without tag. Enter myimage for build image myregistry/myimage:mytag imageTag: Tag of your docker image. Enter mytag for build image myregistry/myimage:mytag. {{.cds.version}} is a good tag from CDS. You can use many tags: firstTag,SecondTag Example : {{.cds.version}},latest dockerfileDirectory: Directory which contains your Dockerfile. dockerOpts: Docker options, Enter &amp;ndash;no-cache &amp;ndash;pull if you want for example dockerRegistry: Docker Registry.</description>
    </item>
    
    <item>
      <title>cds-nexus-upload</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/user/cds-nexus-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/user/cds-nexus-upload/</guid>
      <description>Upload file on Nexus
Parameters  files: Regex of files you want to upload packaging: Packaging type of the artifact repository: Nexus repository that the artifact is contained in extension: Extension of the artifact artifactId: Artifact id of the artifact groupId: Group id of the artifact version: Version of the artifact. Supports resolving of &amp;lsquo;LATEST&amp;rsquo;, &amp;lsquo;RELEASE&amp;rsquo; and snapshot versions (&amp;lsquo;1.0-SNAPSHOT&amp;rsquo;) too. login: Login for nexus password: Password for nexus url: Nexus URL  Requirements  bash: type:binary Value:bash curl: type:binary Value:curl  More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-perl-test</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/user/cds-perl-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/user/cds-perl-test/</guid>
      <description>Test with prove on perl source code
Parameters  testDirectory: Directory where is Perl Source Code  Requirements  perl: type:binary Value:perl bash: type:binary Value:bash prove: type:binary Value:prove  More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-cds-plugin</title>
      <link>https://ovh.github.com/cds/building-pipelines/templates/cds-template-cds-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/templates/cds-template-cds-plugin/</guid>
      <description>This template creates a pipeline for building CDS Plugin with:
 A &amp;ldquo;Commit Stage&amp;rdquo; with one job &amp;ldquo;Compile&amp;rdquo; Job contains two steps: GitClone and CDS_GoBuild  Parameters  repo: Your source code repository package.root: example: github.com/ovh/cds package.sub: Directory inside your repository where is the plugin. Enter &amp;ldquo;contrib/plugins/your-plugin&amp;rdquo; for github.com/ovh/cds/contrib/plugins/your-plugin   More More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-cds-template</title>
      <link>https://ovh.github.com/cds/building-pipelines/templates/cds-template-cds-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/templates/cds-template-cds-template/</guid>
      <description>This template creates a pipeline for building CDS Template with:
 A &amp;ldquo;Commit Stage&amp;rdquo; with one job &amp;ldquo;Compile&amp;rdquo; Job contains two steps: GitClone and CDS_GoBuild  Parameters  repo: Your source code repository package.root: example: github.com/ovh/cds package.sub: Directory inside your repository where is the template. Enter &amp;ldquo;contrib/templates/your-plugin&amp;rdquo; for github.com/ovh/cds/contrib/templates/your-plugin   More More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-deploy-marathon-app</title>
      <link>https://ovh.github.com/cds/building-pipelines/templates/cds-template-deploy-marathon-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/templates/cds-template-deploy-marathon-app/</guid>
      <description>This template creates:
 a deployment pipeline with one stage, containing and one job job calls plugin-marathon an application with a variable named &amp;ldquo;marathon.config&amp;rdquo; uses environment variables marathonHost, password and user  Please update Application / Environment Variables after creating application.
Parameters  docker.image: Your docker image without the tag marathon.appID: Your marathon application ID marathon.config: Content of your marathon.json file  More More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-only-git-clone-job</title>
      <link>https://ovh.github.com/cds/building-pipelines/templates/cds-template-only-git-clone-job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/templates/cds-template-only-git-clone-job/</guid>
      <description>This template creates:
 a build pipeline with one stage, containing one job job contains 2 steps: GitClone and a empty script.  Pipeline name contains Application name. If you want to make a reusable pipeline, please consider updating this name after creating application.
Parameters  repo: Your source code repository  More More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-plain</title>
      <link>https://ovh.github.com/cds/building-pipelines/templates/cds-template-plain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/templates/cds-template-plain/</guid>
      <description>This template creates:
 a build pipeline with two stages: Commit Stage and Packaging Stage a deploy pipeline with one stage: Deploy Stage  Commit Stage :
 run git clone run make build  Packaging Stage:
 run docker build and docker push  Deploy Stage:
 it&amp;rsquo;s en empty script  Packaging and Deploy are optional.
Parameters  repo: Your source code repository withPackage: Do you want a Docker Package?</description>
    </item>
    
    <item>
      <title>header</title>
      <link>https://ovh.github.com/cds/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/_header/</guid>
      <description></description>
    </item>
    
    <item>
      <title>plugin-download</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-download/</guid>
      <description>This is a plugin to download file from URL
Parameters  url: the url of your file filepath: the destination of your file to be copied headers: specific headers to add to your request (&amp;ldquo;headerName&amp;rdquo;=&amp;ldquo;value&amp;rdquo; newline separated list)  More More documentation on Github</description>
    </item>
    
    <item>
      <title>plugin-group-tmpl</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-group-tmpl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-group-tmpl/</guid>
      <description>This actions helps you generate a marathon group application file. It takes a config template file as a single application, and creates the group with the variables specified for each application in the applications files. Check documentation on text/template for more information https://golang.org/pkg/text/template.
Parameters  config: Template file to use output: Output path for generated file (default to .out or just trimming .tpl extension) applications: Applications file variables  More More documentation on Github</description>
    </item>
    
    <item>
      <title>plugin-kafka-publish</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-kafka-publish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-kafka-publish/</guid>
      <description>This action helps you to send data through Kafka across every network.
You are able to send a custom &amp;quot;message&amp;quot; file and all the artifacts you want: there is no file size limit. To improve security, you can encrypt the files content with a GPG Key. From the consummer side, you will need to decrypt files content with you GPG private key and your passphrase. This action is a CDS Plugin packaged as a single binary file you can download and use to listen and consume data coming from CDS through Kafka.</description>
    </item>
    
    <item>
      <title>plugin-marathon</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-marathon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-marathon/</guid>
      <description>This action helps you to deploy on Mesos/Marathon. Provide a marathon.json file to configure deployment.
Your marathon.json file can be templated with cds variables &amp;ldquo;{{.cds.variables}}&amp;rdquo;. Enable &amp;ldquo;waitForDeployment&amp;rdquo; option to ensure deployment is successfull.
Parameters  user: Marathon User (please use project, application or environment variables) password: Marathon Password (please use project, application or environment variables) configuration: Marathon application configuration file (json format) waitForDeployment: Wait for instances deployment. If set, CDS will wait for all instances to be deployed until timeout is over.</description>
    </item>
    
    <item>
      <title>plugin-ssh-cmd</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-ssh-cmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-ssh-cmd/</guid>
      <description>This plugin helps you to run cmd on remote server over ssh.
Parameters  username: Username privateKey: SSH RSA private key hostnames: Hostnames (comma separated values) command: Command timeout: Timeout (seconds) commandTimeout: Command Timeout (seconds)  More More documentation on Github</description>
    </item>
    
    <item>
      <title>plugin-tmpl</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-tmpl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-tmpl/</guid>
      <description>This action helps you generates a file using a template file and text/template golang package.
Check documentation on text/template for more information https://golang.org/pkg/text/template.
Parameters  file: Template file to use output: Output path for generated file (default to .out or just trimming .tpl extension) params: Parameters to pass on the template file (key=value newline separated list)  More More documentation on Github</description>
    </item>
    
    <item>
      <title>plugin-venom</title>
      <link>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-venom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/building-pipelines/actions/plugins/plugin-venom/</guid>
      <description>This plugin helps you to run venom. Venom: https://github.com/runabove/venom.
Add an extra step of type junit on your job to view tests results on CDS UI.
Parameters  path: Path containers yml venom files. Format: adirectory/, ./aTest.yml, ./foo/b/*/z.yml exclude: Exclude some files, one file per line parallel: Launch Test Suites in parallel. Enter here number of routines output: Directory where output xunit result file details: Output Details Level: low, medium, high loglevel: Log Level: debug, info, warn or error  More More documentation on Github</description>
    </item>
    
  </channel>
</rss>