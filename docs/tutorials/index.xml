<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on CDS Documentation</title>
    <link>https://ovh.github.com/cds/tutorials/</link>
    <description>Recent content in Tutorials on CDS Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ovh.github.com/cds/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Worker Setup</title>
      <link>https://ovh.github.com/cds/tutorials/tutorials.worker-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/tutorials.worker-setup/</guid>
      <description>Introduction Why would you need to setup your own worker ? There is several cases where one would need to setup his own worker:
 Perform incremental build Build on a specific architecture Perform integration tests in a specific network  How does this work ? Workers authenticate on CDS with a token and have the same permissions as the user who generated it.
Bottom line, if you can access the application, your worker will too.</description>
    </item>
    
    <item>
      <title>Setup Worker Model Docker Simple</title>
      <link>https://ovh.github.com/cds/tutorials/tutorials.worker-model-docker-simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/tutorials.worker-model-docker-simple/</guid>
      <description>A worker model of type docker can be spawned by a Hatchery Docker or Docker Swarm
Register a worker Model from a existing Docker Image Docker Image golang:1.8.1 have a &amp;ldquo;curl&amp;rdquo; in $PATH, so it can be used as it is.
 In the UI, click on the wheel on the hand right top corner and select *workers&amp;rdquo; (or go the the route #/worker) At the bottom of the page, fill the form  Name of your worker Golang-1.</description>
    </item>
    
    <item>
      <title>Setup Worker Model Docker Customized</title>
      <link>https://ovh.github.com/cds/tutorials/tutorials.worker-model-docker-customized/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/tutorials.worker-model-docker-customized/</guid>
      <description>A worker model of type docker can be spawned by a Hatchery Docker or Docker Swarm
Create a customized Worker Model In this example, we will build a Docker model able to build an AngularJs application with webfonts. To create webfonts, a grunt task (optionnally) requires fontforge and ttfautohint.
The following tools must be included in the model:
 NodeJs and npm bower grunt-cli gulp-cli fontforge ttfautohint  We will use the official nodejs image from Docker.</description>
    </item>
    
    <item>
      <title>Setup Worker Model Openstack</title>
      <link>https://ovh.github.com/cds/tutorials/tutorials.worker-model-openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/tutorials.worker-model-openstack/</guid>
      <description>CDS build using OVH.com Openstack infrastructure
Create Openstack user In OVH manager, in cloud section, click on the menu on the Servers&amp;gt;Openstack item.
You will be able to create an Openstack user, enter description (name and password will be generated).
Add Openstack worker model We need to define an Openstack worker model to have Openstack hatchery booting workers.
We will create a model called docker:
 With low hardware capacity (vps-ssd-1) On Debian 8 With docker ready to use Git installed  First, define a udata file.</description>
    </item>
    
    <item>
      <title>Service Requirement Nginx</title>
      <link>https://ovh.github.com/cds/tutorials/tutorials.service-link-requirement-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/tutorials.service-link-requirement-nginx/</guid>
      <description>Add the service requirement  Name: mypg. This will be the service hostname Type: service Value: nginx:1.11.1. This is the name of docker image to link to current job  And a requirement model which allow you to execute apt-get install -y postgresql-client
worker-model-docker-simple.md
Add a step of type script docker image nginx:1.11.1 start a nginx at startup. So, it&amp;rsquo;s now available on http://mynginx
curl -v -X GET http://mynginx  Execute Pipeline</description>
    </item>
    
    <item>
      <title>Service Requirement PostgreSQL</title>
      <link>https://ovh.github.com/cds/tutorials/tutorials.service-link-requirement-pg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/tutorials.service-link-requirement-pg/</guid>
      <description>Add the service requirement Requirement Service
 Name: mypg. This will be the service hostname Type: service Value: postgres:9.5.3 POSTGRES_USER=myuser POSTGRES_PASSWORD=mypassword. This is the name of docker image to link to current job  And a requirement model which allow you to execute apt-get install -y postgresql-client, see HowTo
Add a step of type script docker image postgres:9.5.3 start a nginx at startup. So, it&amp;rsquo;s now available on http://mynginx</description>
    </item>
    
    <item>
      <title>Git track </title>
      <link>https://ovh.github.com/cds/tutorials/tutorials.git-track/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/tutorials.git-track/</guid>
      <description>Introduction This tutorial introduce the cds track &amp;lt;git commit&amp;gt; function of CDS cli.
Goal: Immediate feedback cds track aims to display in your terminal the status of the pipeline building code refered by given commit hash.
Push your branch, start cds track and get immediate feedback.
Git track will display all pipelines related to given hash.
This means triggered testing and deployment pipelines will be displayed.
Git alias sugar To enhance even more your daily routine, you can create a git alias:</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://ovh.github.com/cds/tutorials/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.com/cds/tutorials/tutorials/</guid>
      <description> Worker Setup Setup Worker Model Docker Simple Setup Worker Model Docker Customized Setup Worker Model Openstack Service Requirement Nginx Service Requirement PostgreSQL Git track   </description>
    </item>
    
  </channel>
</rss>