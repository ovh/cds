// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_artifact_manager is a generated GoMock package.
package mock_artifact_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/jfrog/build-info-go/entities"
	services "github.com/jfrog/jfrog-client-go/artifactory/services"
	utils "github.com/jfrog/jfrog-client-go/artifactory/services/utils"
	sdk "github.com/ovh/cds/sdk"
)

// MockArtifactManager is a mock of ArtifactManager interface.
type MockArtifactManager struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactManagerMockRecorder
}

// MockArtifactManagerMockRecorder is the mock recorder for MockArtifactManager.
type MockArtifactManagerMockRecorder struct {
	mock *MockArtifactManager
}

// NewMockArtifactManager creates a new mock instance.
func NewMockArtifactManager(ctrl *gomock.Controller) *MockArtifactManager {
	mock := &MockArtifactManager{ctrl: ctrl}
	mock.recorder = &MockArtifactManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactManager) EXPECT() *MockArtifactManagerMockRecorder {
	return m.recorder
}

// CheckArtifactExists mocks base method.
func (m *MockArtifactManager) CheckArtifactExists(repoName, artiName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckArtifactExists", repoName, artiName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckArtifactExists indicates an expected call of CheckArtifactExists.
func (mr *MockArtifactManagerMockRecorder) CheckArtifactExists(repoName, artiName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckArtifactExists", reflect.TypeOf((*MockArtifactManager)(nil).CheckArtifactExists), repoName, artiName)
}

// Copy mocks base method.
func (m *MockArtifactManager) Copy(params services.MoveCopyParams) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Copy indicates an expected call of Copy.
func (mr *MockArtifactManagerMockRecorder) Copy(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockArtifactManager)(nil).Copy), params)
}

// DeleteBuild mocks base method.
func (m *MockArtifactManager) DeleteBuild(project, buildName, buildVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuild", project, buildName, buildVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBuild indicates an expected call of DeleteBuild.
func (mr *MockArtifactManagerMockRecorder) DeleteBuild(project, buildName, buildVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuild", reflect.TypeOf((*MockArtifactManager)(nil).DeleteBuild), project, buildName, buildVersion)
}

// GetFileInfo mocks base method.
func (m *MockArtifactManager) GetFileInfo(repoName, filePath string) (sdk.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", repoName, filePath)
	ret0, _ := ret[0].(sdk.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockArtifactManagerMockRecorder) GetFileInfo(repoName, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockArtifactManager)(nil).GetFileInfo), repoName, filePath)
}

// GetFolderInfo mocks base method.
func (m *MockArtifactManager) GetFolderInfo(repoName, folderPath string) (*utils.FolderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderInfo", repoName, folderPath)
	ret0, _ := ret[0].(*utils.FolderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderInfo indicates an expected call of GetFolderInfo.
func (mr *MockArtifactManagerMockRecorder) GetFolderInfo(repoName, folderPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderInfo", reflect.TypeOf((*MockArtifactManager)(nil).GetFolderInfo), repoName, folderPath)
}

// GetProperties mocks base method.
func (m *MockArtifactManager) GetProperties(repoName, filePath string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties", repoName, filePath)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperties indicates an expected call of GetProperties.
func (mr *MockArtifactManagerMockRecorder) GetProperties(repoName, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockArtifactManager)(nil).GetProperties), repoName, filePath)
}

// GetRepository mocks base method.
func (m *MockArtifactManager) GetRepository(repoName string) (*services.RepositoryDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", repoName)
	ret0, _ := ret[0].(*services.RepositoryDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockArtifactManagerMockRecorder) GetRepository(repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockArtifactManager)(nil).GetRepository), repoName)
}

// GetRepositoryMaturity mocks base method.
func (m *MockArtifactManager) GetRepositoryMaturity(repoName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryMaturity", repoName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryMaturity indicates an expected call of GetRepositoryMaturity.
func (mr *MockArtifactManagerMockRecorder) GetRepositoryMaturity(repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryMaturity", reflect.TypeOf((*MockArtifactManager)(nil).GetRepositoryMaturity), repoName)
}

// GetURL mocks base method.
func (m *MockArtifactManager) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockArtifactManagerMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockArtifactManager)(nil).GetURL))
}

// Move mocks base method.
func (m *MockArtifactManager) Move(params services.MoveCopyParams) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Move indicates an expected call of Move.
func (mr *MockArtifactManagerMockRecorder) Move(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockArtifactManager)(nil).Move), params)
}

// PromoteDocker mocks base method.
func (m *MockArtifactManager) PromoteDocker(params services.DockerPromoteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteDocker", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// PromoteDocker indicates an expected call of PromoteDocker.
func (mr *MockArtifactManagerMockRecorder) PromoteDocker(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteDocker", reflect.TypeOf((*MockArtifactManager)(nil).PromoteDocker), params)
}

// PublishBuildInfo mocks base method.
func (m *MockArtifactManager) PublishBuildInfo(project string, request *entities.BuildInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBuildInfo", project, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBuildInfo indicates an expected call of PublishBuildInfo.
func (mr *MockArtifactManagerMockRecorder) PublishBuildInfo(project, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBuildInfo", reflect.TypeOf((*MockArtifactManager)(nil).PublishBuildInfo), project, request)
}

// Search mocks base method.
func (m *MockArtifactManager) Search(ctx context.Context, query string) (sdk.ArtifactResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].(sdk.ArtifactResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockArtifactManagerMockRecorder) Search(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockArtifactManager)(nil).Search), ctx, query)
}

// SetProperties mocks base method.
func (m *MockArtifactManager) SetProperties(repoName, filePath string, values *utils.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProperties", repoName, filePath, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProperties indicates an expected call of SetProperties.
func (mr *MockArtifactManagerMockRecorder) SetProperties(repoName, filePath, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProperties", reflect.TypeOf((*MockArtifactManager)(nil).SetProperties), repoName, filePath, values)
}

// XrayScanBuild mocks base method.
func (m *MockArtifactManager) XrayScanBuild(params services.XrayScanParams) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XrayScanBuild", params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XrayScanBuild indicates an expected call of XrayScanBuild.
func (mr *MockArtifactManagerMockRecorder) XrayScanBuild(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XrayScanBuild", reflect.TypeOf((*MockArtifactManager)(nil).XrayScanBuild), params)
}
