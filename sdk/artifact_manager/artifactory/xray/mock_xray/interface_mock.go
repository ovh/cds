// Code generated by MockGen. DO NOT EDIT.
// Source: xray.go
//
// Generated by this command:
//
//	mockgen -source=xray.go -destination=mock_xray/interface_mock.go Client
//

// Package mock_xray is a generated GoMock package.
package mock_xray

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	xray "github.com/ovh/cds/sdk/artifact_manager/artifactory/xray"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetReleaseBundleSBOM mocks base method.
func (m *MockClient) GetReleaseBundleSBOM(ctx context.Context, name, version string) (xray.CycloneDXReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseBundleSBOM", ctx, name, version)
	ret0, _ := ret[0].(xray.CycloneDXReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseBundleSBOM indicates an expected call of GetReleaseBundleSBOM.
func (mr *MockClientMockRecorder) GetReleaseBundleSBOM(ctx, name, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseBundleSBOM", reflect.TypeOf((*MockClient)(nil).GetReleaseBundleSBOM), ctx, name, version)
}

// GetReleaseBundleSBOMRaw mocks base method.
func (m *MockClient) GetReleaseBundleSBOMRaw(ctx context.Context, name, version string) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseBundleSBOMRaw", ctx, name, version)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseBundleSBOMRaw indicates an expected call of GetReleaseBundleSBOMRaw.
func (mr *MockClientMockRecorder) GetReleaseBundleSBOMRaw(ctx, name, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseBundleSBOMRaw", reflect.TypeOf((*MockClient)(nil).GetReleaseBundleSBOMRaw), ctx, name, version)
}
