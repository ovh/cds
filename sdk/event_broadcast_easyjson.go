// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4e84368aDecodeGithubComOvhCdsSdk(in *jlexer.Lexer, out *EventBroadcastUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OldBroadcast":
			easyjson4e84368aDecodeGithubComOvhCdsSdk1(in, &out.OldBroadcast)
		case "NewBroadcast":
			easyjson4e84368aDecodeGithubComOvhCdsSdk1(in, &out.NewBroadcast)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e84368aEncodeGithubComOvhCdsSdk(out *jwriter.Writer, in EventBroadcastUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OldBroadcast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson4e84368aEncodeGithubComOvhCdsSdk1(out, in.OldBroadcast)
	}
	{
		const prefix string = ",\"NewBroadcast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson4e84368aEncodeGithubComOvhCdsSdk1(out, in.NewBroadcast)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventBroadcastUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e84368aEncodeGithubComOvhCdsSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventBroadcastUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e84368aEncodeGithubComOvhCdsSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventBroadcastUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e84368aDecodeGithubComOvhCdsSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventBroadcastUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e84368aDecodeGithubComOvhCdsSdk(l, v)
}
func easyjson4e84368aDecodeGithubComOvhCdsSdk1(in *jlexer.Lexer, out *Broadcast) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "level":
			out.Level = string(in.String())
		case "project_key":
			out.ProjectKey = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Updated).UnmarshalJSON(data))
			}
		case "project_id":
			if in.IsNull() {
				in.Skip()
				out.ProjectID = nil
			} else {
				if out.ProjectID == nil {
					out.ProjectID = new(int64)
				}
				*out.ProjectID = int64(in.Int64())
			}
		case "archived":
			out.Archived = bool(in.Bool())
		case "read":
			out.Read = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e84368aEncodeGithubComOvhCdsSdk1(out *jwriter.Writer, in Broadcast) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Level))
	}
	if in.ProjectKey != "" {
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Updated).MarshalJSON())
	}
	if in.ProjectID != nil {
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ProjectID))
	}
	{
		const prefix string = ",\"archived\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Archived))
	}
	{
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Read))
	}
	out.RawByte('}')
}
func easyjson4e84368aDecodeGithubComOvhCdsSdk2(in *jlexer.Lexer, out *EventBroadcastDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BroadcastID":
			out.BroadcastID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e84368aEncodeGithubComOvhCdsSdk2(out *jwriter.Writer, in EventBroadcastDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BroadcastID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.BroadcastID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventBroadcastDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e84368aEncodeGithubComOvhCdsSdk2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventBroadcastDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e84368aEncodeGithubComOvhCdsSdk2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventBroadcastDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e84368aDecodeGithubComOvhCdsSdk2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventBroadcastDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e84368aDecodeGithubComOvhCdsSdk2(l, v)
}
func easyjson4e84368aDecodeGithubComOvhCdsSdk3(in *jlexer.Lexer, out *EventBroadcastAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "level":
			out.Level = string(in.String())
		case "project_key":
			out.ProjectKey = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Updated).UnmarshalJSON(data))
			}
		case "project_id":
			if in.IsNull() {
				in.Skip()
				out.ProjectID = nil
			} else {
				if out.ProjectID == nil {
					out.ProjectID = new(int64)
				}
				*out.ProjectID = int64(in.Int64())
			}
		case "archived":
			out.Archived = bool(in.Bool())
		case "read":
			out.Read = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e84368aEncodeGithubComOvhCdsSdk3(out *jwriter.Writer, in EventBroadcastAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Level))
	}
	if in.ProjectKey != "" {
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Updated).MarshalJSON())
	}
	if in.ProjectID != nil {
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ProjectID))
	}
	{
		const prefix string = ",\"archived\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Archived))
	}
	{
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Read))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventBroadcastAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e84368aEncodeGithubComOvhCdsSdk3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventBroadcastAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e84368aEncodeGithubComOvhCdsSdk3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventBroadcastAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e84368aDecodeGithubComOvhCdsSdk3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventBroadcastAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e84368aDecodeGithubComOvhCdsSdk3(l, v)
}
