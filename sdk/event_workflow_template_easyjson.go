// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3f98ee73DecodeGithubComOvhCdsSdk(in *jlexer.Lexer, out *EventWorkflowTemplateUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_workflow_template":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk1(in, &out.OldWorkflowTemplate)
		case "new_workflow_template":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk1(in, &out.NewWorkflowTemplate)
		case "change_message":
			out.ChangeMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk(out *jwriter.Writer, in EventWorkflowTemplateUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_workflow_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk1(out, in.OldWorkflowTemplate)
	}
	{
		const prefix string = ",\"new_workflow_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk1(out, in.NewWorkflowTemplate)
	}
	{
		const prefix string = ",\"change_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChangeMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowTemplateUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98ee73EncodeGithubComOvhCdsSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowTemplateUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98ee73EncodeGithubComOvhCdsSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowTemplateUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98ee73DecodeGithubComOvhCdsSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowTemplateUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98ee73DecodeGithubComOvhCdsSdk(l, v)
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk1(in *jlexer.Lexer, out *WorkflowTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "group_id":
			out.GroupID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "slug":
			out.Slug = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make(WorkflowTemplateParameters, 0, 1)
					} else {
						out.Parameters = WorkflowTemplateParameters{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v1 WorkflowTemplateParameter
					easyjson3f98ee73DecodeGithubComOvhCdsSdk2(in, &v1)
					out.Parameters = append(out.Parameters, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "value":
			out.Workflow = string(in.String())
		case "pipelines":
			if in.IsNull() {
				in.Skip()
				out.Pipelines = nil
			} else {
				in.Delim('[')
				if out.Pipelines == nil {
					if !in.IsDelim(']') {
						out.Pipelines = make(PipelineTemplates, 0, 4)
					} else {
						out.Pipelines = PipelineTemplates{}
					}
				} else {
					out.Pipelines = (out.Pipelines)[:0]
				}
				for !in.IsDelim(']') {
					var v2 PipelineTemplate
					easyjson3f98ee73DecodeGithubComOvhCdsSdk3(in, &v2)
					out.Pipelines = append(out.Pipelines, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "applications":
			if in.IsNull() {
				in.Skip()
				out.Applications = nil
			} else {
				in.Delim('[')
				if out.Applications == nil {
					if !in.IsDelim(']') {
						out.Applications = make(ApplicationTemplates, 0, 4)
					} else {
						out.Applications = ApplicationTemplates{}
					}
				} else {
					out.Applications = (out.Applications)[:0]
				}
				for !in.IsDelim(']') {
					var v3 ApplicationTemplate
					easyjson3f98ee73DecodeGithubComOvhCdsSdk4(in, &v3)
					out.Applications = append(out.Applications, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
				out.Environments = nil
			} else {
				in.Delim('[')
				if out.Environments == nil {
					if !in.IsDelim(']') {
						out.Environments = make(EnvironmentTemplates, 0, 4)
					} else {
						out.Environments = EnvironmentTemplates{}
					}
				} else {
					out.Environments = (out.Environments)[:0]
				}
				for !in.IsDelim(']') {
					var v4 EnvironmentTemplate
					easyjson3f98ee73DecodeGithubComOvhCdsSdk5(in, &v4)
					out.Environments = append(out.Environments, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = int64(in.Int64())
		case "import_url":
			out.ImportURL = string(in.String())
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(Group)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk6(in, out.Group)
			}
		case "first_audit":
			if in.IsNull() {
				in.Skip()
				out.FirstAudit = nil
			} else {
				if out.FirstAudit == nil {
					out.FirstAudit = new(AuditWorkflowTemplate)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk7(in, out.FirstAudit)
			}
		case "last_audit":
			if in.IsNull() {
				in.Skip()
				out.LastAudit = nil
			} else {
				if out.LastAudit == nil {
					out.LastAudit = new(AuditWorkflowTemplate)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk7(in, out.LastAudit)
			}
		case "editable":
			out.Editable = bool(in.Bool())
		case "change_message":
			out.ChangeMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk1(out *jwriter.Writer, in WorkflowTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.GroupID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"slug\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Slug))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Parameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Parameters {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk2(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Workflow))
	}
	{
		const prefix string = ",\"pipelines\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Pipelines == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Pipelines {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk3(out, v8)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"applications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Applications == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Applications {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk4(out, v10)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"environments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Environments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Environments {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk5(out, v12)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"import_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImportURL))
	}
	if in.Group != nil {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk6(out, *in.Group)
	}
	if in.FirstAudit != nil {
		const prefix string = ",\"first_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk7(out, *in.FirstAudit)
	}
	if in.LastAudit != nil {
		const prefix string = ",\"last_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk7(out, *in.LastAudit)
	}
	if in.Editable {
		const prefix string = ",\"editable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Editable))
	}
	if in.ChangeMessage != "" {
		const prefix string = ",\"change_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChangeMessage))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk7(in *jlexer.Lexer, out *AuditWorkflowTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow_template_id":
			out.WorkflowTemplateID = int64(in.Int64())
		case "change_message":
			out.ChangeMessage = string(in.String())
		case "data_before":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk1(in, &out.DataBefore)
		case "data_after":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk1(in, &out.DataAfter)
		case "id":
			out.ID = int64(in.Int64())
		case "triggered_by":
			out.TriggeredBy = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "event_type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk7(out *jwriter.Writer, in AuditWorkflowTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow_template_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowTemplateID))
	}
	if in.ChangeMessage != "" {
		const prefix string = ",\"change_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChangeMessage))
	}
	{
		const prefix string = ",\"data_before\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk1(out, in.DataBefore)
	}
	{
		const prefix string = ",\"data_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk1(out, in.DataAfter)
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"triggered_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggeredBy))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"event_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk6(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]User, 0, 1)
					} else {
						out.Admins = []User{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v13 User
					easyjson3f98ee73DecodeGithubComOvhCdsSdk8(in, &v13)
					out.Admins = append(out.Admins, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]User, 0, 1)
					} else {
						out.Users = []User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v14 User
					easyjson3f98ee73DecodeGithubComOvhCdsSdk8(in, &v14)
					out.Users = append(out.Users, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]Token, 0, 1)
					} else {
						out.Tokens = []Token{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v15 Token
					easyjson3f98ee73DecodeGithubComOvhCdsSdk9(in, &v15)
					out.Tokens = append(out.Tokens, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk6(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Admins) != 0 {
		const prefix string = ",\"admins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Admins {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk8(out, v17)
			}
			out.RawByte(']')
		}
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Users {
				if v18 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk8(out, v19)
			}
			out.RawByte(']')
		}
	}
	if len(in.Tokens) != 0 {
		const prefix string = ",\"tokens\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Tokens {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk9(out, v21)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk9(in *jlexer.Lexer, out *Token) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "group_id":
			out.GroupID = int64(in.Int64())
		case "group_name":
			out.GroupName = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "creator":
			out.Creator = string(in.String())
		case "expiration":
			out.Expiration = Expiration(in.Int())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk9(out *jwriter.Writer, in Token) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.GroupID))
	}
	{
		const prefix string = ",\"group_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GroupName))
	}
	{
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	{
		const prefix string = ",\"expiration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Expiration))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk8(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "username":
			out.Username = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "admin":
			out.Admin = bool(in.Bool())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]Group, 0, 1)
					} else {
						out.Groups = []Group{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Group
					easyjson3f98ee73DecodeGithubComOvhCdsSdk6(in, &v22)
					out.Groups = append(out.Groups, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "origin":
			out.Origin = string(in.String())
		case "favorites":
			if in.IsNull() {
				in.Skip()
				out.Favorites = nil
			} else {
				in.Delim('[')
				if out.Favorites == nil {
					if !in.IsDelim(']') {
						out.Favorites = make([]Favorite, 0, 1)
					} else {
						out.Favorites = []Favorite{}
					}
				} else {
					out.Favorites = (out.Favorites)[:0]
				}
				for !in.IsDelim(']') {
					var v23 Favorite
					easyjson3f98ee73DecodeGithubComOvhCdsSdk10(in, &v23)
					out.Favorites = append(out.Favorites, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Permissions).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk8(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Admin))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Groups {
				if v24 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk6(out, v25)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"favorites\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Favorites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Favorites {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk10(out, v27)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Permissions).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk10(in *jlexer.Lexer, out *Favorite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project_ids":
			if in.IsNull() {
				in.Skip()
				out.ProjectIDs = nil
			} else {
				in.Delim('[')
				if out.ProjectIDs == nil {
					if !in.IsDelim(']') {
						out.ProjectIDs = make([]int64, 0, 8)
					} else {
						out.ProjectIDs = []int64{}
					}
				} else {
					out.ProjectIDs = (out.ProjectIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v28 int64
					v28 = int64(in.Int64())
					out.ProjectIDs = append(out.ProjectIDs, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workflow_ids":
			if in.IsNull() {
				in.Skip()
				out.WorkflowIDs = nil
			} else {
				in.Delim('[')
				if out.WorkflowIDs == nil {
					if !in.IsDelim(']') {
						out.WorkflowIDs = make([]int64, 0, 8)
					} else {
						out.WorkflowIDs = []int64{}
					}
				} else {
					out.WorkflowIDs = (out.WorkflowIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v29 int64
					v29 = int64(in.Int64())
					out.WorkflowIDs = append(out.WorkflowIDs, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk10(out *jwriter.Writer, in Favorite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProjectIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.ProjectIDs {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"workflow_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.WorkflowIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.WorkflowIDs {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v33))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk5(in *jlexer.Lexer, out *EnvironmentTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk5(out *jwriter.Writer, in EnvironmentTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk4(in *jlexer.Lexer, out *ApplicationTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk4(out *jwriter.Writer, in ApplicationTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk3(in *jlexer.Lexer, out *PipelineTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk3(out *jwriter.Writer, in PipelineTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk2(in *jlexer.Lexer, out *WorkflowTemplateParameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "type":
			out.Type = TemplateParameterType(in.String())
		case "required":
			out.Required = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk2(out *jwriter.Writer, in WorkflowTemplateParameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"required\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Required))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk11(in *jlexer.Lexer, out *EventWorkflowTemplateInstanceUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_workflow_template_instance":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk12(in, &out.OldWorkflowTemplateInstance)
		case "new_workflow_template_instance":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk12(in, &out.NewWorkflowTemplateInstance)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk11(out *jwriter.Writer, in EventWorkflowTemplateInstanceUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_workflow_template_instance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk12(out, in.OldWorkflowTemplateInstance)
	}
	{
		const prefix string = ",\"new_workflow_template_instance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk12(out, in.NewWorkflowTemplateInstance)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowTemplateInstanceUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98ee73EncodeGithubComOvhCdsSdk11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowTemplateInstanceUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98ee73EncodeGithubComOvhCdsSdk11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowTemplateInstanceUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98ee73DecodeGithubComOvhCdsSdk11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowTemplateInstanceUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98ee73DecodeGithubComOvhCdsSdk11(l, v)
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk12(in *jlexer.Lexer, out *WorkflowTemplateInstance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_template_id":
			out.WorkflowTemplateID = int64(in.Int64())
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "workflow_id":
			if in.IsNull() {
				in.Skip()
				out.WorkflowID = nil
			} else {
				if out.WorkflowID == nil {
					out.WorkflowID = new(int64)
				}
				*out.WorkflowID = int64(in.Int64())
			}
		case "workflow_template_version":
			out.WorkflowTemplateVersion = int64(in.Int64())
		case "request":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk13(in, &out.Request)
		case "workflow_name":
			out.WorkflowName = string(in.String())
		case "first_audit":
			if in.IsNull() {
				in.Skip()
				out.FirstAudit = nil
			} else {
				if out.FirstAudit == nil {
					out.FirstAudit = new(AuditWorkflowTemplateInstance)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk14(in, out.FirstAudit)
			}
		case "last_audit":
			if in.IsNull() {
				in.Skip()
				out.LastAudit = nil
			} else {
				if out.LastAudit == nil {
					out.LastAudit = new(AuditWorkflowTemplateInstance)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk14(in, out.LastAudit)
			}
		case "template":
			if in.IsNull() {
				in.Skip()
				out.Template = nil
			} else {
				if out.Template == nil {
					out.Template = new(WorkflowTemplate)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk1(in, out.Template)
			}
		case "project":
			if in.IsNull() {
				in.Skip()
				out.Project = nil
			} else {
				if out.Project == nil {
					out.Project = new(Project)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk15(in, out.Project)
			}
		case "workflow":
			if in.IsNull() {
				in.Skip()
				out.Workflow = nil
			} else {
				if out.Workflow == nil {
					out.Workflow = new(Workflow)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk16(in, out.Workflow)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk12(out *jwriter.Writer, in WorkflowTemplateInstance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"workflow_template_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowTemplateID))
	}
	{
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.WorkflowID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.WorkflowID))
		}
	}
	{
		const prefix string = ",\"workflow_template_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowTemplateVersion))
	}
	{
		const prefix string = ",\"request\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk13(out, in.Request)
	}
	{
		const prefix string = ",\"workflow_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkflowName))
	}
	if in.FirstAudit != nil {
		const prefix string = ",\"first_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk14(out, *in.FirstAudit)
	}
	if in.LastAudit != nil {
		const prefix string = ",\"last_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk14(out, *in.LastAudit)
	}
	if in.Template != nil {
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk1(out, *in.Template)
	}
	if in.Project != nil {
		const prefix string = ",\"project\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk15(out, *in.Project)
	}
	if in.Workflow != nil {
		const prefix string = ",\"workflow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk16(out, *in.Workflow)
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk16(in *jlexer.Lexer, out *Workflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "last_modified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "project_key":
			out.ProjectKey = string(in.String())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupPermission, 0, 1)
					} else {
						out.Groups = []GroupPermission{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v34 GroupPermission
					easyjson3f98ee73DecodeGithubComOvhCdsSdk17(in, &v34)
					out.Groups = append(out.Groups, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permission":
			out.Permission = int(in.Int())
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(Metadata)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 string
					v35 = string(in.String())
					(out.Metadata)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk18(in, out.Usage)
			}
		case "history_length":
			out.HistoryLength = int64(in.Int64())
		case "purge_tags":
			if in.IsNull() {
				in.Skip()
				out.PurgeTags = nil
			} else {
				in.Delim('[')
				if out.PurgeTags == nil {
					if !in.IsDelim(']') {
						out.PurgeTags = make([]string, 0, 4)
					} else {
						out.PurgeTags = []string{}
					}
				} else {
					out.PurgeTags = (out.PurgeTags)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.PurgeTags = append(out.PurgeTags, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				in.Delim('[')
				if out.Notifications == nil {
					if !in.IsDelim(']') {
						out.Notifications = make([]WorkflowNotification, 0, 1)
					} else {
						out.Notifications = []WorkflowNotification{}
					}
				} else {
					out.Notifications = (out.Notifications)[:0]
				}
				for !in.IsDelim(']') {
					var v37 WorkflowNotification
					easyjson3f98ee73DecodeGithubComOvhCdsSdk19(in, &v37)
					out.Notifications = append(out.Notifications, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		case "derived_from_workflow_id":
			out.DerivedFromWorkflowID = int64(in.Int64())
		case "derived_from_workflow_name":
			out.DerivedFromWorkflowName = string(in.String())
		case "derivation_branch":
			out.DerivationBranch = string(in.String())
		case "audits":
			if in.IsNull() {
				in.Skip()
				out.Audits = nil
			} else {
				in.Delim('[')
				if out.Audits == nil {
					if !in.IsDelim(']') {
						out.Audits = make([]AuditWorkflow, 0, 1)
					} else {
						out.Audits = []AuditWorkflow{}
					}
				} else {
					out.Audits = (out.Audits)[:0]
				}
				for !in.IsDelim(']') {
					var v38 AuditWorkflow
					easyjson3f98ee73DecodeGithubComOvhCdsSdk20(in, &v38)
					out.Audits = append(out.Audits, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pipelines":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Pipelines = make(map[int64]Pipeline)
				} else {
					out.Pipelines = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v39 Pipeline
					easyjson3f98ee73DecodeGithubComOvhCdsSdk21(in, &v39)
					(out.Pipelines)[key] = v39
					in.WantComma()
				}
				in.Delim('}')
			}
		case "applications":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Applications = make(map[int64]Application)
				} else {
					out.Applications = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v40 Application
					easyjson3f98ee73DecodeGithubComOvhCdsSdk22(in, &v40)
					(out.Applications)[key] = v40
					in.WantComma()
				}
				in.Delim('}')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Environments = make(map[int64]Environment)
				} else {
					out.Environments = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v41 Environment
					easyjson3f98ee73DecodeGithubComOvhCdsSdk23(in, &v41)
					(out.Environments)[key] = v41
					in.WantComma()
				}
				in.Delim('}')
			}
		case "project_integrations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProjectIntegrations = make(map[int64]ProjectIntegration)
				} else {
					out.ProjectIntegrations = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v42 ProjectIntegration
					easyjson3f98ee73DecodeGithubComOvhCdsSdk24(in, &v42)
					(out.ProjectIntegrations)[key] = v42
					in.WantComma()
				}
				in.Delim('}')
			}
		case "hook_models":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HookModels = make(map[int64]WorkflowHookModel)
				} else {
					out.HookModels = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v43 WorkflowHookModel
					easyjson3f98ee73DecodeGithubComOvhCdsSdk25(in, &v43)
					(out.HookModels)[key] = v43
					in.WantComma()
				}
				in.Delim('}')
			}
		case "outgoing_hook_models":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OutGoingHookModels = make(map[int64]WorkflowHookModel)
				} else {
					out.OutGoingHookModels = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v44 WorkflowHookModel
					easyjson3f98ee73DecodeGithubComOvhCdsSdk25(in, &v44)
					(out.OutGoingHookModels)[key] = v44
					in.WantComma()
				}
				in.Delim('}')
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]Label, 0, 1)
					} else {
						out.Labels = []Label{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v45 Label
					easyjson3f98ee73DecodeGithubComOvhCdsSdk26(in, &v45)
					out.Labels = append(out.Labels, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "to_delete":
			out.ToDelete = bool(in.Bool())
		case "favorite":
			out.Favorite = bool(in.Bool())
		case "workflow_data":
			if in.IsNull() {
				in.Skip()
				out.WorkflowData = nil
			} else {
				if out.WorkflowData == nil {
					out.WorkflowData = new(WorkflowData)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk27(in, out.WorkflowData)
			}
		case "event_integrations":
			if in.IsNull() {
				in.Skip()
				out.EventIntegrations = nil
			} else {
				in.Delim('[')
				if out.EventIntegrations == nil {
					if !in.IsDelim(']') {
						out.EventIntegrations = make([]ProjectIntegration, 0, 1)
					} else {
						out.EventIntegrations = []ProjectIntegration{}
					}
				} else {
					out.EventIntegrations = (out.EventIntegrations)[:0]
				}
				for !in.IsDelim(']') {
					var v46 ProjectIntegration
					easyjson3f98ee73DecodeGithubComOvhCdsSdk24(in, &v46)
					out.EventIntegrations = append(out.EventIntegrations, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "as_code_events":
			if in.IsNull() {
				in.Skip()
				out.AsCodeEvent = nil
			} else {
				in.Delim('[')
				if out.AsCodeEvent == nil {
					if !in.IsDelim(']') {
						out.AsCodeEvent = make([]AsCodeEvent, 0, 1)
					} else {
						out.AsCodeEvent = []AsCodeEvent{}
					}
				} else {
					out.AsCodeEvent = (out.AsCodeEvent)[:0]
				}
				for !in.IsDelim(']') {
					var v47 AsCodeEvent
					easyjson3f98ee73DecodeGithubComOvhCdsSdk28(in, &v47)
					out.AsCodeEvent = append(out.AsCodeEvent, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_template":
			out.FromTemplate = string(in.String())
		case "template_up_to_date":
			out.TemplateUpToDate = bool(in.Bool())
		case "urls":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk29(in, &out.URLs)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk16(out *jwriter.Writer, in Workflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastModified).MarshalJSON())
	}
	if in.ProjectID != 0 {
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v48, v49 := range in.Groups {
				if v48 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk17(out, v49)
			}
			out.RawByte(']')
		}
	}
	if in.Permission != 0 {
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	{
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v50First := true
			for v50Name, v50Value := range in.Metadata {
				if v50First {
					v50First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v50Name))
				out.RawByte(':')
				out.String(string(v50Value))
			}
			out.RawByte('}')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk18(out, *in.Usage)
	}
	{
		const prefix string = ",\"history_length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HistoryLength))
	}
	if len(in.PurgeTags) != 0 {
		const prefix string = ",\"purge_tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v51, v52 := range in.PurgeTags {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.String(string(v52))
			}
			out.RawByte(']')
		}
	}
	if len(in.Notifications) != 0 {
		const prefix string = ",\"notifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.Notifications {
				if v53 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk19(out, v54)
			}
			out.RawByte(']')
		}
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromRepository))
	}
	if in.DerivedFromWorkflowID != 0 {
		const prefix string = ",\"derived_from_workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DerivedFromWorkflowID))
	}
	if in.DerivedFromWorkflowName != "" {
		const prefix string = ",\"derived_from_workflow_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DerivedFromWorkflowName))
	}
	if in.DerivationBranch != "" {
		const prefix string = ",\"derivation_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DerivationBranch))
	}
	{
		const prefix string = ",\"audits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Audits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Audits {
				if v55 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk20(out, v56)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pipelines\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Pipelines == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v57First := true
			for v57Name, v57Value := range in.Pipelines {
				if v57First {
					v57First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v57Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk21(out, v57Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"applications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Applications == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v58First := true
			for v58Name, v58Value := range in.Applications {
				if v58First {
					v58First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v58Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk22(out, v58Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"environments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Environments == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v59First := true
			for v59Name, v59Value := range in.Environments {
				if v59First {
					v59First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v59Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk23(out, v59Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"project_integrations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProjectIntegrations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v60First := true
			for v60Name, v60Value := range in.ProjectIntegrations {
				if v60First {
					v60First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v60Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk24(out, v60Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"hook_models\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.HookModels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v61First := true
			for v61Name, v61Value := range in.HookModels {
				if v61First {
					v61First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v61Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk25(out, v61Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"outgoing_hook_models\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.OutGoingHookModels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v62First := true
			for v62Name, v62Value := range in.OutGoingHookModels {
				if v62First {
					v62First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v62Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk25(out, v62Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v63, v64 := range in.Labels {
				if v63 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk26(out, v64)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"to_delete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ToDelete))
	}
	{
		const prefix string = ",\"favorite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Favorite))
	}
	{
		const prefix string = ",\"workflow_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.WorkflowData == nil {
			out.RawString("null")
		} else {
			easyjson3f98ee73EncodeGithubComOvhCdsSdk27(out, *in.WorkflowData)
		}
	}
	{
		const prefix string = ",\"event_integrations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.EventIntegrations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.EventIntegrations {
				if v65 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk24(out, v66)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"as_code_events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AsCodeEvent == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v67, v68 := range in.AsCodeEvent {
				if v67 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk28(out, v68)
			}
			out.RawByte(']')
		}
	}
	if in.FromTemplate != "" {
		const prefix string = ",\"from_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromTemplate))
	}
	if in.TemplateUpToDate {
		const prefix string = ",\"template_up_to_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TemplateUpToDate))
	}
	{
		const prefix string = ",\"urls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk29(out, in.URLs)
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk29(in *jlexer.Lexer, out *URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_url":
			out.APIURL = string(in.String())
		case "ui_url":
			out.UIURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk29(out *jwriter.Writer, in URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"api_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.APIURL))
	}
	{
		const prefix string = ",\"ui_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UIURL))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk28(in *jlexer.Lexer, out *AsCodeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "pullrequest_id":
			out.PullRequestID = int64(in.Int64())
		case "pullrequest_url":
			out.PullRequestURL = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "creation_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk28(out *jwriter.Writer, in AsCodeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"pullrequest_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PullRequestID))
	}
	{
		const prefix string = ",\"pullrequest_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PullRequestURL))
	}
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"creation_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreationDate).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk27(in *jlexer.Lexer, out *WorkflowData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk30(in, &out.Node)
		case "joins":
			if in.IsNull() {
				in.Skip()
				out.Joins = nil
			} else {
				in.Delim('[')
				if out.Joins == nil {
					if !in.IsDelim(']') {
						out.Joins = make([]Node, 0, 1)
					} else {
						out.Joins = []Node{}
					}
				} else {
					out.Joins = (out.Joins)[:0]
				}
				for !in.IsDelim(']') {
					var v69 Node
					easyjson3f98ee73DecodeGithubComOvhCdsSdk30(in, &v69)
					out.Joins = append(out.Joins, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk27(out *jwriter.Writer, in WorkflowData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk30(out, in.Node)
	}
	{
		const prefix string = ",\"joins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Joins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v70, v71 := range in.Joins {
				if v70 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk30(out, v71)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk30(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "triggers":
			if in.IsNull() {
				in.Skip()
				out.Triggers = nil
			} else {
				in.Delim('[')
				if out.Triggers == nil {
					if !in.IsDelim(']') {
						out.Triggers = make([]NodeTrigger, 0, 1)
					} else {
						out.Triggers = []NodeTrigger{}
					}
				} else {
					out.Triggers = (out.Triggers)[:0]
				}
				for !in.IsDelim(']') {
					var v72 NodeTrigger
					easyjson3f98ee73DecodeGithubComOvhCdsSdk31(in, &v72)
					out.Triggers = append(out.Triggers, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "context":
			if in.IsNull() {
				in.Skip()
				out.Context = nil
			} else {
				if out.Context == nil {
					out.Context = new(NodeContext)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk32(in, out.Context)
			}
		case "outgoing_hook":
			if in.IsNull() {
				in.Skip()
				out.OutGoingHookContext = nil
			} else {
				if out.OutGoingHookContext == nil {
					out.OutGoingHookContext = new(NodeOutGoingHook)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk33(in, out.OutGoingHookContext)
			}
		case "parents":
			if in.IsNull() {
				in.Skip()
				out.JoinContext = nil
			} else {
				in.Delim('[')
				if out.JoinContext == nil {
					if !in.IsDelim(']') {
						out.JoinContext = make([]NodeJoin, 0, 1)
					} else {
						out.JoinContext = []NodeJoin{}
					}
				} else {
					out.JoinContext = (out.JoinContext)[:0]
				}
				for !in.IsDelim(']') {
					var v73 NodeJoin
					easyjson3f98ee73DecodeGithubComOvhCdsSdk34(in, &v73)
					out.JoinContext = append(out.JoinContext, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hooks":
			if in.IsNull() {
				in.Skip()
				out.Hooks = nil
			} else {
				in.Delim('[')
				if out.Hooks == nil {
					if !in.IsDelim(']') {
						out.Hooks = make([]NodeHook, 0, 1)
					} else {
						out.Hooks = []NodeHook{}
					}
				} else {
					out.Hooks = (out.Hooks)[:0]
				}
				for !in.IsDelim(']') {
					var v74 NodeHook
					easyjson3f98ee73DecodeGithubComOvhCdsSdk35(in, &v74)
					out.Hooks = append(out.Hooks, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupPermission, 0, 1)
					} else {
						out.Groups = []GroupPermission{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v75 GroupPermission
					easyjson3f98ee73DecodeGithubComOvhCdsSdk17(in, &v75)
					out.Groups = append(out.Groups, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk30(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ref))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"triggers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Triggers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v76, v77 := range in.Triggers {
				if v76 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk31(out, v77)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Context == nil {
			out.RawString("null")
		} else {
			easyjson3f98ee73EncodeGithubComOvhCdsSdk32(out, *in.Context)
		}
	}
	{
		const prefix string = ",\"outgoing_hook\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.OutGoingHookContext == nil {
			out.RawString("null")
		} else {
			easyjson3f98ee73EncodeGithubComOvhCdsSdk33(out, *in.OutGoingHookContext)
		}
	}
	{
		const prefix string = ",\"parents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.JoinContext == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.JoinContext {
				if v78 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk34(out, v79)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"hooks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Hooks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.Hooks {
				if v80 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk35(out, v81)
			}
			out.RawByte(']')
		}
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v82, v83 := range in.Groups {
				if v82 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk17(out, v83)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk35(in *jlexer.Lexer, out *NodeHook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "uuid":
			out.UUID = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "hook_model_id":
			out.HookModelID = int64(in.Int64())
		case "hook_model_name":
			out.HookModelName = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(WorkflowNodeHookConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v84 WorkflowNodeHookConfigValue
					easyjson3f98ee73DecodeGithubComOvhCdsSdk36(in, &v84)
					(out.Config)[key] = v84
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk35(out *jwriter.Writer, in NodeHook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ref))
	}
	{
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeID))
	}
	{
		const prefix string = ",\"hook_model_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HookModelID))
	}
	{
		const prefix string = ",\"hook_model_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HookModelName))
	}
	{
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v85First := true
			for v85Name, v85Value := range in.Config {
				if v85First {
					v85First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v85Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk36(out, v85Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk36(in *jlexer.Lexer, out *WorkflowNodeHookConfigValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "configurable":
			out.Configurable = bool(in.Bool())
		case "type":
			out.Type = string(in.String())
		case "multiple_choice_list":
			if in.IsNull() {
				in.Skip()
				out.MultipleChoiceList = nil
			} else {
				in.Delim('[')
				if out.MultipleChoiceList == nil {
					if !in.IsDelim(']') {
						out.MultipleChoiceList = make([]string, 0, 4)
					} else {
						out.MultipleChoiceList = []string{}
					}
				} else {
					out.MultipleChoiceList = (out.MultipleChoiceList)[:0]
				}
				for !in.IsDelim(']') {
					var v86 string
					v86 = string(in.String())
					out.MultipleChoiceList = append(out.MultipleChoiceList, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk36(out *jwriter.Writer, in WorkflowNodeHookConfigValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"configurable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Configurable))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"multiple_choice_list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MultipleChoiceList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v87, v88 := range in.MultipleChoiceList {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.String(string(v88))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk34(in *jlexer.Lexer, out *NodeJoin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "parent_name":
			out.ParentName = string(in.String())
		case "parent_id":
			out.ParentID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk34(out *jwriter.Writer, in NodeJoin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeID))
	}
	if in.ParentName != "" {
		const prefix string = ",\"parent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParentName))
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ParentID))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk33(in *jlexer.Lexer, out *NodeOutGoingHook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "hook_model_id":
			out.HookModelID = int64(in.Int64())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(WorkflowNodeHookConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v89 WorkflowNodeHookConfigValue
					easyjson3f98ee73DecodeGithubComOvhCdsSdk36(in, &v89)
					(out.Config)[key] = v89
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk33(out *jwriter.Writer, in NodeOutGoingHook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeID))
	}
	{
		const prefix string = ",\"hook_model_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HookModelID))
	}
	{
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v90First := true
			for v90Name, v90Value := range in.Config {
				if v90First {
					v90First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v90Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk36(out, v90Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk32(in *jlexer.Lexer, out *NodeContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "pipeline_id":
			out.PipelineID = int64(in.Int64())
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		case "environment_id":
			out.EnvironmentID = int64(in.Int64())
		case "project_integration_id":
			out.ProjectIntegrationID = int64(in.Int64())
		case "default_payload":
			if m, ok := out.DefaultPayload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DefaultPayload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DefaultPayload = in.Interface()
			}
		case "default_pipeline_parameters":
			if in.IsNull() {
				in.Skip()
				out.DefaultPipelineParameters = nil
			} else {
				in.Delim('[')
				if out.DefaultPipelineParameters == nil {
					if !in.IsDelim(']') {
						out.DefaultPipelineParameters = make([]Parameter, 0, 1)
					} else {
						out.DefaultPipelineParameters = []Parameter{}
					}
				} else {
					out.DefaultPipelineParameters = (out.DefaultPipelineParameters)[:0]
				}
				for !in.IsDelim(']') {
					var v91 Parameter
					easyjson3f98ee73DecodeGithubComOvhCdsSdk37(in, &v91)
					out.DefaultPipelineParameters = append(out.DefaultPipelineParameters, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conditions":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk38(in, &out.Conditions)
		case "mutex":
			out.Mutex = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk32(out *jwriter.Writer, in NodeContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeID))
	}
	{
		const prefix string = ",\"pipeline_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineID))
	}
	{
		const prefix string = ",\"application_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"environment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EnvironmentID))
	}
	{
		const prefix string = ",\"project_integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectIntegrationID))
	}
	if in.DefaultPayload != nil {
		const prefix string = ",\"default_payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.DefaultPayload.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DefaultPayload.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DefaultPayload))
		}
	}
	{
		const prefix string = ",\"default_pipeline_parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DefaultPipelineParameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.DefaultPipelineParameters {
				if v92 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk37(out, v93)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk38(out, in.Conditions)
	}
	{
		const prefix string = ",\"mutex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mutex))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk38(in *jlexer.Lexer, out *WorkflowNodeConditions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "plain":
			if in.IsNull() {
				in.Skip()
				out.PlainConditions = nil
			} else {
				in.Delim('[')
				if out.PlainConditions == nil {
					if !in.IsDelim(']') {
						out.PlainConditions = make([]WorkflowNodeCondition, 0, 1)
					} else {
						out.PlainConditions = []WorkflowNodeCondition{}
					}
				} else {
					out.PlainConditions = (out.PlainConditions)[:0]
				}
				for !in.IsDelim(']') {
					var v94 WorkflowNodeCondition
					easyjson3f98ee73DecodeGithubComOvhCdsSdk39(in, &v94)
					out.PlainConditions = append(out.PlainConditions, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lua_script":
			out.LuaScript = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk38(out *jwriter.Writer, in WorkflowNodeConditions) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PlainConditions) != 0 {
		const prefix string = ",\"plain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v95, v96 := range in.PlainConditions {
				if v95 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk39(out, v96)
			}
			out.RawByte(']')
		}
	}
	if in.LuaScript != "" {
		const prefix string = ",\"lua_script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LuaScript))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk39(in *jlexer.Lexer, out *WorkflowNodeCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variable":
			out.Variable = string(in.String())
		case "operator":
			out.Operator = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk39(out *jwriter.Writer, in WorkflowNodeCondition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Variable))
	}
	{
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operator))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk37(in *jlexer.Lexer, out *Parameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "advanced":
			out.Advanced = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk37(out *jwriter.Writer, in Parameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Advanced {
		const prefix string = ",\"advanced\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Advanced))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk31(in *jlexer.Lexer, out *NodeTrigger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "parent_node_id":
			out.ParentNodeID = int64(in.Int64())
		case "child_node_id":
			out.ChildNodeID = int64(in.Int64())
		case "parent_node_name":
			out.ParentNodeName = string(in.String())
		case "child_node":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk30(in, &out.ChildNode)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk31(out *jwriter.Writer, in NodeTrigger) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"parent_node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ParentNodeID))
	}
	{
		const prefix string = ",\"child_node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ChildNodeID))
	}
	{
		const prefix string = ",\"parent_node_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParentNodeName))
	}
	{
		const prefix string = ",\"child_node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk30(out, in.ChildNode)
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk26(in *jlexer.Lexer, out *Label) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk26(out *jwriter.Writer, in Label) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	if in.WorkflowID != 0 {
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk25(in *jlexer.Lexer, out *WorkflowHookModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "command":
			out.Command = string(in.String())
		case "default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DefaultConfig = make(WorkflowNodeHookConfig)
				} else {
					out.DefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v97 WorkflowNodeHookConfigValue
					easyjson3f98ee73DecodeGithubComOvhCdsSdk36(in, &v97)
					(out.DefaultConfig)[key] = v97
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk25(out *jwriter.Writer, in WorkflowHookModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"identifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"command\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Command))
	}
	{
		const prefix string = ",\"default_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v98First := true
			for v98Name, v98Value := range in.DefaultConfig {
				if v98First {
					v98First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v98Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk36(out, v98Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk24(in *jlexer.Lexer, out *ProjectIntegration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "integration_model_id":
			out.IntegrationModelID = int64(in.Int64())
		case "model":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk40(in, &out.Model)
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(IntegrationConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v99 IntegrationConfigValue
					easyjson3f98ee73DecodeGithubComOvhCdsSdk41(in, &v99)
					(out.Config)[key] = v99
					in.WantComma()
				}
				in.Delim('}')
			}
		case "integration_plugins":
			if in.IsNull() {
				in.Skip()
				out.GRPCPlugins = nil
			} else {
				in.Delim('[')
				if out.GRPCPlugins == nil {
					if !in.IsDelim(']') {
						out.GRPCPlugins = make([]GRPCPlugin, 0, 1)
					} else {
						out.GRPCPlugins = []GRPCPlugin{}
					}
				} else {
					out.GRPCPlugins = (out.GRPCPlugins)[:0]
				}
				for !in.IsDelim(']') {
					var v100 GRPCPlugin
					easyjson3f98ee73DecodeGithubComOvhCdsSdk42(in, &v100)
					out.GRPCPlugins = append(out.GRPCPlugins, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk24(out *jwriter.Writer, in ProjectIntegration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"integration_model_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IntegrationModelID))
	}
	{
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk40(out, in.Model)
	}
	{
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v101First := true
			for v101Name, v101Value := range in.Config {
				if v101First {
					v101First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v101Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk41(out, v101Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.GRPCPlugins) != 0 {
		const prefix string = ",\"integration_plugins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v102, v103 := range in.GRPCPlugins {
				if v102 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk42(out, v103)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk42(in *jlexer.Lexer, out *GRPCPlugin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v104 Parameter
					easyjson3f98ee73DecodeGithubComOvhCdsSdk37(in, &v104)
					out.Parameters = append(out.Parameters, v104)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "binaries":
			if in.IsNull() {
				in.Skip()
				out.Binaries = nil
			} else {
				in.Delim('[')
				if out.Binaries == nil {
					if !in.IsDelim(']') {
						out.Binaries = make([]GRPCPluginBinary, 0, 1)
					} else {
						out.Binaries = []GRPCPluginBinary{}
					}
				} else {
					out.Binaries = (out.Binaries)[:0]
				}
				for !in.IsDelim(']') {
					var v105 GRPCPluginBinary
					easyjson3f98ee73DecodeGithubComOvhCdsSdk43(in, &v105)
					out.Binaries = append(out.Binaries, v105)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "integration":
			out.Integration = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk42(out *jwriter.Writer, in GRPCPlugin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v106, v107 := range in.Parameters {
				if v106 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk37(out, v107)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"binaries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Binaries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v108, v109 := range in.Binaries {
				if v108 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk43(out, v109)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Integration))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk43(in *jlexer.Lexer, out *GRPCPluginBinary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "os":
			out.OS = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "object_path":
			out.ObjectPath = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "perm":
			out.Perm = uint32(in.Uint32())
		case "md5sum":
			out.MD5sum = string(in.String())
		case "sha512sum":
			out.SHA512sum = string(in.String())
		case "temp_url":
			out.TempURL = string(in.String())
		case "entrypoints":
			if in.IsNull() {
				in.Skip()
				out.Entrypoints = nil
			} else {
				in.Delim('[')
				if out.Entrypoints == nil {
					if !in.IsDelim(']') {
						out.Entrypoints = make([]string, 0, 4)
					} else {
						out.Entrypoints = []string{}
					}
				} else {
					out.Entrypoints = (out.Entrypoints)[:0]
				}
				for !in.IsDelim(']') {
					var v110 string
					v110 = string(in.String())
					out.Entrypoints = append(out.Entrypoints, v110)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cmd":
			out.Cmd = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v111 string
					v111 = string(in.String())
					out.Args = append(out.Args, v111)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make(RequirementList, 0, 1)
					} else {
						out.Requirements = RequirementList{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v112 Requirement
					if data := in.Raw(); in.Ok() {
						in.AddError((v112).UnmarshalJSON(data))
					}
					out.Requirements = append(out.Requirements, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "file_content":
			if in.IsNull() {
				in.Skip()
				out.FileContent = nil
			} else {
				out.FileContent = in.Bytes()
			}
		case "plugin_name":
			out.PluginName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk43(out *jwriter.Writer, in GRPCPluginBinary) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OS != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OS))
	}
	if in.Arch != "" {
		const prefix string = ",\"arch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Arch))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.ObjectPath != "" {
		const prefix string = ",\"object_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ObjectPath))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Perm != 0 {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Perm))
	}
	if in.MD5sum != "" {
		const prefix string = ",\"md5sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5sum))
	}
	if in.SHA512sum != "" {
		const prefix string = ",\"sha512sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA512sum))
	}
	if in.TempURL != "" {
		const prefix string = ",\"temp_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TempURL))
	}
	if len(in.Entrypoints) != 0 {
		const prefix string = ",\"entrypoints\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v114, v115 := range in.Entrypoints {
				if v114 > 0 {
					out.RawByte(',')
				}
				out.String(string(v115))
			}
			out.RawByte(']')
		}
	}
	if in.Cmd != "" {
		const prefix string = ",\"cmd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cmd))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v116, v117 := range in.Args {
				if v116 > 0 {
					out.RawByte(',')
				}
				out.String(string(v117))
			}
			out.RawByte(']')
		}
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v118, v119 := range in.Requirements {
				if v118 > 0 {
					out.RawByte(',')
				}
				out.Raw((v119).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.FileContent) != 0 {
		const prefix string = ",\"file_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.FileContent)
	}
	if in.PluginName != "" {
		const prefix string = ",\"plugin_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PluginName))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk41(in *jlexer.Lexer, out *IntegrationConfigValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk41(out *jwriter.Writer, in IntegrationConfigValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk40(in *jlexer.Lexer, out *IntegrationModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DefaultConfig = make(IntegrationConfig)
				} else {
					out.DefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v122 IntegrationConfigValue
					easyjson3f98ee73DecodeGithubComOvhCdsSdk41(in, &v122)
					(out.DefaultConfig)[key] = v122
					in.WantComma()
				}
				in.Delim('}')
			}
		case "deployment_default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DeploymentDefaultConfig = make(IntegrationConfig)
				} else {
					out.DeploymentDefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v123 IntegrationConfigValue
					easyjson3f98ee73DecodeGithubComOvhCdsSdk41(in, &v123)
					(out.DeploymentDefaultConfig)[key] = v123
					in.WantComma()
				}
				in.Delim('}')
			}
		case "public_configurations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PublicConfigurations = make(map[string]IntegrationConfig)
				} else {
					out.PublicConfigurations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v124 IntegrationConfig
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v124 = make(IntegrationConfig)
						} else {
							v124 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v125 IntegrationConfigValue
							easyjson3f98ee73DecodeGithubComOvhCdsSdk41(in, &v125)
							(v124)[key] = v125
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.PublicConfigurations)[key] = v124
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "hook":
			out.Hook = bool(in.Bool())
		case "storage":
			out.Storage = bool(in.Bool())
		case "deployment":
			out.Deployment = bool(in.Bool())
		case "compute":
			out.Compute = bool(in.Bool())
		case "event":
			out.Event = bool(in.Bool())
		case "public":
			out.Public = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk40(out *jwriter.Writer, in IntegrationModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"identifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"default_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v126First := true
			for v126Name, v126Value := range in.DefaultConfig {
				if v126First {
					v126First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v126Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk41(out, v126Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"deployment_default_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DeploymentDefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v127First := true
			for v127Name, v127Value := range in.DeploymentDefaultConfig {
				if v127First {
					v127First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v127Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk41(out, v127Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.PublicConfigurations) != 0 {
		const prefix string = ",\"public_configurations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v128First := true
			for v128Name, v128Value := range in.PublicConfigurations {
				if v128First {
					v128First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v128Name))
				out.RawByte(':')
				if v128Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v129First := true
					for v129Name, v129Value := range v128Value {
						if v129First {
							v129First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v129Name))
						out.RawByte(':')
						easyjson3f98ee73EncodeGithubComOvhCdsSdk41(out, v129Value)
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	{
		const prefix string = ",\"hook\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Hook))
	}
	{
		const prefix string = ",\"storage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Storage))
	}
	{
		const prefix string = ",\"deployment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deployment))
	}
	{
		const prefix string = ",\"compute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Compute))
	}
	{
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Event))
	}
	if in.Public {
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Public))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk23(in *jlexer.Lexer, out *Environment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Variable = nil
			} else {
				in.Delim('[')
				if out.Variable == nil {
					if !in.IsDelim(']') {
						out.Variable = make([]Variable, 0, 1)
					} else {
						out.Variable = []Variable{}
					}
				} else {
					out.Variable = (out.Variable)[:0]
				}
				for !in.IsDelim(']') {
					var v130 Variable
					easyjson3f98ee73DecodeGithubComOvhCdsSdk44(in, &v130)
					out.Variable = append(out.Variable, v130)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "project_key":
			out.ProjectKey = string(in.String())
		case "permission":
			out.Permission = int(in.Int())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]EnvironmentKey, 0, 1)
					} else {
						out.Keys = []EnvironmentKey{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v131 EnvironmentKey
					easyjson3f98ee73DecodeGithubComOvhCdsSdk45(in, &v131)
					out.Keys = append(out.Keys, v131)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk18(in, out.Usage)
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk23(out *jwriter.Writer, in Environment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Variable) != 0 {
		const prefix string = ",\"variables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v132, v133 := range in.Variable {
				if v132 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk44(out, v133)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"keys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Keys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v134, v135 := range in.Keys {
				if v134 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk45(out, v135)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk18(out, *in.Usage)
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk45(in *jlexer.Lexer, out *EnvironmentKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "environment_id":
			out.EnvironmentID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "public":
			out.Public = string(in.String())
		case "private":
			out.Private = string(in.String())
		case "keyID":
			out.KeyID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk45(out *jwriter.Writer, in EnvironmentKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"environment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EnvironmentID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Public))
	}
	{
		const prefix string = ",\"private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Private))
	}
	{
		const prefix string = ",\"keyID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk44(in *jlexer.Lexer, out *Variable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk44(out *jwriter.Writer, in Variable) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk22(in *jlexer.Lexer, out *Application) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "project_key":
			out.ProjectKey = string(in.String())
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Variable = nil
			} else {
				in.Delim('[')
				if out.Variable == nil {
					if !in.IsDelim(']') {
						out.Variable = make([]Variable, 0, 1)
					} else {
						out.Variable = []Variable{}
					}
				} else {
					out.Variable = (out.Variable)[:0]
				}
				for !in.IsDelim(']') {
					var v136 Variable
					easyjson3f98ee73DecodeGithubComOvhCdsSdk44(in, &v136)
					out.Variable = append(out.Variable, v136)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permission":
			out.Permission = int(in.Int())
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				in.Delim('[')
				if out.Notifications == nil {
					if !in.IsDelim(']') {
						out.Notifications = make([]UserNotification, 0, 1)
					} else {
						out.Notifications = []UserNotification{}
					}
				} else {
					out.Notifications = (out.Notifications)[:0]
				}
				for !in.IsDelim(']') {
					var v137 UserNotification
					easyjson3f98ee73DecodeGithubComOvhCdsSdk46(in, &v137)
					out.Notifications = append(out.Notifications, v137)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_modified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		case "vcs_server":
			out.VCSServer = string(in.String())
		case "repository_fullname":
			out.RepositoryFullname = string(in.String())
		case "vcs_strategy":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk47(in, &out.RepositoryStrategy)
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(Metadata)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v138 string
					v138 = string(in.String())
					(out.Metadata)[key] = v138
					in.WantComma()
				}
				in.Delim('}')
			}
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]ApplicationKey, 0, 1)
					} else {
						out.Keys = []ApplicationKey{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v139 ApplicationKey
					easyjson3f98ee73DecodeGithubComOvhCdsSdk48(in, &v139)
					out.Keys = append(out.Keys, v139)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk18(in, out.Usage)
			}
		case "deployment_strategies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DeploymentStrategies = make(map[string]IntegrationConfig)
				} else {
					out.DeploymentStrategies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v140 IntegrationConfig
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v140 = make(IntegrationConfig)
						} else {
							v140 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v141 IntegrationConfigValue
							easyjson3f98ee73DecodeGithubComOvhCdsSdk41(in, &v141)
							(v140)[key] = v141
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.DeploymentStrategies)[key] = v140
					in.WantComma()
				}
				in.Delim('}')
			}
		case "vulnerabilities":
			if in.IsNull() {
				in.Skip()
				out.Vulnerabilities = nil
			} else {
				in.Delim('[')
				if out.Vulnerabilities == nil {
					if !in.IsDelim(']') {
						out.Vulnerabilities = make([]Vulnerability, 0, 1)
					} else {
						out.Vulnerabilities = []Vulnerability{}
					}
				} else {
					out.Vulnerabilities = (out.Vulnerabilities)[:0]
				}
				for !in.IsDelim(']') {
					var v142 Vulnerability
					easyjson3f98ee73DecodeGithubComOvhCdsSdk49(in, &v142)
					out.Vulnerabilities = append(out.Vulnerabilities, v142)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk22(out *jwriter.Writer, in Application) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	if len(in.Variable) != 0 {
		const prefix string = ",\"variables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v143, v144 := range in.Variable {
				if v143 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk44(out, v144)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	if len(in.Notifications) != 0 {
		const prefix string = ",\"notifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v145, v146 := range in.Notifications {
				if v145 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk46(out, v146)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastModified).MarshalJSON())
	}
	if in.VCSServer != "" {
		const prefix string = ",\"vcs_server\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VCSServer))
	}
	if in.RepositoryFullname != "" {
		const prefix string = ",\"repository_fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RepositoryFullname))
	}
	if true {
		const prefix string = ",\"vcs_strategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk47(out, in.RepositoryStrategy)
	}
	{
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v147First := true
			for v147Name, v147Value := range in.Metadata {
				if v147First {
					v147First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v147Name))
				out.RawByte(':')
				out.String(string(v147Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"keys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Keys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v148, v149 := range in.Keys {
				if v148 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk48(out, v149)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk18(out, *in.Usage)
	}
	if len(in.DeploymentStrategies) != 0 {
		const prefix string = ",\"deployment_strategies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v150First := true
			for v150Name, v150Value := range in.DeploymentStrategies {
				if v150First {
					v150First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v150Name))
				out.RawByte(':')
				if v150Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v151First := true
					for v151Name, v151Value := range v150Value {
						if v151First {
							v151First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v151Name))
						out.RawByte(':')
						easyjson3f98ee73EncodeGithubComOvhCdsSdk41(out, v151Value)
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Vulnerabilities) != 0 {
		const prefix string = ",\"vulnerabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v152, v153 := range in.Vulnerabilities {
				if v152 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk49(out, v153)
			}
			out.RawByte(']')
		}
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk49(in *jlexer.Lexer, out *Vulnerability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "cve":
			out.CVE = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "component":
			out.Component = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "origin":
			out.Origin = string(in.String())
		case "severity":
			out.Severity = string(in.String())
		case "fix_in":
			out.FixIn = string(in.String())
		case "ignored":
			out.Ignored = bool(in.Bool())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk49(out *jwriter.Writer, in Vulnerability) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"application_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"cve\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CVE))
	}
	{
		const prefix string = ",\"link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"component\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Component))
	}
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"severity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Severity))
	}
	{
		const prefix string = ",\"fix_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FixIn))
	}
	{
		const prefix string = ",\"ignored\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ignored))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk48(in *jlexer.Lexer, out *ApplicationKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "public":
			out.Public = string(in.String())
		case "private":
			out.Private = string(in.String())
		case "keyID":
			out.KeyID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk48(out *jwriter.Writer, in ApplicationKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"application_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Public))
	}
	{
		const prefix string = ",\"private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Private))
	}
	{
		const prefix string = ",\"keyID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk47(in *jlexer.Lexer, out *RepositoryStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "connection_type":
			out.ConnectionType = string(in.String())
		case "ssh_key":
			out.SSHKey = string(in.String())
		case "ssh_key_content":
			out.SSHKeyContent = string(in.String())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "branch":
			out.Branch = string(in.String())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "pgp_key":
			out.PGPKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk47(out *jwriter.Writer, in RepositoryStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"connection_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConnectionType))
	}
	{
		const prefix string = ",\"ssh_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSHKey))
	}
	if in.SSHKeyContent != "" {
		const prefix string = ",\"ssh_key_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSHKeyContent))
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Branch != "" {
		const prefix string = ",\"branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Branch))
	}
	if in.DefaultBranch != "" {
		const prefix string = ",\"default_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultBranch))
	}
	{
		const prefix string = ",\"pgp_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PGPKey))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk46(in *jlexer.Lexer, out *UserNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "application_pipeline_id":
			out.ApplicationPipelineID = int64(in.Int64())
		case "pipeline":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk21(in, &out.Pipeline)
		case "environment":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk23(in, &out.Environment)
		case "notifications":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Notifications = make(map[string]UserNotificationSettings)
				} else {
					out.Notifications = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v154 UserNotificationSettings
					easyjson3f98ee73DecodeGithubComOvhCdsSdk50(in, &v154)
					(out.Notifications)[key] = v154
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk46(out *jwriter.Writer, in UserNotification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"application_pipeline_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ApplicationPipelineID))
	}
	{
		const prefix string = ",\"pipeline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk21(out, in.Pipeline)
	}
	{
		const prefix string = ",\"environment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk23(out, in.Environment)
	}
	{
		const prefix string = ",\"notifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Notifications == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v155First := true
			for v155Name, v155Value := range in.Notifications {
				if v155First {
					v155First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v155Name))
				out.RawByte(':')
				easyjson3f98ee73EncodeGithubComOvhCdsSdk50(out, v155Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk50(in *jlexer.Lexer, out *UserNotificationSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "on_success":
			out.OnSuccess = string(in.String())
		case "on_failure":
			out.OnFailure = string(in.String())
		case "on_start":
			if in.IsNull() {
				in.Skip()
				out.OnStart = nil
			} else {
				if out.OnStart == nil {
					out.OnStart = new(bool)
				}
				*out.OnStart = bool(in.Bool())
			}
		case "send_to_groups":
			if in.IsNull() {
				in.Skip()
				out.SendToGroups = nil
			} else {
				if out.SendToGroups == nil {
					out.SendToGroups = new(bool)
				}
				*out.SendToGroups = bool(in.Bool())
			}
		case "send_to_author":
			if in.IsNull() {
				in.Skip()
				out.SendToAuthor = nil
			} else {
				if out.SendToAuthor == nil {
					out.SendToAuthor = new(bool)
				}
				*out.SendToAuthor = bool(in.Bool())
			}
		case "recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]string, 0, 4)
					} else {
						out.Recipients = []string{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v156 string
					v156 = string(in.String())
					out.Recipients = append(out.Recipients, v156)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "template":
			if in.IsNull() {
				in.Skip()
				out.Template = nil
			} else {
				if out.Template == nil {
					out.Template = new(UserNotificationTemplate)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk51(in, out.Template)
			}
		case "conditions":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk38(in, &out.Conditions)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk50(out *jwriter.Writer, in UserNotificationSettings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OnSuccess != "" {
		const prefix string = ",\"on_success\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnSuccess))
	}
	if in.OnFailure != "" {
		const prefix string = ",\"on_failure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnFailure))
	}
	if in.OnStart != nil {
		const prefix string = ",\"on_start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.OnStart))
	}
	if in.SendToGroups != nil {
		const prefix string = ",\"send_to_groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SendToGroups))
	}
	if in.SendToAuthor != nil {
		const prefix string = ",\"send_to_author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SendToAuthor))
	}
	if len(in.Recipients) != 0 {
		const prefix string = ",\"recipients\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v157, v158 := range in.Recipients {
				if v157 > 0 {
					out.RawByte(',')
				}
				out.String(string(v158))
			}
			out.RawByte(']')
		}
	}
	if in.Template != nil {
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk51(out, *in.Template)
	}
	if true {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk38(out, in.Conditions)
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk51(in *jlexer.Lexer, out *UserNotificationTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subject":
			out.Subject = string(in.String())
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk51(out *jwriter.Writer, in UserNotificationTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Subject != "" {
		const prefix string = ",\"subject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk21(in *jlexer.Lexer, out *Pipeline) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "projectKey":
			out.ProjectKey = string(in.String())
		case "stages":
			if in.IsNull() {
				in.Skip()
				out.Stages = nil
			} else {
				in.Delim('[')
				if out.Stages == nil {
					if !in.IsDelim(']') {
						out.Stages = make([]Stage, 0, 1)
					} else {
						out.Stages = []Stage{}
					}
				} else {
					out.Stages = (out.Stages)[:0]
				}
				for !in.IsDelim(']') {
					var v159 Stage
					easyjson3f98ee73DecodeGithubComOvhCdsSdk52(in, &v159)
					out.Stages = append(out.Stages, v159)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameter = nil
			} else {
				in.Delim('[')
				if out.Parameter == nil {
					if !in.IsDelim(']') {
						out.Parameter = make([]Parameter, 0, 1)
					} else {
						out.Parameter = []Parameter{}
					}
				} else {
					out.Parameter = (out.Parameter)[:0]
				}
				for !in.IsDelim(']') {
					var v160 Parameter
					easyjson3f98ee73DecodeGithubComOvhCdsSdk37(in, &v160)
					out.Parameter = append(out.Parameter, v160)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk18(in, out.Usage)
			}
		case "permission":
			out.Permission = int(in.Int())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk21(out *jwriter.Writer, in Pipeline) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"projectKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"stages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Stages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v161, v162 := range in.Stages {
				if v161 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk52(out, v162)
			}
			out.RawByte(']')
		}
	}
	if len(in.Parameter) != 0 {
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v163, v164 := range in.Parameter {
				if v163 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk37(out, v164)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk18(out, *in.Usage)
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"from_repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk52(in *jlexer.Lexer, out *Stage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "build_order":
			out.BuildOrder = int(in.Int())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "run_jobs":
			if in.IsNull() {
				in.Skip()
				out.RunJobs = nil
			} else {
				in.Delim('[')
				if out.RunJobs == nil {
					if !in.IsDelim(']') {
						out.RunJobs = make([]WorkflowNodeJobRun, 0, 1)
					} else {
						out.RunJobs = []WorkflowNodeJobRun{}
					}
				} else {
					out.RunJobs = (out.RunJobs)[:0]
				}
				for !in.IsDelim(']') {
					var v165 WorkflowNodeJobRun
					if data := in.Raw(); in.Ok() {
						in.AddError((v165).UnmarshalJSON(data))
					}
					out.RunJobs = append(out.RunJobs, v165)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prerequisites":
			if in.IsNull() {
				in.Skip()
				out.Prerequisites = nil
			} else {
				in.Delim('[')
				if out.Prerequisites == nil {
					if !in.IsDelim(']') {
						out.Prerequisites = make([]Prerequisite, 0, 2)
					} else {
						out.Prerequisites = []Prerequisite{}
					}
				} else {
					out.Prerequisites = (out.Prerequisites)[:0]
				}
				for !in.IsDelim(']') {
					var v166 Prerequisite
					easyjson3f98ee73DecodeGithubComOvhCdsSdk53(in, &v166)
					out.Prerequisites = append(out.Prerequisites, v166)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conditions":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk38(in, &out.Conditions)
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "jobs":
			if in.IsNull() {
				in.Skip()
				out.Jobs = nil
			} else {
				in.Delim('[')
				if out.Jobs == nil {
					if !in.IsDelim(']') {
						out.Jobs = make([]Job, 0, 1)
					} else {
						out.Jobs = []Job{}
					}
				} else {
					out.Jobs = (out.Jobs)[:0]
				}
				for !in.IsDelim(']') {
					var v167 Job
					easyjson3f98ee73DecodeGithubComOvhCdsSdk54(in, &v167)
					out.Jobs = append(out.Jobs, v167)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = Status(in.String())
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]PipelineBuildWarning, 0, 1)
					} else {
						out.Warnings = []PipelineBuildWarning{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v168 PipelineBuildWarning
					easyjson3f98ee73DecodeGithubComOvhCdsSdk55(in, &v168)
					out.Warnings = append(out.Warnings, v168)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk52(out *jwriter.Writer, in Stage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"build_order\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BuildOrder))
	}
	{
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"run_jobs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RunJobs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v169, v170 := range in.RunJobs {
				if v169 > 0 {
					out.RawByte(',')
				}
				out.Raw((v170).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"prerequisites\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Prerequisites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v171, v172 := range in.Prerequisites {
				if v171 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk53(out, v172)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk38(out, in.Conditions)
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"jobs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Jobs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v173, v174 := range in.Jobs {
				if v173 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk54(out, v174)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"warnings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v175, v176 := range in.Warnings {
				if v175 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk55(out, v176)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk55(in *jlexer.Lexer, out *PipelineBuildWarning) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "action":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk56(in, &out.Action)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk55(out *jwriter.Writer, in PipelineBuildWarning) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk56(out, in.Action)
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk56(in *jlexer.Lexer, out *Action) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupID = nil
			} else {
				if out.GroupID == nil {
					out.GroupID = new(int64)
				}
				*out.GroupID = int64(in.Int64())
			}
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "deprecated":
			out.Deprecated = bool(in.Bool())
		case "step_name":
			out.StepName = string(in.String())
		case "optional":
			out.Optional = bool(in.Bool())
		case "always_executed":
			out.AlwaysExecuted = bool(in.Bool())
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make(RequirementList, 0, 1)
					} else {
						out.Requirements = RequirementList{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v177 Requirement
					if data := in.Raw(); in.Ok() {
						in.AddError((v177).UnmarshalJSON(data))
					}
					out.Requirements = append(out.Requirements, v177)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v178 Parameter
					easyjson3f98ee73DecodeGithubComOvhCdsSdk37(in, &v178)
					out.Parameters = append(out.Parameters, v178)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actions":
			if in.IsNull() {
				in.Skip()
				out.Actions = nil
			} else {
				in.Delim('[')
				if out.Actions == nil {
					if !in.IsDelim(']') {
						out.Actions = make([]Action, 0, 1)
					} else {
						out.Actions = []Action{}
					}
				} else {
					out.Actions = (out.Actions)[:0]
				}
				for !in.IsDelim(']') {
					var v179 Action
					easyjson3f98ee73DecodeGithubComOvhCdsSdk56(in, &v179)
					out.Actions = append(out.Actions, v179)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(Group)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk6(in, out.Group)
			}
		case "first_audit":
			if in.IsNull() {
				in.Skip()
				out.FirstAudit = nil
			} else {
				if out.FirstAudit == nil {
					out.FirstAudit = new(AuditAction)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk57(in, out.FirstAudit)
			}
		case "last_audit":
			if in.IsNull() {
				in.Skip()
				out.LastAudit = nil
			} else {
				if out.LastAudit == nil {
					out.LastAudit = new(AuditAction)
				}
				easyjson3f98ee73DecodeGithubComOvhCdsSdk57(in, out.LastAudit)
			}
		case "editable":
			out.Editable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk56(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.GroupID != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.GroupID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"deprecated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deprecated))
	}
	if in.StepName != "" {
		const prefix string = ",\"step_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StepName))
	}
	{
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Optional))
	}
	{
		const prefix string = ",\"always_executed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AlwaysExecuted))
	}
	{
		const prefix string = ",\"requirements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Requirements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v180, v181 := range in.Requirements {
				if v180 > 0 {
					out.RawByte(',')
				}
				out.Raw((v181).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Parameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v182, v183 := range in.Parameters {
				if v182 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk37(out, v183)
			}
			out.RawByte(']')
		}
	}
	if len(in.Actions) != 0 {
		const prefix string = ",\"actions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v184, v185 := range in.Actions {
				if v184 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk56(out, v185)
			}
			out.RawByte(']')
		}
	}
	if in.Group != nil {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk6(out, *in.Group)
	}
	if in.FirstAudit != nil {
		const prefix string = ",\"first_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk57(out, *in.FirstAudit)
	}
	if in.LastAudit != nil {
		const prefix string = ",\"last_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk57(out, *in.LastAudit)
	}
	if in.Editable {
		const prefix string = ",\"editable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Editable))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk57(in *jlexer.Lexer, out *AuditAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action_id":
			out.ActionID = int64(in.Int64())
		case "data_type":
			out.DataType = string(in.String())
		case "data_before":
			out.DataBefore = string(in.String())
		case "data_after":
			out.DataAfter = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "triggered_by":
			out.TriggeredBy = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "event_type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk57(out *jwriter.Writer, in AuditAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ActionID))
	}
	{
		const prefix string = ",\"data_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataType))
	}
	{
		const prefix string = ",\"data_before\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataBefore))
	}
	{
		const prefix string = ",\"data_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataAfter))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"triggered_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggeredBy))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"event_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk54(in *jlexer.Lexer, out *Job) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pipeline_action_id":
			out.PipelineActionID = int64(in.Int64())
		case "pipeline_stage_id":
			out.PipelineStageID = int64(in.Int64())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "action":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk56(in, &out.Action)
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]PipelineBuildWarning, 0, 1)
					} else {
						out.Warnings = []PipelineBuildWarning{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v186 PipelineBuildWarning
					easyjson3f98ee73DecodeGithubComOvhCdsSdk55(in, &v186)
					out.Warnings = append(out.Warnings, v186)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk54(out *jwriter.Writer, in Job) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pipeline_action_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineActionID))
	}
	{
		const prefix string = ",\"pipeline_stage_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineStageID))
	}
	{
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk56(out, in.Action)
	}
	{
		const prefix string = ",\"warnings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v187, v188 := range in.Warnings {
				if v187 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk55(out, v188)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk53(in *jlexer.Lexer, out *Prerequisite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameter":
			out.Parameter = string(in.String())
		case "expected_value":
			out.ExpectedValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk53(out *jwriter.Writer, in Prerequisite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Parameter))
	}
	{
		const prefix string = ",\"expected_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpectedValue))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk20(in *jlexer.Lexer, out *AuditWorkflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project_key":
			out.ProjectKey = string(in.String())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "data_type":
			out.DataType = string(in.String())
		case "data_before":
			out.DataBefore = string(in.String())
		case "data_after":
			out.DataAfter = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "triggered_by":
			out.TriggeredBy = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "event_type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk20(out *jwriter.Writer, in AuditWorkflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"data_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataType))
	}
	{
		const prefix string = ",\"data_before\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataBefore))
	}
	{
		const prefix string = ",\"data_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataAfter))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"triggered_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggeredBy))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"event_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk19(in *jlexer.Lexer, out *WorkflowNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "source_node_ref":
			if in.IsNull() {
				in.Skip()
				out.SourceNodeRefs = nil
			} else {
				in.Delim('[')
				if out.SourceNodeRefs == nil {
					if !in.IsDelim(']') {
						out.SourceNodeRefs = make([]string, 0, 4)
					} else {
						out.SourceNodeRefs = []string{}
					}
				} else {
					out.SourceNodeRefs = (out.SourceNodeRefs)[:0]
				}
				for !in.IsDelim(']') {
					var v189 string
					v189 = string(in.String())
					out.SourceNodeRefs = append(out.SourceNodeRefs, v189)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "node_id":
			if in.IsNull() {
				in.Skip()
				out.NodeIDs = nil
			} else {
				in.Delim('[')
				if out.NodeIDs == nil {
					if !in.IsDelim(']') {
						out.NodeIDs = make([]int64, 0, 8)
					} else {
						out.NodeIDs = []int64{}
					}
				} else {
					out.NodeIDs = (out.NodeIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v190 int64
					v190 = int64(in.Int64())
					out.NodeIDs = append(out.NodeIDs, v190)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = string(in.String())
		case "settings":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk50(in, &out.Settings)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk19(out *jwriter.Writer, in WorkflowNotification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.WorkflowID != 0 {
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	if len(in.SourceNodeRefs) != 0 {
		const prefix string = ",\"source_node_ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v191, v192 := range in.SourceNodeRefs {
				if v191 > 0 {
					out.RawByte(',')
				}
				out.String(string(v192))
			}
			out.RawByte(']')
		}
	}
	if len(in.NodeIDs) != 0 {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v193, v194 := range in.NodeIDs {
				if v193 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v194))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"settings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk50(out, in.Settings)
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk18(in *jlexer.Lexer, out *Usage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflows":
			if in.IsNull() {
				in.Skip()
				out.Workflows = nil
			} else {
				in.Delim('[')
				if out.Workflows == nil {
					if !in.IsDelim(']') {
						out.Workflows = make([]Workflow, 0, 1)
					} else {
						out.Workflows = []Workflow{}
					}
				} else {
					out.Workflows = (out.Workflows)[:0]
				}
				for !in.IsDelim(']') {
					var v195 Workflow
					easyjson3f98ee73DecodeGithubComOvhCdsSdk16(in, &v195)
					out.Workflows = append(out.Workflows, v195)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
				out.Environments = nil
			} else {
				in.Delim('[')
				if out.Environments == nil {
					if !in.IsDelim(']') {
						out.Environments = make([]Environment, 0, 1)
					} else {
						out.Environments = []Environment{}
					}
				} else {
					out.Environments = (out.Environments)[:0]
				}
				for !in.IsDelim(']') {
					var v196 Environment
					easyjson3f98ee73DecodeGithubComOvhCdsSdk23(in, &v196)
					out.Environments = append(out.Environments, v196)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pipelines":
			if in.IsNull() {
				in.Skip()
				out.Pipelines = nil
			} else {
				in.Delim('[')
				if out.Pipelines == nil {
					if !in.IsDelim(']') {
						out.Pipelines = make([]Pipeline, 0, 1)
					} else {
						out.Pipelines = []Pipeline{}
					}
				} else {
					out.Pipelines = (out.Pipelines)[:0]
				}
				for !in.IsDelim(']') {
					var v197 Pipeline
					easyjson3f98ee73DecodeGithubComOvhCdsSdk21(in, &v197)
					out.Pipelines = append(out.Pipelines, v197)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "applications":
			if in.IsNull() {
				in.Skip()
				out.Applications = nil
			} else {
				in.Delim('[')
				if out.Applications == nil {
					if !in.IsDelim(']') {
						out.Applications = make([]Application, 0, 1)
					} else {
						out.Applications = []Application{}
					}
				} else {
					out.Applications = (out.Applications)[:0]
				}
				for !in.IsDelim(']') {
					var v198 Application
					easyjson3f98ee73DecodeGithubComOvhCdsSdk22(in, &v198)
					out.Applications = append(out.Applications, v198)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk18(out *jwriter.Writer, in Usage) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Workflows) != 0 {
		const prefix string = ",\"workflows\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v199, v200 := range in.Workflows {
				if v199 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk16(out, v200)
			}
			out.RawByte(']')
		}
	}
	if len(in.Environments) != 0 {
		const prefix string = ",\"environments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v201, v202 := range in.Environments {
				if v201 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk23(out, v202)
			}
			out.RawByte(']')
		}
	}
	if len(in.Pipelines) != 0 {
		const prefix string = ",\"pipelines\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v203, v204 := range in.Pipelines {
				if v203 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk21(out, v204)
			}
			out.RawByte(']')
		}
	}
	if len(in.Applications) != 0 {
		const prefix string = ",\"applications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v205, v206 := range in.Applications {
				if v205 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk22(out, v206)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk17(in *jlexer.Lexer, out *GroupPermission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk6(in, &out.Group)
		case "permission":
			out.Permission = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk17(out *jwriter.Writer, in GroupPermission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk6(out, in.Group)
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk15(in *jlexer.Lexer, out *Project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "workflows":
			if in.IsNull() {
				in.Skip()
				out.Workflows = nil
			} else {
				in.Delim('[')
				if out.Workflows == nil {
					if !in.IsDelim(']') {
						out.Workflows = make([]Workflow, 0, 1)
					} else {
						out.Workflows = []Workflow{}
					}
				} else {
					out.Workflows = (out.Workflows)[:0]
				}
				for !in.IsDelim(']') {
					var v207 Workflow
					easyjson3f98ee73DecodeGithubComOvhCdsSdk16(in, &v207)
					out.Workflows = append(out.Workflows, v207)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workflow_names":
			if in.IsNull() {
				in.Skip()
				out.WorkflowNames = nil
			} else {
				in.Delim('[')
				if out.WorkflowNames == nil {
					if !in.IsDelim(']') {
						out.WorkflowNames = make(IDNames, 0, 1)
					} else {
						out.WorkflowNames = IDNames{}
					}
				} else {
					out.WorkflowNames = (out.WorkflowNames)[:0]
				}
				for !in.IsDelim(']') {
					var v208 IDName
					easyjson3f98ee73DecodeGithubComOvhCdsSdk58(in, &v208)
					out.WorkflowNames = append(out.WorkflowNames, v208)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pipelines":
			if in.IsNull() {
				in.Skip()
				out.Pipelines = nil
			} else {
				in.Delim('[')
				if out.Pipelines == nil {
					if !in.IsDelim(']') {
						out.Pipelines = make([]Pipeline, 0, 1)
					} else {
						out.Pipelines = []Pipeline{}
					}
				} else {
					out.Pipelines = (out.Pipelines)[:0]
				}
				for !in.IsDelim(']') {
					var v209 Pipeline
					easyjson3f98ee73DecodeGithubComOvhCdsSdk21(in, &v209)
					out.Pipelines = append(out.Pipelines, v209)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pipeline_names":
			if in.IsNull() {
				in.Skip()
				out.PipelineNames = nil
			} else {
				in.Delim('[')
				if out.PipelineNames == nil {
					if !in.IsDelim(']') {
						out.PipelineNames = make(IDNames, 0, 1)
					} else {
						out.PipelineNames = IDNames{}
					}
				} else {
					out.PipelineNames = (out.PipelineNames)[:0]
				}
				for !in.IsDelim(']') {
					var v210 IDName
					easyjson3f98ee73DecodeGithubComOvhCdsSdk58(in, &v210)
					out.PipelineNames = append(out.PipelineNames, v210)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "applications":
			if in.IsNull() {
				in.Skip()
				out.Applications = nil
			} else {
				in.Delim('[')
				if out.Applications == nil {
					if !in.IsDelim(']') {
						out.Applications = make([]Application, 0, 1)
					} else {
						out.Applications = []Application{}
					}
				} else {
					out.Applications = (out.Applications)[:0]
				}
				for !in.IsDelim(']') {
					var v211 Application
					easyjson3f98ee73DecodeGithubComOvhCdsSdk22(in, &v211)
					out.Applications = append(out.Applications, v211)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "application_names":
			if in.IsNull() {
				in.Skip()
				out.ApplicationNames = nil
			} else {
				in.Delim('[')
				if out.ApplicationNames == nil {
					if !in.IsDelim(']') {
						out.ApplicationNames = make(IDNames, 0, 1)
					} else {
						out.ApplicationNames = IDNames{}
					}
				} else {
					out.ApplicationNames = (out.ApplicationNames)[:0]
				}
				for !in.IsDelim(']') {
					var v212 IDName
					easyjson3f98ee73DecodeGithubComOvhCdsSdk58(in, &v212)
					out.ApplicationNames = append(out.ApplicationNames, v212)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.ProjectGroups = nil
			} else {
				in.Delim('[')
				if out.ProjectGroups == nil {
					if !in.IsDelim(']') {
						out.ProjectGroups = make([]GroupPermission, 0, 1)
					} else {
						out.ProjectGroups = []GroupPermission{}
					}
				} else {
					out.ProjectGroups = (out.ProjectGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v213 GroupPermission
					easyjson3f98ee73DecodeGithubComOvhCdsSdk17(in, &v213)
					out.ProjectGroups = append(out.ProjectGroups, v213)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Variable = nil
			} else {
				in.Delim('[')
				if out.Variable == nil {
					if !in.IsDelim(']') {
						out.Variable = make([]Variable, 0, 1)
					} else {
						out.Variable = []Variable{}
					}
				} else {
					out.Variable = (out.Variable)[:0]
				}
				for !in.IsDelim(']') {
					var v214 Variable
					easyjson3f98ee73DecodeGithubComOvhCdsSdk44(in, &v214)
					out.Variable = append(out.Variable, v214)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
				out.Environments = nil
			} else {
				in.Delim('[')
				if out.Environments == nil {
					if !in.IsDelim(']') {
						out.Environments = make([]Environment, 0, 1)
					} else {
						out.Environments = []Environment{}
					}
				} else {
					out.Environments = (out.Environments)[:0]
				}
				for !in.IsDelim(']') {
					var v215 Environment
					easyjson3f98ee73DecodeGithubComOvhCdsSdk23(in, &v215)
					out.Environments = append(out.Environments, v215)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environment_names":
			if in.IsNull() {
				in.Skip()
				out.EnvironmentNames = nil
			} else {
				in.Delim('[')
				if out.EnvironmentNames == nil {
					if !in.IsDelim(']') {
						out.EnvironmentNames = make(IDNames, 0, 1)
					} else {
						out.EnvironmentNames = IDNames{}
					}
				} else {
					out.EnvironmentNames = (out.EnvironmentNames)[:0]
				}
				for !in.IsDelim(']') {
					var v216 IDName
					easyjson3f98ee73DecodeGithubComOvhCdsSdk58(in, &v216)
					out.EnvironmentNames = append(out.EnvironmentNames, v216)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]Label, 0, 1)
					} else {
						out.Labels = []Label{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v217 Label
					easyjson3f98ee73DecodeGithubComOvhCdsSdk26(in, &v217)
					out.Labels = append(out.Labels, v217)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permission":
			out.Permission = int(in.Int())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "last_modified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(Metadata)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v218 string
					v218 = string(in.String())
					(out.Metadata)[key] = v218
					in.WantComma()
				}
				in.Delim('}')
			}
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]ProjectKey, 0, 1)
					} else {
						out.Keys = []ProjectKey{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v219 ProjectKey
					easyjson3f98ee73DecodeGithubComOvhCdsSdk59(in, &v219)
					out.Keys = append(out.Keys, v219)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vcs_servers":
			if in.IsNull() {
				in.Skip()
				out.VCSServers = nil
			} else {
				in.Delim('[')
				if out.VCSServers == nil {
					if !in.IsDelim(']') {
						out.VCSServers = make([]ProjectVCSServer, 0, 1)
					} else {
						out.VCSServers = []ProjectVCSServer{}
					}
				} else {
					out.VCSServers = (out.VCSServers)[:0]
				}
				for !in.IsDelim(']') {
					var v220 ProjectVCSServer
					easyjson3f98ee73DecodeGithubComOvhCdsSdk60(in, &v220)
					out.VCSServers = append(out.VCSServers, v220)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "integrations":
			if in.IsNull() {
				in.Skip()
				out.Integrations = nil
			} else {
				in.Delim('[')
				if out.Integrations == nil {
					if !in.IsDelim(']') {
						out.Integrations = make([]ProjectIntegration, 0, 1)
					} else {
						out.Integrations = []ProjectIntegration{}
					}
				} else {
					out.Integrations = (out.Integrations)[:0]
				}
				for !in.IsDelim(']') {
					var v221 ProjectIntegration
					easyjson3f98ee73DecodeGithubComOvhCdsSdk24(in, &v221)
					out.Integrations = append(out.Integrations, v221)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "features":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Features = make(map[string]bool)
				} else {
					out.Features = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v222 bool
					v222 = bool(in.Bool())
					(out.Features)[key] = v222
					in.WantComma()
				}
				in.Delim('}')
			}
		case "favorite":
			out.Favorite = bool(in.Bool())
		case "urls":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk29(in, &out.URLs)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk15(out *jwriter.Writer, in Project) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	if len(in.Workflows) != 0 {
		const prefix string = ",\"workflows\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v223, v224 := range in.Workflows {
				if v223 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk16(out, v224)
			}
			out.RawByte(']')
		}
	}
	if len(in.WorkflowNames) != 0 {
		const prefix string = ",\"workflow_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v225, v226 := range in.WorkflowNames {
				if v225 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk58(out, v226)
			}
			out.RawByte(']')
		}
	}
	if len(in.Pipelines) != 0 {
		const prefix string = ",\"pipelines\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v227, v228 := range in.Pipelines {
				if v227 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk21(out, v228)
			}
			out.RawByte(']')
		}
	}
	if len(in.PipelineNames) != 0 {
		const prefix string = ",\"pipeline_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v229, v230 := range in.PipelineNames {
				if v229 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk58(out, v230)
			}
			out.RawByte(']')
		}
	}
	if len(in.Applications) != 0 {
		const prefix string = ",\"applications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v231, v232 := range in.Applications {
				if v231 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk22(out, v232)
			}
			out.RawByte(']')
		}
	}
	if len(in.ApplicationNames) != 0 {
		const prefix string = ",\"application_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v233, v234 := range in.ApplicationNames {
				if v233 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk58(out, v234)
			}
			out.RawByte(']')
		}
	}
	if len(in.ProjectGroups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v235, v236 := range in.ProjectGroups {
				if v235 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk17(out, v236)
			}
			out.RawByte(']')
		}
	}
	if len(in.Variable) != 0 {
		const prefix string = ",\"variables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v237, v238 := range in.Variable {
				if v237 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk44(out, v238)
			}
			out.RawByte(']')
		}
	}
	if len(in.Environments) != 0 {
		const prefix string = ",\"environments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v239, v240 := range in.Environments {
				if v239 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk23(out, v240)
			}
			out.RawByte(']')
		}
	}
	if len(in.EnvironmentNames) != 0 {
		const prefix string = ",\"environment_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v241, v242 := range in.EnvironmentNames {
				if v241 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk58(out, v242)
			}
			out.RawByte(']')
		}
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v243, v244 := range in.Labels {
				if v243 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk26(out, v244)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastModified).MarshalJSON())
	}
	{
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v245First := true
			for v245Name, v245Value := range in.Metadata {
				if v245First {
					v245First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v245Name))
				out.RawByte(':')
				out.String(string(v245Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"keys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Keys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v246, v247 := range in.Keys {
				if v246 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk59(out, v247)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"vcs_servers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VCSServers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v248, v249 := range in.VCSServers {
				if v248 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk60(out, v249)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"integrations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Integrations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v250, v251 := range in.Integrations {
				if v250 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk24(out, v251)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"features\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Features == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v252First := true
			for v252Name, v252Value := range in.Features {
				if v252First {
					v252First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v252Name))
				out.RawByte(':')
				out.Bool(bool(v252Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"favorite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Favorite))
	}
	{
		const prefix string = ",\"urls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk29(out, in.URLs)
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk60(in *jlexer.Lexer, out *ProjectVCSServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk60(out *jwriter.Writer, in ProjectVCSServer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk59(in *jlexer.Lexer, out *ProjectKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "public":
			out.Public = string(in.String())
		case "private":
			out.Private = string(in.String())
		case "keyID":
			out.KeyID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk59(out *jwriter.Writer, in ProjectKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Public))
	}
	{
		const prefix string = ",\"private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Private))
	}
	{
		const prefix string = ",\"keyID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk58(in *jlexer.Lexer, out *IDName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]Label, 0, 1)
					} else {
						out.Labels = []Label{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v253 Label
					easyjson3f98ee73DecodeGithubComOvhCdsSdk26(in, &v253)
					out.Labels = append(out.Labels, v253)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk58(out *jwriter.Writer, in IDName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v254, v255 := range in.Labels {
				if v254 > 0 {
					out.RawByte(',')
				}
				easyjson3f98ee73EncodeGithubComOvhCdsSdk26(out, v255)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk14(in *jlexer.Lexer, out *AuditWorkflowTemplateInstance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow_template_instance_id":
			out.WorkflowTemplateInstanceID = int64(in.Int64())
		case "data_type":
			out.DataType = string(in.String())
		case "data_before":
			out.DataBefore = string(in.String())
		case "data_after":
			out.DataAfter = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "triggered_by":
			out.TriggeredBy = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "event_type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk14(out *jwriter.Writer, in AuditWorkflowTemplateInstance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow_template_instance_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowTemplateInstanceID))
	}
	{
		const prefix string = ",\"data_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataType))
	}
	{
		const prefix string = ",\"data_before\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataBefore))
	}
	{
		const prefix string = ",\"data_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataAfter))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"triggered_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggeredBy))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"event_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk13(in *jlexer.Lexer, out *WorkflowTemplateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project_key":
			out.ProjectKey = string(in.String())
		case "workflow_name":
			out.WorkflowName = string(in.String())
		case "parameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Parameters = make(map[string]string)
				} else {
					out.Parameters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v256 string
					v256 = string(in.String())
					(out.Parameters)[key] = v256
					in.WantComma()
				}
				in.Delim('}')
			}
		case "detached":
			out.Detached = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk13(out *jwriter.Writer, in WorkflowTemplateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"workflow_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkflowName))
	}
	{
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Parameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v257First := true
			for v257Name, v257Value := range in.Parameters {
				if v257First {
					v257First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v257Name))
				out.RawByte(':')
				out.String(string(v257Value))
			}
			out.RawByte('}')
		}
	}
	if in.Detached {
		const prefix string = ",\"detached\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Detached))
	}
	out.RawByte('}')
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk61(in *jlexer.Lexer, out *EventWorkflowTemplateInstanceAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow_template_instance":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk12(in, &out.WorkflowTemplateInstance)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk61(out *jwriter.Writer, in EventWorkflowTemplateInstanceAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow_template_instance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk12(out, in.WorkflowTemplateInstance)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowTemplateInstanceAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98ee73EncodeGithubComOvhCdsSdk61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowTemplateInstanceAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98ee73EncodeGithubComOvhCdsSdk61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowTemplateInstanceAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98ee73DecodeGithubComOvhCdsSdk61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowTemplateInstanceAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98ee73DecodeGithubComOvhCdsSdk61(l, v)
}
func easyjson3f98ee73DecodeGithubComOvhCdsSdk62(in *jlexer.Lexer, out *EventWorkflowTemplateAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow_template":
			easyjson3f98ee73DecodeGithubComOvhCdsSdk1(in, &out.WorkflowTemplate)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f98ee73EncodeGithubComOvhCdsSdk62(out *jwriter.Writer, in EventWorkflowTemplateAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3f98ee73EncodeGithubComOvhCdsSdk1(out, in.WorkflowTemplate)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventWorkflowTemplateAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f98ee73EncodeGithubComOvhCdsSdk62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventWorkflowTemplateAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f98ee73EncodeGithubComOvhCdsSdk62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventWorkflowTemplateAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f98ee73DecodeGithubComOvhCdsSdk62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventWorkflowTemplateAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f98ee73DecodeGithubComOvhCdsSdk62(l, v)
}
