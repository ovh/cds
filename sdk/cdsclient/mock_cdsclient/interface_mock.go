// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_cdsclient is a generated GoMock package.
package mock_cdsclient

import (
	tar "archive/tar"
	context "context"
	json "encoding/json"
	io "io"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	sdk "github.com/ovh/cds/sdk"
	cdsclient "github.com/ovh/cds/sdk/cdsclient"
	afero "github.com/spf13/afero"
)

// MockTemplateClient is a mock of TemplateClient interface.
type MockTemplateClient struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateClientMockRecorder
}

// MockTemplateClientMockRecorder is the mock recorder for MockTemplateClient.
type MockTemplateClientMockRecorder struct {
	mock *MockTemplateClient
}

// NewMockTemplateClient creates a new mock instance.
func NewMockTemplateClient(ctrl *gomock.Controller) *MockTemplateClient {
	mock := &MockTemplateClient{ctrl: ctrl}
	mock.recorder = &MockTemplateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateClient) EXPECT() *MockTemplateClientMockRecorder {
	return m.recorder
}

// TemplateApply mocks base method.
func (m *MockTemplateClient) TemplateApply(groupName, templateSlug string, req sdk.WorkflowTemplateRequest, mods ...cdsclient.RequestModifier) (*tar.Reader, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, templateSlug, req}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TemplateApply", varargs...)
	ret0, _ := ret[0].(*tar.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateApply indicates an expected call of TemplateApply.
func (mr *MockTemplateClientMockRecorder) TemplateApply(groupName, templateSlug, req interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, templateSlug, req}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateApply", reflect.TypeOf((*MockTemplateClient)(nil).TemplateApply), varargs...)
}

// TemplateBulk mocks base method.
func (m *MockTemplateClient) TemplateBulk(groupName, templateSlug string, req sdk.WorkflowTemplateBulk) (*sdk.WorkflowTemplateBulk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateBulk", groupName, templateSlug, req)
	ret0, _ := ret[0].(*sdk.WorkflowTemplateBulk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateBulk indicates an expected call of TemplateBulk.
func (mr *MockTemplateClientMockRecorder) TemplateBulk(groupName, templateSlug, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateBulk", reflect.TypeOf((*MockTemplateClient)(nil).TemplateBulk), groupName, templateSlug, req)
}

// TemplateDelete mocks base method.
func (m *MockTemplateClient) TemplateDelete(groupName, templateSlug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateDelete", groupName, templateSlug)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemplateDelete indicates an expected call of TemplateDelete.
func (mr *MockTemplateClientMockRecorder) TemplateDelete(groupName, templateSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateDelete", reflect.TypeOf((*MockTemplateClient)(nil).TemplateDelete), groupName, templateSlug)
}

// TemplateDeleteInstance mocks base method.
func (m *MockTemplateClient) TemplateDeleteInstance(groupName, templateSlug string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateDeleteInstance", groupName, templateSlug, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemplateDeleteInstance indicates an expected call of TemplateDeleteInstance.
func (mr *MockTemplateClientMockRecorder) TemplateDeleteInstance(groupName, templateSlug, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateDeleteInstance", reflect.TypeOf((*MockTemplateClient)(nil).TemplateDeleteInstance), groupName, templateSlug, id)
}

// TemplateGet mocks base method.
func (m *MockTemplateClient) TemplateGet(groupName, templateSlug string) (*sdk.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateGet", groupName, templateSlug)
	ret0, _ := ret[0].(*sdk.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateGet indicates an expected call of TemplateGet.
func (mr *MockTemplateClientMockRecorder) TemplateGet(groupName, templateSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateGet", reflect.TypeOf((*MockTemplateClient)(nil).TemplateGet), groupName, templateSlug)
}

// TemplateGetAll mocks base method.
func (m *MockTemplateClient) TemplateGetAll() ([]sdk.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateGetAll")
	ret0, _ := ret[0].([]sdk.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateGetAll indicates an expected call of TemplateGetAll.
func (mr *MockTemplateClientMockRecorder) TemplateGetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateGetAll", reflect.TypeOf((*MockTemplateClient)(nil).TemplateGetAll))
}

// TemplateGetBulk mocks base method.
func (m *MockTemplateClient) TemplateGetBulk(groupName, templateSlug string, id int64) (*sdk.WorkflowTemplateBulk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateGetBulk", groupName, templateSlug, id)
	ret0, _ := ret[0].(*sdk.WorkflowTemplateBulk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateGetBulk indicates an expected call of TemplateGetBulk.
func (mr *MockTemplateClientMockRecorder) TemplateGetBulk(groupName, templateSlug, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateGetBulk", reflect.TypeOf((*MockTemplateClient)(nil).TemplateGetBulk), groupName, templateSlug, id)
}

// TemplateGetInstances mocks base method.
func (m *MockTemplateClient) TemplateGetInstances(groupName, templateSlug string) ([]sdk.WorkflowTemplateInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateGetInstances", groupName, templateSlug)
	ret0, _ := ret[0].([]sdk.WorkflowTemplateInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateGetInstances indicates an expected call of TemplateGetInstances.
func (mr *MockTemplateClientMockRecorder) TemplateGetInstances(groupName, templateSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateGetInstances", reflect.TypeOf((*MockTemplateClient)(nil).TemplateGetInstances), groupName, templateSlug)
}

// TemplatePull mocks base method.
func (m *MockTemplateClient) TemplatePull(groupName, templateSlug string) (*tar.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplatePull", groupName, templateSlug)
	ret0, _ := ret[0].(*tar.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplatePull indicates an expected call of TemplatePull.
func (mr *MockTemplateClientMockRecorder) TemplatePull(groupName, templateSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplatePull", reflect.TypeOf((*MockTemplateClient)(nil).TemplatePull), groupName, templateSlug)
}

// TemplatePush mocks base method.
func (m *MockTemplateClient) TemplatePush(tarContent io.Reader) ([]string, *tar.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplatePush", tarContent)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*tar.Reader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TemplatePush indicates an expected call of TemplatePush.
func (mr *MockTemplateClientMockRecorder) TemplatePush(tarContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplatePush", reflect.TypeOf((*MockTemplateClient)(nil).TemplatePush), tarContent)
}

// MockAdmin is a mock of Admin interface.
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockAdminMockRecorder
}

// MockAdminMockRecorder is the mock recorder for MockAdmin.
type MockAdminMockRecorder struct {
	mock *MockAdmin
}

// NewMockAdmin creates a new mock instance.
func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &MockAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdmin) EXPECT() *MockAdminMockRecorder {
	return m.recorder
}

// AdminCDSMigrationCancel mocks base method.
func (m *MockAdmin) AdminCDSMigrationCancel(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCDSMigrationCancel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminCDSMigrationCancel indicates an expected call of AdminCDSMigrationCancel.
func (mr *MockAdminMockRecorder) AdminCDSMigrationCancel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCDSMigrationCancel", reflect.TypeOf((*MockAdmin)(nil).AdminCDSMigrationCancel), id)
}

// AdminCDSMigrationList mocks base method.
func (m *MockAdmin) AdminCDSMigrationList() ([]sdk.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCDSMigrationList")
	ret0, _ := ret[0].([]sdk.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCDSMigrationList indicates an expected call of AdminCDSMigrationList.
func (mr *MockAdminMockRecorder) AdminCDSMigrationList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCDSMigrationList", reflect.TypeOf((*MockAdmin)(nil).AdminCDSMigrationList))
}

// AdminCDSMigrationReset mocks base method.
func (m *MockAdmin) AdminCDSMigrationReset(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCDSMigrationReset", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminCDSMigrationReset indicates an expected call of AdminCDSMigrationReset.
func (mr *MockAdminMockRecorder) AdminCDSMigrationReset(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCDSMigrationReset", reflect.TypeOf((*MockAdmin)(nil).AdminCDSMigrationReset), id)
}

// AdminDatabaseListEncryptedEntities mocks base method.
func (m *MockAdmin) AdminDatabaseListEncryptedEntities(service string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseListEncryptedEntities", service)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDatabaseListEncryptedEntities indicates an expected call of AdminDatabaseListEncryptedEntities.
func (mr *MockAdminMockRecorder) AdminDatabaseListEncryptedEntities(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseListEncryptedEntities", reflect.TypeOf((*MockAdmin)(nil).AdminDatabaseListEncryptedEntities), service)
}

// AdminDatabaseMigrationDelete mocks base method.
func (m *MockAdmin) AdminDatabaseMigrationDelete(service, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseMigrationDelete", service, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseMigrationDelete indicates an expected call of AdminDatabaseMigrationDelete.
func (mr *MockAdminMockRecorder) AdminDatabaseMigrationDelete(service, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseMigrationDelete", reflect.TypeOf((*MockAdmin)(nil).AdminDatabaseMigrationDelete), service, id)
}

// AdminDatabaseMigrationUnlock mocks base method.
func (m *MockAdmin) AdminDatabaseMigrationUnlock(service, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseMigrationUnlock", service, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseMigrationUnlock indicates an expected call of AdminDatabaseMigrationUnlock.
func (mr *MockAdminMockRecorder) AdminDatabaseMigrationUnlock(service, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseMigrationUnlock", reflect.TypeOf((*MockAdmin)(nil).AdminDatabaseMigrationUnlock), service, id)
}

// AdminDatabaseMigrationsList mocks base method.
func (m *MockAdmin) AdminDatabaseMigrationsList(service string) ([]sdk.DatabaseMigrationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseMigrationsList", service)
	ret0, _ := ret[0].([]sdk.DatabaseMigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDatabaseMigrationsList indicates an expected call of AdminDatabaseMigrationsList.
func (mr *MockAdminMockRecorder) AdminDatabaseMigrationsList(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseMigrationsList", reflect.TypeOf((*MockAdmin)(nil).AdminDatabaseMigrationsList), service)
}

// AdminDatabaseRollAllEncryptedEntities mocks base method.
func (m *MockAdmin) AdminDatabaseRollAllEncryptedEntities(service string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseRollAllEncryptedEntities", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseRollAllEncryptedEntities indicates an expected call of AdminDatabaseRollAllEncryptedEntities.
func (mr *MockAdminMockRecorder) AdminDatabaseRollAllEncryptedEntities(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseRollAllEncryptedEntities", reflect.TypeOf((*MockAdmin)(nil).AdminDatabaseRollAllEncryptedEntities), service)
}

// AdminDatabaseRollEncryptedEntity mocks base method.
func (m *MockAdmin) AdminDatabaseRollEncryptedEntity(service, e string, idx *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseRollEncryptedEntity", service, e, idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseRollEncryptedEntity indicates an expected call of AdminDatabaseRollEncryptedEntity.
func (mr *MockAdminMockRecorder) AdminDatabaseRollEncryptedEntity(service, e, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseRollEncryptedEntity", reflect.TypeOf((*MockAdmin)(nil).AdminDatabaseRollEncryptedEntity), service, e, idx)
}

// AdminDatabaseSignaturesResume mocks base method.
func (m *MockAdmin) AdminDatabaseSignaturesResume(service string) (sdk.CanonicalFormUsageResume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseSignaturesResume", service)
	ret0, _ := ret[0].(sdk.CanonicalFormUsageResume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDatabaseSignaturesResume indicates an expected call of AdminDatabaseSignaturesResume.
func (mr *MockAdminMockRecorder) AdminDatabaseSignaturesResume(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseSignaturesResume", reflect.TypeOf((*MockAdmin)(nil).AdminDatabaseSignaturesResume), service)
}

// AdminDatabaseSignaturesRollAllEntities mocks base method.
func (m *MockAdmin) AdminDatabaseSignaturesRollAllEntities(service string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseSignaturesRollAllEntities", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseSignaturesRollAllEntities indicates an expected call of AdminDatabaseSignaturesRollAllEntities.
func (mr *MockAdminMockRecorder) AdminDatabaseSignaturesRollAllEntities(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseSignaturesRollAllEntities", reflect.TypeOf((*MockAdmin)(nil).AdminDatabaseSignaturesRollAllEntities), service)
}

// AdminDatabaseSignaturesRollEntity mocks base method.
func (m *MockAdmin) AdminDatabaseSignaturesRollEntity(service, e string, idx *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseSignaturesRollEntity", service, e, idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseSignaturesRollEntity indicates an expected call of AdminDatabaseSignaturesRollEntity.
func (mr *MockAdminMockRecorder) AdminDatabaseSignaturesRollEntity(service, e, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseSignaturesRollEntity", reflect.TypeOf((*MockAdmin)(nil).AdminDatabaseSignaturesRollEntity), service, e, idx)
}

// AdminOrganizationCreate mocks base method.
func (m *MockAdmin) AdminOrganizationCreate(ctx context.Context, orga sdk.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrganizationCreate", ctx, orga)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminOrganizationCreate indicates an expected call of AdminOrganizationCreate.
func (mr *MockAdminMockRecorder) AdminOrganizationCreate(ctx, orga interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrganizationCreate", reflect.TypeOf((*MockAdmin)(nil).AdminOrganizationCreate), ctx, orga)
}

// AdminOrganizationDelete mocks base method.
func (m *MockAdmin) AdminOrganizationDelete(ctx context.Context, orgaIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrganizationDelete", ctx, orgaIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminOrganizationDelete indicates an expected call of AdminOrganizationDelete.
func (mr *MockAdminMockRecorder) AdminOrganizationDelete(ctx, orgaIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrganizationDelete", reflect.TypeOf((*MockAdmin)(nil).AdminOrganizationDelete), ctx, orgaIdentifier)
}

// AdminOrganizationList mocks base method.
func (m *MockAdmin) AdminOrganizationList(ctx context.Context) ([]sdk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrganizationList", ctx)
	ret0, _ := ret[0].([]sdk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminOrganizationList indicates an expected call of AdminOrganizationList.
func (mr *MockAdminMockRecorder) AdminOrganizationList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrganizationList", reflect.TypeOf((*MockAdmin)(nil).AdminOrganizationList), ctx)
}

// AdminOrganizationMigrateUser mocks base method.
func (m *MockAdmin) AdminOrganizationMigrateUser(ctx context.Context, orgaIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrganizationMigrateUser", ctx, orgaIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminOrganizationMigrateUser indicates an expected call of AdminOrganizationMigrateUser.
func (mr *MockAdminMockRecorder) AdminOrganizationMigrateUser(ctx, orgaIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrganizationMigrateUser", reflect.TypeOf((*MockAdmin)(nil).AdminOrganizationMigrateUser), ctx, orgaIdentifier)
}

// AdminWorkflowUpdateMaxRuns mocks base method.
func (m *MockAdmin) AdminWorkflowUpdateMaxRuns(projectKey, workflowName string, maxRuns int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminWorkflowUpdateMaxRuns", projectKey, workflowName, maxRuns)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminWorkflowUpdateMaxRuns indicates an expected call of AdminWorkflowUpdateMaxRuns.
func (mr *MockAdminMockRecorder) AdminWorkflowUpdateMaxRuns(projectKey, workflowName, maxRuns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminWorkflowUpdateMaxRuns", reflect.TypeOf((*MockAdmin)(nil).AdminWorkflowUpdateMaxRuns), projectKey, workflowName, maxRuns)
}

// FeatureCreate mocks base method.
func (m *MockAdmin) FeatureCreate(f sdk.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureCreate", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeatureCreate indicates an expected call of FeatureCreate.
func (mr *MockAdminMockRecorder) FeatureCreate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureCreate", reflect.TypeOf((*MockAdmin)(nil).FeatureCreate), f)
}

// FeatureDelete mocks base method.
func (m *MockAdmin) FeatureDelete(name sdk.FeatureName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureDelete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeatureDelete indicates an expected call of FeatureDelete.
func (mr *MockAdminMockRecorder) FeatureDelete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureDelete", reflect.TypeOf((*MockAdmin)(nil).FeatureDelete), name)
}

// FeatureGet mocks base method.
func (m *MockAdmin) FeatureGet(name sdk.FeatureName) (sdk.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureGet", name)
	ret0, _ := ret[0].(sdk.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeatureGet indicates an expected call of FeatureGet.
func (mr *MockAdminMockRecorder) FeatureGet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureGet", reflect.TypeOf((*MockAdmin)(nil).FeatureGet), name)
}

// FeatureUpdate mocks base method.
func (m *MockAdmin) FeatureUpdate(f sdk.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureUpdate", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeatureUpdate indicates an expected call of FeatureUpdate.
func (mr *MockAdminMockRecorder) FeatureUpdate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureUpdate", reflect.TypeOf((*MockAdmin)(nil).FeatureUpdate), f)
}

// Features mocks base method.
func (m *MockAdmin) Features() ([]sdk.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].([]sdk.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockAdminMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockAdmin)(nil).Features))
}

// HasProjectRole mocks base method.
func (m *MockAdmin) HasProjectRole(ctx context.Context, projectKey, sessionID, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProjectRole", ctx, projectKey, sessionID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasProjectRole indicates an expected call of HasProjectRole.
func (mr *MockAdminMockRecorder) HasProjectRole(ctx, projectKey, sessionID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProjectRole", reflect.TypeOf((*MockAdmin)(nil).HasProjectRole), ctx, projectKey, sessionID, role)
}

// ServiceCallDELETE mocks base method.
func (m *MockAdmin) ServiceCallDELETE(stype, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCallDELETE", stype, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceCallDELETE indicates an expected call of ServiceCallDELETE.
func (mr *MockAdminMockRecorder) ServiceCallDELETE(stype, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCallDELETE", reflect.TypeOf((*MockAdmin)(nil).ServiceCallDELETE), stype, url)
}

// ServiceCallGET mocks base method.
func (m *MockAdmin) ServiceCallGET(stype, url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCallGET", stype, url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceCallGET indicates an expected call of ServiceCallGET.
func (mr *MockAdminMockRecorder) ServiceCallGET(stype, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCallGET", reflect.TypeOf((*MockAdmin)(nil).ServiceCallGET), stype, url)
}

// ServiceCallPOST mocks base method.
func (m *MockAdmin) ServiceCallPOST(stype, url string, body []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCallPOST", stype, url, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceCallPOST indicates an expected call of ServiceCallPOST.
func (mr *MockAdminMockRecorder) ServiceCallPOST(stype, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCallPOST", reflect.TypeOf((*MockAdmin)(nil).ServiceCallPOST), stype, url, body)
}

// ServiceCallPUT mocks base method.
func (m *MockAdmin) ServiceCallPUT(stype, url string, body []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCallPUT", stype, url, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceCallPUT indicates an expected call of ServiceCallPUT.
func (mr *MockAdminMockRecorder) ServiceCallPUT(stype, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCallPUT", reflect.TypeOf((*MockAdmin)(nil).ServiceCallPUT), stype, url, body)
}

// ServiceDelete mocks base method.
func (m *MockAdmin) ServiceDelete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceDelete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceDelete indicates an expected call of ServiceDelete.
func (mr *MockAdminMockRecorder) ServiceDelete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDelete", reflect.TypeOf((*MockAdmin)(nil).ServiceDelete), name)
}

// ServiceNameCallGET mocks base method.
func (m *MockAdmin) ServiceNameCallGET(name, url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNameCallGET", name, url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceNameCallGET indicates an expected call of ServiceNameCallGET.
func (mr *MockAdminMockRecorder) ServiceNameCallGET(name, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNameCallGET", reflect.TypeOf((*MockAdmin)(nil).ServiceNameCallGET), name, url)
}

// Services mocks base method.
func (m *MockAdmin) Services() ([]sdk.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services")
	ret0, _ := ret[0].([]sdk.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Services indicates an expected call of Services.
func (mr *MockAdminMockRecorder) Services() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockAdmin)(nil).Services))
}

// ServicesByName mocks base method.
func (m *MockAdmin) ServicesByName(name string) (*sdk.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesByName", name)
	ret0, _ := ret[0].(*sdk.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesByName indicates an expected call of ServicesByName.
func (mr *MockAdminMockRecorder) ServicesByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesByName", reflect.TypeOf((*MockAdmin)(nil).ServicesByName), name)
}

// ServicesByType mocks base method.
func (m *MockAdmin) ServicesByType(stype string) ([]sdk.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesByType", stype)
	ret0, _ := ret[0].([]sdk.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesByType indicates an expected call of ServicesByType.
func (mr *MockAdminMockRecorder) ServicesByType(stype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesByType", reflect.TypeOf((*MockAdmin)(nil).ServicesByType), stype)
}

// MockExportImportInterface is a mock of ExportImportInterface interface.
type MockExportImportInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExportImportInterfaceMockRecorder
}

// MockExportImportInterfaceMockRecorder is the mock recorder for MockExportImportInterface.
type MockExportImportInterfaceMockRecorder struct {
	mock *MockExportImportInterface
}

// NewMockExportImportInterface creates a new mock instance.
func NewMockExportImportInterface(ctrl *gomock.Controller) *MockExportImportInterface {
	mock := &MockExportImportInterface{ctrl: ctrl}
	mock.recorder = &MockExportImportInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportImportInterface) EXPECT() *MockExportImportInterfaceMockRecorder {
	return m.recorder
}

// ApplicationExport mocks base method.
func (m *MockExportImportInterface) ApplicationExport(projectKey, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationExport indicates an expected call of ApplicationExport.
func (mr *MockExportImportInterfaceMockRecorder) ApplicationExport(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationExport", reflect.TypeOf((*MockExportImportInterface)(nil).ApplicationExport), varargs...)
}

// ApplicationImport mocks base method.
func (m *MockExportImportInterface) ApplicationImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationImport", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationImport indicates an expected call of ApplicationImport.
func (mr *MockExportImportInterfaceMockRecorder) ApplicationImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationImport", reflect.TypeOf((*MockExportImportInterface)(nil).ApplicationImport), varargs...)
}

// PipelineExport mocks base method.
func (m *MockExportImportInterface) PipelineExport(projectKey, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineExport indicates an expected call of PipelineExport.
func (mr *MockExportImportInterfaceMockRecorder) PipelineExport(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineExport", reflect.TypeOf((*MockExportImportInterface)(nil).PipelineExport), varargs...)
}

// PipelineImport mocks base method.
func (m *MockExportImportInterface) PipelineImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineImport", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineImport indicates an expected call of PipelineImport.
func (mr *MockExportImportInterfaceMockRecorder) PipelineImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineImport", reflect.TypeOf((*MockExportImportInterface)(nil).PipelineImport), varargs...)
}

// WorkerModelExport mocks base method.
func (m *MockExportImportInterface) WorkerModelExport(groupName, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkerModelExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelExport indicates an expected call of WorkerModelExport.
func (mr *MockExportImportInterfaceMockRecorder) WorkerModelExport(groupName, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelExport", reflect.TypeOf((*MockExportImportInterface)(nil).WorkerModelExport), varargs...)
}

// WorkerModelImport mocks base method.
func (m *MockExportImportInterface) WorkerModelImport(content io.Reader, mods ...cdsclient.RequestModifier) (*sdk.Model, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkerModelImport", varargs...)
	ret0, _ := ret[0].(*sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelImport indicates an expected call of WorkerModelImport.
func (mr *MockExportImportInterfaceMockRecorder) WorkerModelImport(content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelImport", reflect.TypeOf((*MockExportImportInterface)(nil).WorkerModelImport), varargs...)
}

// WorkflowAsCodeInfo mocks base method.
func (m *MockExportImportInterface) WorkflowAsCodeInfo(projectKey, operationID string) (*sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsCodeInfo", projectKey, operationID)
	ret0, _ := ret[0].(*sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsCodeInfo indicates an expected call of WorkflowAsCodeInfo.
func (mr *MockExportImportInterfaceMockRecorder) WorkflowAsCodeInfo(projectKey, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsCodeInfo", reflect.TypeOf((*MockExportImportInterface)(nil).WorkflowAsCodeInfo), projectKey, operationID)
}

// WorkflowAsCodePerform mocks base method.
func (m *MockExportImportInterface) WorkflowAsCodePerform(projectKey, operationID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsCodePerform", projectKey, operationID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsCodePerform indicates an expected call of WorkflowAsCodePerform.
func (mr *MockExportImportInterfaceMockRecorder) WorkflowAsCodePerform(projectKey, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsCodePerform", reflect.TypeOf((*MockExportImportInterface)(nil).WorkflowAsCodePerform), projectKey, operationID)
}

// WorkflowAsCodeStart mocks base method.
func (m *MockExportImportInterface) WorkflowAsCodeStart(projectKey, repoURL string, repoStrategy sdk.RepositoryStrategy) (*sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsCodeStart", projectKey, repoURL, repoStrategy)
	ret0, _ := ret[0].(*sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsCodeStart indicates an expected call of WorkflowAsCodeStart.
func (mr *MockExportImportInterfaceMockRecorder) WorkflowAsCodeStart(projectKey, repoURL, repoStrategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsCodeStart", reflect.TypeOf((*MockExportImportInterface)(nil).WorkflowAsCodeStart), projectKey, repoURL, repoStrategy)
}

// WorkflowExport mocks base method.
func (m *MockExportImportInterface) WorkflowExport(projectKey, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowExport indicates an expected call of WorkflowExport.
func (mr *MockExportImportInterfaceMockRecorder) WorkflowExport(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowExport", reflect.TypeOf((*MockExportImportInterface)(nil).WorkflowExport), varargs...)
}

// WorkflowImport mocks base method.
func (m *MockExportImportInterface) WorkflowImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowImport", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowImport indicates an expected call of WorkflowImport.
func (mr *MockExportImportInterfaceMockRecorder) WorkflowImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowImport", reflect.TypeOf((*MockExportImportInterface)(nil).WorkflowImport), varargs...)
}

// WorkflowPull mocks base method.
func (m *MockExportImportInterface) WorkflowPull(projectKey, name string, mods ...cdsclient.RequestModifier) (*tar.Reader, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowPull", varargs...)
	ret0, _ := ret[0].(*tar.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowPull indicates an expected call of WorkflowPull.
func (mr *MockExportImportInterfaceMockRecorder) WorkflowPull(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowPull", reflect.TypeOf((*MockExportImportInterface)(nil).WorkflowPull), varargs...)
}

// WorkflowPush mocks base method.
func (m *MockExportImportInterface) WorkflowPush(projectKey string, tarContent io.Reader, mods ...cdsclient.RequestModifier) ([]string, *tar.Reader, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, tarContent}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowPush", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*tar.Reader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WorkflowPush indicates an expected call of WorkflowPush.
func (mr *MockExportImportInterfaceMockRecorder) WorkflowPush(projectKey, tarContent interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, tarContent}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowPush", reflect.TypeOf((*MockExportImportInterface)(nil).WorkflowPush), varargs...)
}

// MockWorkflowAsCodeInterface is a mock of WorkflowAsCodeInterface interface.
type MockWorkflowAsCodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowAsCodeInterfaceMockRecorder
}

// MockWorkflowAsCodeInterfaceMockRecorder is the mock recorder for MockWorkflowAsCodeInterface.
type MockWorkflowAsCodeInterfaceMockRecorder struct {
	mock *MockWorkflowAsCodeInterface
}

// NewMockWorkflowAsCodeInterface creates a new mock instance.
func NewMockWorkflowAsCodeInterface(ctrl *gomock.Controller) *MockWorkflowAsCodeInterface {
	mock := &MockWorkflowAsCodeInterface{ctrl: ctrl}
	mock.recorder = &MockWorkflowAsCodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowAsCodeInterface) EXPECT() *MockWorkflowAsCodeInterfaceMockRecorder {
	return m.recorder
}

// WorkflowAsCodeInfo mocks base method.
func (m *MockWorkflowAsCodeInterface) WorkflowAsCodeInfo(projectKey, operationID string) (*sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsCodeInfo", projectKey, operationID)
	ret0, _ := ret[0].(*sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsCodeInfo indicates an expected call of WorkflowAsCodeInfo.
func (mr *MockWorkflowAsCodeInterfaceMockRecorder) WorkflowAsCodeInfo(projectKey, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsCodeInfo", reflect.TypeOf((*MockWorkflowAsCodeInterface)(nil).WorkflowAsCodeInfo), projectKey, operationID)
}

// WorkflowAsCodePerform mocks base method.
func (m *MockWorkflowAsCodeInterface) WorkflowAsCodePerform(projectKey, operationID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsCodePerform", projectKey, operationID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsCodePerform indicates an expected call of WorkflowAsCodePerform.
func (mr *MockWorkflowAsCodeInterfaceMockRecorder) WorkflowAsCodePerform(projectKey, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsCodePerform", reflect.TypeOf((*MockWorkflowAsCodeInterface)(nil).WorkflowAsCodePerform), projectKey, operationID)
}

// WorkflowAsCodeStart mocks base method.
func (m *MockWorkflowAsCodeInterface) WorkflowAsCodeStart(projectKey, repoURL string, repoStrategy sdk.RepositoryStrategy) (*sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsCodeStart", projectKey, repoURL, repoStrategy)
	ret0, _ := ret[0].(*sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsCodeStart indicates an expected call of WorkflowAsCodeStart.
func (mr *MockWorkflowAsCodeInterfaceMockRecorder) WorkflowAsCodeStart(projectKey, repoURL, repoStrategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsCodeStart", reflect.TypeOf((*MockWorkflowAsCodeInterface)(nil).WorkflowAsCodeStart), projectKey, repoURL, repoStrategy)
}

// MockRepositoriesManagerInterface is a mock of RepositoriesManagerInterface interface.
type MockRepositoriesManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesManagerInterfaceMockRecorder
}

// MockRepositoriesManagerInterfaceMockRecorder is the mock recorder for MockRepositoriesManagerInterface.
type MockRepositoriesManagerInterfaceMockRecorder struct {
	mock *MockRepositoriesManagerInterface
}

// NewMockRepositoriesManagerInterface creates a new mock instance.
func NewMockRepositoriesManagerInterface(ctrl *gomock.Controller) *MockRepositoriesManagerInterface {
	mock := &MockRepositoriesManagerInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoriesManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoriesManagerInterface) EXPECT() *MockRepositoriesManagerInterfaceMockRecorder {
	return m.recorder
}

// RepositoriesList mocks base method.
func (m *MockRepositoriesManagerInterface) RepositoriesList(projectKey, repoManager string, resync bool) ([]sdk.VCSRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoriesList", projectKey, repoManager, resync)
	ret0, _ := ret[0].([]sdk.VCSRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoriesList indicates an expected call of RepositoriesList.
func (mr *MockRepositoriesManagerInterfaceMockRecorder) RepositoriesList(projectKey, repoManager, resync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoriesList", reflect.TypeOf((*MockRepositoriesManagerInterface)(nil).RepositoriesList), projectKey, repoManager, resync)
}

// MockApplicationClient is a mock of ApplicationClient interface.
type MockApplicationClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationClientMockRecorder
}

// MockApplicationClientMockRecorder is the mock recorder for MockApplicationClient.
type MockApplicationClientMockRecorder struct {
	mock *MockApplicationClient
}

// NewMockApplicationClient creates a new mock instance.
func NewMockApplicationClient(ctrl *gomock.Controller) *MockApplicationClient {
	mock := &MockApplicationClient{ctrl: ctrl}
	mock.recorder = &MockApplicationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationClient) EXPECT() *MockApplicationClientMockRecorder {
	return m.recorder
}

// ApplicationAttachToReposistoriesManager mocks base method.
func (m *MockApplicationClient) ApplicationAttachToReposistoriesManager(projectKey, appName, reposManager, repoFullname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationAttachToReposistoriesManager", projectKey, appName, reposManager, repoFullname)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationAttachToReposistoriesManager indicates an expected call of ApplicationAttachToReposistoriesManager.
func (mr *MockApplicationClientMockRecorder) ApplicationAttachToReposistoriesManager(projectKey, appName, reposManager, repoFullname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationAttachToReposistoriesManager", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationAttachToReposistoriesManager), projectKey, appName, reposManager, repoFullname)
}

// ApplicationCreate mocks base method.
func (m *MockApplicationClient) ApplicationCreate(projectKey string, app *sdk.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCreate", projectKey, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCreate indicates an expected call of ApplicationCreate.
func (mr *MockApplicationClientMockRecorder) ApplicationCreate(projectKey, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCreate", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationCreate), projectKey, app)
}

// ApplicationDelete mocks base method.
func (m *MockApplicationClient) ApplicationDelete(projectKey, appName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationDelete", projectKey, appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationDelete indicates an expected call of ApplicationDelete.
func (mr *MockApplicationClientMockRecorder) ApplicationDelete(projectKey, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationDelete", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationDelete), projectKey, appName)
}

// ApplicationGet mocks base method.
func (m *MockApplicationClient) ApplicationGet(projectKey, appName string, opts ...cdsclient.RequestModifier) (*sdk.Application, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, appName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationGet", varargs...)
	ret0, _ := ret[0].(*sdk.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationGet indicates an expected call of ApplicationGet.
func (mr *MockApplicationClientMockRecorder) ApplicationGet(projectKey, appName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, appName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGet", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationGet), varargs...)
}

// ApplicationKeyCreate mocks base method.
func (m *MockApplicationClient) ApplicationKeyCreate(projectKey, appName string, keyApp *sdk.ApplicationKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationKeyCreate", projectKey, appName, keyApp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationKeyCreate indicates an expected call of ApplicationKeyCreate.
func (mr *MockApplicationClientMockRecorder) ApplicationKeyCreate(projectKey, appName, keyApp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationKeyCreate", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationKeyCreate), projectKey, appName, keyApp)
}

// ApplicationKeysDelete mocks base method.
func (m *MockApplicationClient) ApplicationKeysDelete(projectKey, appName, KeyAppName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationKeysDelete", projectKey, appName, KeyAppName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationKeysDelete indicates an expected call of ApplicationKeysDelete.
func (mr *MockApplicationClientMockRecorder) ApplicationKeysDelete(projectKey, appName, KeyAppName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationKeysDelete", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationKeysDelete), projectKey, appName, KeyAppName)
}

// ApplicationKeysList mocks base method.
func (m *MockApplicationClient) ApplicationKeysList(projectKey, appName string) ([]sdk.ApplicationKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationKeysList", projectKey, appName)
	ret0, _ := ret[0].([]sdk.ApplicationKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationKeysList indicates an expected call of ApplicationKeysList.
func (mr *MockApplicationClientMockRecorder) ApplicationKeysList(projectKey, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationKeysList", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationKeysList), projectKey, appName)
}

// ApplicationList mocks base method.
func (m *MockApplicationClient) ApplicationList(projectKey string) ([]sdk.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationList", projectKey)
	ret0, _ := ret[0].([]sdk.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationList indicates an expected call of ApplicationList.
func (mr *MockApplicationClientMockRecorder) ApplicationList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationList", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationList), projectKey)
}

// ApplicationUpdate mocks base method.
func (m *MockApplicationClient) ApplicationUpdate(projectKey, appName string, app *sdk.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationUpdate", projectKey, appName, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationUpdate indicates an expected call of ApplicationUpdate.
func (mr *MockApplicationClientMockRecorder) ApplicationUpdate(projectKey, appName, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationUpdate", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationUpdate), projectKey, appName, app)
}

// ApplicationVariableCreate mocks base method.
func (m *MockApplicationClient) ApplicationVariableCreate(projectKey, appName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableCreate", projectKey, appName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationVariableCreate indicates an expected call of ApplicationVariableCreate.
func (mr *MockApplicationClientMockRecorder) ApplicationVariableCreate(projectKey, appName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableCreate", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationVariableCreate), projectKey, appName, variable)
}

// ApplicationVariableDelete mocks base method.
func (m *MockApplicationClient) ApplicationVariableDelete(projectKey, appName, varName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableDelete", projectKey, appName, varName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationVariableDelete indicates an expected call of ApplicationVariableDelete.
func (mr *MockApplicationClientMockRecorder) ApplicationVariableDelete(projectKey, appName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableDelete", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationVariableDelete), projectKey, appName, varName)
}

// ApplicationVariableGet mocks base method.
func (m *MockApplicationClient) ApplicationVariableGet(projectKey, appName, varName string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableGet", projectKey, appName, varName)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationVariableGet indicates an expected call of ApplicationVariableGet.
func (mr *MockApplicationClientMockRecorder) ApplicationVariableGet(projectKey, appName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableGet", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationVariableGet), projectKey, appName, varName)
}

// ApplicationVariableUpdate mocks base method.
func (m *MockApplicationClient) ApplicationVariableUpdate(projectKey, appName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableUpdate", projectKey, appName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationVariableUpdate indicates an expected call of ApplicationVariableUpdate.
func (mr *MockApplicationClientMockRecorder) ApplicationVariableUpdate(projectKey, appName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableUpdate", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationVariableUpdate), projectKey, appName, variable)
}

// ApplicationVariablesList mocks base method.
func (m *MockApplicationClient) ApplicationVariablesList(projectKey, appName string) ([]sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariablesList", projectKey, appName)
	ret0, _ := ret[0].([]sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationVariablesList indicates an expected call of ApplicationVariablesList.
func (mr *MockApplicationClientMockRecorder) ApplicationVariablesList(projectKey, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariablesList", reflect.TypeOf((*MockApplicationClient)(nil).ApplicationVariablesList), projectKey, appName)
}

// MockApplicationKeysClient is a mock of ApplicationKeysClient interface.
type MockApplicationKeysClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationKeysClientMockRecorder
}

// MockApplicationKeysClientMockRecorder is the mock recorder for MockApplicationKeysClient.
type MockApplicationKeysClientMockRecorder struct {
	mock *MockApplicationKeysClient
}

// NewMockApplicationKeysClient creates a new mock instance.
func NewMockApplicationKeysClient(ctrl *gomock.Controller) *MockApplicationKeysClient {
	mock := &MockApplicationKeysClient{ctrl: ctrl}
	mock.recorder = &MockApplicationKeysClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationKeysClient) EXPECT() *MockApplicationKeysClientMockRecorder {
	return m.recorder
}

// ApplicationKeyCreate mocks base method.
func (m *MockApplicationKeysClient) ApplicationKeyCreate(projectKey, appName string, keyApp *sdk.ApplicationKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationKeyCreate", projectKey, appName, keyApp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationKeyCreate indicates an expected call of ApplicationKeyCreate.
func (mr *MockApplicationKeysClientMockRecorder) ApplicationKeyCreate(projectKey, appName, keyApp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationKeyCreate", reflect.TypeOf((*MockApplicationKeysClient)(nil).ApplicationKeyCreate), projectKey, appName, keyApp)
}

// ApplicationKeysDelete mocks base method.
func (m *MockApplicationKeysClient) ApplicationKeysDelete(projectKey, appName, KeyAppName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationKeysDelete", projectKey, appName, KeyAppName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationKeysDelete indicates an expected call of ApplicationKeysDelete.
func (mr *MockApplicationKeysClientMockRecorder) ApplicationKeysDelete(projectKey, appName, KeyAppName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationKeysDelete", reflect.TypeOf((*MockApplicationKeysClient)(nil).ApplicationKeysDelete), projectKey, appName, KeyAppName)
}

// ApplicationKeysList mocks base method.
func (m *MockApplicationKeysClient) ApplicationKeysList(projectKey, appName string) ([]sdk.ApplicationKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationKeysList", projectKey, appName)
	ret0, _ := ret[0].([]sdk.ApplicationKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationKeysList indicates an expected call of ApplicationKeysList.
func (mr *MockApplicationKeysClientMockRecorder) ApplicationKeysList(projectKey, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationKeysList", reflect.TypeOf((*MockApplicationKeysClient)(nil).ApplicationKeysList), projectKey, appName)
}

// MockApplicationVariableClient is a mock of ApplicationVariableClient interface.
type MockApplicationVariableClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationVariableClientMockRecorder
}

// MockApplicationVariableClientMockRecorder is the mock recorder for MockApplicationVariableClient.
type MockApplicationVariableClientMockRecorder struct {
	mock *MockApplicationVariableClient
}

// NewMockApplicationVariableClient creates a new mock instance.
func NewMockApplicationVariableClient(ctrl *gomock.Controller) *MockApplicationVariableClient {
	mock := &MockApplicationVariableClient{ctrl: ctrl}
	mock.recorder = &MockApplicationVariableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationVariableClient) EXPECT() *MockApplicationVariableClientMockRecorder {
	return m.recorder
}

// ApplicationVariableCreate mocks base method.
func (m *MockApplicationVariableClient) ApplicationVariableCreate(projectKey, appName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableCreate", projectKey, appName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationVariableCreate indicates an expected call of ApplicationVariableCreate.
func (mr *MockApplicationVariableClientMockRecorder) ApplicationVariableCreate(projectKey, appName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableCreate", reflect.TypeOf((*MockApplicationVariableClient)(nil).ApplicationVariableCreate), projectKey, appName, variable)
}

// ApplicationVariableDelete mocks base method.
func (m *MockApplicationVariableClient) ApplicationVariableDelete(projectKey, appName, varName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableDelete", projectKey, appName, varName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationVariableDelete indicates an expected call of ApplicationVariableDelete.
func (mr *MockApplicationVariableClientMockRecorder) ApplicationVariableDelete(projectKey, appName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableDelete", reflect.TypeOf((*MockApplicationVariableClient)(nil).ApplicationVariableDelete), projectKey, appName, varName)
}

// ApplicationVariableGet mocks base method.
func (m *MockApplicationVariableClient) ApplicationVariableGet(projectKey, appName, varName string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableGet", projectKey, appName, varName)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationVariableGet indicates an expected call of ApplicationVariableGet.
func (mr *MockApplicationVariableClientMockRecorder) ApplicationVariableGet(projectKey, appName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableGet", reflect.TypeOf((*MockApplicationVariableClient)(nil).ApplicationVariableGet), projectKey, appName, varName)
}

// ApplicationVariableUpdate mocks base method.
func (m *MockApplicationVariableClient) ApplicationVariableUpdate(projectKey, appName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableUpdate", projectKey, appName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationVariableUpdate indicates an expected call of ApplicationVariableUpdate.
func (mr *MockApplicationVariableClientMockRecorder) ApplicationVariableUpdate(projectKey, appName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableUpdate", reflect.TypeOf((*MockApplicationVariableClient)(nil).ApplicationVariableUpdate), projectKey, appName, variable)
}

// ApplicationVariablesList mocks base method.
func (m *MockApplicationVariableClient) ApplicationVariablesList(projectKey, appName string) ([]sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariablesList", projectKey, appName)
	ret0, _ := ret[0].([]sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationVariablesList indicates an expected call of ApplicationVariablesList.
func (mr *MockApplicationVariableClientMockRecorder) ApplicationVariablesList(projectKey, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariablesList", reflect.TypeOf((*MockApplicationVariableClient)(nil).ApplicationVariablesList), projectKey, appName)
}

// MockEnvironmentClient is a mock of EnvironmentClient interface.
type MockEnvironmentClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentClientMockRecorder
}

// MockEnvironmentClientMockRecorder is the mock recorder for MockEnvironmentClient.
type MockEnvironmentClientMockRecorder struct {
	mock *MockEnvironmentClient
}

// NewMockEnvironmentClient creates a new mock instance.
func NewMockEnvironmentClient(ctrl *gomock.Controller) *MockEnvironmentClient {
	mock := &MockEnvironmentClient{ctrl: ctrl}
	mock.recorder = &MockEnvironmentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentClient) EXPECT() *MockEnvironmentClientMockRecorder {
	return m.recorder
}

// EnvironmentCreate mocks base method.
func (m *MockEnvironmentClient) EnvironmentCreate(projectKey string, env *sdk.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentCreate", projectKey, env)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentCreate indicates an expected call of EnvironmentCreate.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentCreate(projectKey, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentCreate", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentCreate), projectKey, env)
}

// EnvironmentDelete mocks base method.
func (m *MockEnvironmentClient) EnvironmentDelete(projectKey, envName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentDelete", projectKey, envName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentDelete indicates an expected call of EnvironmentDelete.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentDelete(projectKey, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentDelete", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentDelete), projectKey, envName)
}

// EnvironmentExport mocks base method.
func (m *MockEnvironmentClient) EnvironmentExport(projectKey, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnvironmentExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentExport indicates an expected call of EnvironmentExport.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentExport(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentExport", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentExport), varargs...)
}

// EnvironmentGet mocks base method.
func (m *MockEnvironmentClient) EnvironmentGet(projectKey, envName string, opts ...cdsclient.RequestModifier) (*sdk.Environment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, envName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnvironmentGet", varargs...)
	ret0, _ := ret[0].(*sdk.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentGet indicates an expected call of EnvironmentGet.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentGet(projectKey, envName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, envName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentGet", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentGet), varargs...)
}

// EnvironmentImport mocks base method.
func (m *MockEnvironmentClient) EnvironmentImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnvironmentImport", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentImport indicates an expected call of EnvironmentImport.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentImport", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentImport), varargs...)
}

// EnvironmentKeyCreate mocks base method.
func (m *MockEnvironmentClient) EnvironmentKeyCreate(projectKey, envName string, keyEnv *sdk.EnvironmentKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentKeyCreate", projectKey, envName, keyEnv)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentKeyCreate indicates an expected call of EnvironmentKeyCreate.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentKeyCreate(projectKey, envName, keyEnv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentKeyCreate", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentKeyCreate), projectKey, envName, keyEnv)
}

// EnvironmentKeysDelete mocks base method.
func (m *MockEnvironmentClient) EnvironmentKeysDelete(projectKey, envName, keyEnvName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentKeysDelete", projectKey, envName, keyEnvName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentKeysDelete indicates an expected call of EnvironmentKeysDelete.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentKeysDelete(projectKey, envName, keyEnvName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentKeysDelete", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentKeysDelete), projectKey, envName, keyEnvName)
}

// EnvironmentKeysList mocks base method.
func (m *MockEnvironmentClient) EnvironmentKeysList(projectKey, envName string) ([]sdk.EnvironmentKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentKeysList", projectKey, envName)
	ret0, _ := ret[0].([]sdk.EnvironmentKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentKeysList indicates an expected call of EnvironmentKeysList.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentKeysList(projectKey, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentKeysList", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentKeysList), projectKey, envName)
}

// EnvironmentList mocks base method.
func (m *MockEnvironmentClient) EnvironmentList(projectKey string) ([]sdk.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentList", projectKey)
	ret0, _ := ret[0].([]sdk.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentList indicates an expected call of EnvironmentList.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentList", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentList), projectKey)
}

// EnvironmentVariableCreate mocks base method.
func (m *MockEnvironmentClient) EnvironmentVariableCreate(projectKey, envName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableCreate", projectKey, envName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentVariableCreate indicates an expected call of EnvironmentVariableCreate.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentVariableCreate(projectKey, envName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableCreate", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentVariableCreate), projectKey, envName, variable)
}

// EnvironmentVariableDelete mocks base method.
func (m *MockEnvironmentClient) EnvironmentVariableDelete(projectKey, envName, varName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableDelete", projectKey, envName, varName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentVariableDelete indicates an expected call of EnvironmentVariableDelete.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentVariableDelete(projectKey, envName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableDelete", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentVariableDelete), projectKey, envName, varName)
}

// EnvironmentVariableGet mocks base method.
func (m *MockEnvironmentClient) EnvironmentVariableGet(projectKey, envName, varName string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableGet", projectKey, envName, varName)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentVariableGet indicates an expected call of EnvironmentVariableGet.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentVariableGet(projectKey, envName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableGet", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentVariableGet), projectKey, envName, varName)
}

// EnvironmentVariableUpdate mocks base method.
func (m *MockEnvironmentClient) EnvironmentVariableUpdate(projectKey, envName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableUpdate", projectKey, envName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentVariableUpdate indicates an expected call of EnvironmentVariableUpdate.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentVariableUpdate(projectKey, envName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableUpdate", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentVariableUpdate), projectKey, envName, variable)
}

// EnvironmentVariablesList mocks base method.
func (m *MockEnvironmentClient) EnvironmentVariablesList(key, envName string) ([]sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariablesList", key, envName)
	ret0, _ := ret[0].([]sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentVariablesList indicates an expected call of EnvironmentVariablesList.
func (mr *MockEnvironmentClientMockRecorder) EnvironmentVariablesList(key, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariablesList", reflect.TypeOf((*MockEnvironmentClient)(nil).EnvironmentVariablesList), key, envName)
}

// MockEnvironmentKeysClient is a mock of EnvironmentKeysClient interface.
type MockEnvironmentKeysClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentKeysClientMockRecorder
}

// MockEnvironmentKeysClientMockRecorder is the mock recorder for MockEnvironmentKeysClient.
type MockEnvironmentKeysClientMockRecorder struct {
	mock *MockEnvironmentKeysClient
}

// NewMockEnvironmentKeysClient creates a new mock instance.
func NewMockEnvironmentKeysClient(ctrl *gomock.Controller) *MockEnvironmentKeysClient {
	mock := &MockEnvironmentKeysClient{ctrl: ctrl}
	mock.recorder = &MockEnvironmentKeysClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentKeysClient) EXPECT() *MockEnvironmentKeysClientMockRecorder {
	return m.recorder
}

// EnvironmentKeyCreate mocks base method.
func (m *MockEnvironmentKeysClient) EnvironmentKeyCreate(projectKey, envName string, keyEnv *sdk.EnvironmentKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentKeyCreate", projectKey, envName, keyEnv)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentKeyCreate indicates an expected call of EnvironmentKeyCreate.
func (mr *MockEnvironmentKeysClientMockRecorder) EnvironmentKeyCreate(projectKey, envName, keyEnv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentKeyCreate", reflect.TypeOf((*MockEnvironmentKeysClient)(nil).EnvironmentKeyCreate), projectKey, envName, keyEnv)
}

// EnvironmentKeysDelete mocks base method.
func (m *MockEnvironmentKeysClient) EnvironmentKeysDelete(projectKey, envName, keyEnvName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentKeysDelete", projectKey, envName, keyEnvName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentKeysDelete indicates an expected call of EnvironmentKeysDelete.
func (mr *MockEnvironmentKeysClientMockRecorder) EnvironmentKeysDelete(projectKey, envName, keyEnvName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentKeysDelete", reflect.TypeOf((*MockEnvironmentKeysClient)(nil).EnvironmentKeysDelete), projectKey, envName, keyEnvName)
}

// EnvironmentKeysList mocks base method.
func (m *MockEnvironmentKeysClient) EnvironmentKeysList(projectKey, envName string) ([]sdk.EnvironmentKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentKeysList", projectKey, envName)
	ret0, _ := ret[0].([]sdk.EnvironmentKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentKeysList indicates an expected call of EnvironmentKeysList.
func (mr *MockEnvironmentKeysClientMockRecorder) EnvironmentKeysList(projectKey, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentKeysList", reflect.TypeOf((*MockEnvironmentKeysClient)(nil).EnvironmentKeysList), projectKey, envName)
}

// MockEnvironmentVariableClient is a mock of EnvironmentVariableClient interface.
type MockEnvironmentVariableClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentVariableClientMockRecorder
}

// MockEnvironmentVariableClientMockRecorder is the mock recorder for MockEnvironmentVariableClient.
type MockEnvironmentVariableClientMockRecorder struct {
	mock *MockEnvironmentVariableClient
}

// NewMockEnvironmentVariableClient creates a new mock instance.
func NewMockEnvironmentVariableClient(ctrl *gomock.Controller) *MockEnvironmentVariableClient {
	mock := &MockEnvironmentVariableClient{ctrl: ctrl}
	mock.recorder = &MockEnvironmentVariableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentVariableClient) EXPECT() *MockEnvironmentVariableClientMockRecorder {
	return m.recorder
}

// EnvironmentVariableCreate mocks base method.
func (m *MockEnvironmentVariableClient) EnvironmentVariableCreate(projectKey, envName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableCreate", projectKey, envName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentVariableCreate indicates an expected call of EnvironmentVariableCreate.
func (mr *MockEnvironmentVariableClientMockRecorder) EnvironmentVariableCreate(projectKey, envName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableCreate", reflect.TypeOf((*MockEnvironmentVariableClient)(nil).EnvironmentVariableCreate), projectKey, envName, variable)
}

// EnvironmentVariableDelete mocks base method.
func (m *MockEnvironmentVariableClient) EnvironmentVariableDelete(projectKey, envName, varName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableDelete", projectKey, envName, varName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentVariableDelete indicates an expected call of EnvironmentVariableDelete.
func (mr *MockEnvironmentVariableClientMockRecorder) EnvironmentVariableDelete(projectKey, envName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableDelete", reflect.TypeOf((*MockEnvironmentVariableClient)(nil).EnvironmentVariableDelete), projectKey, envName, varName)
}

// EnvironmentVariableGet mocks base method.
func (m *MockEnvironmentVariableClient) EnvironmentVariableGet(projectKey, envName, varName string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableGet", projectKey, envName, varName)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentVariableGet indicates an expected call of EnvironmentVariableGet.
func (mr *MockEnvironmentVariableClientMockRecorder) EnvironmentVariableGet(projectKey, envName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableGet", reflect.TypeOf((*MockEnvironmentVariableClient)(nil).EnvironmentVariableGet), projectKey, envName, varName)
}

// EnvironmentVariableUpdate mocks base method.
func (m *MockEnvironmentVariableClient) EnvironmentVariableUpdate(projectKey, envName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableUpdate", projectKey, envName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentVariableUpdate indicates an expected call of EnvironmentVariableUpdate.
func (mr *MockEnvironmentVariableClientMockRecorder) EnvironmentVariableUpdate(projectKey, envName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableUpdate", reflect.TypeOf((*MockEnvironmentVariableClient)(nil).EnvironmentVariableUpdate), projectKey, envName, variable)
}

// EnvironmentVariablesList mocks base method.
func (m *MockEnvironmentVariableClient) EnvironmentVariablesList(key, envName string) ([]sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariablesList", key, envName)
	ret0, _ := ret[0].([]sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentVariablesList indicates an expected call of EnvironmentVariablesList.
func (mr *MockEnvironmentVariableClientMockRecorder) EnvironmentVariablesList(key, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariablesList", reflect.TypeOf((*MockEnvironmentVariableClient)(nil).EnvironmentVariablesList), key, envName)
}

// MockEventsClient is a mock of EventsClient interface.
type MockEventsClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventsClientMockRecorder
}

// MockEventsClientMockRecorder is the mock recorder for MockEventsClient.
type MockEventsClientMockRecorder struct {
	mock *MockEventsClient
}

// NewMockEventsClient creates a new mock instance.
func NewMockEventsClient(ctrl *gomock.Controller) *MockEventsClient {
	mock := &MockEventsClient{ctrl: ctrl}
	mock.recorder = &MockEventsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsClient) EXPECT() *MockEventsClientMockRecorder {
	return m.recorder
}

// WebsocketEventsListen mocks base method.
func (m *MockEventsClient) WebsocketEventsListen(ctx context.Context, goRoutines *sdk.GoRoutines, chanMsgToSend <-chan []sdk.WebsocketFilter, chanMsgReceived chan<- sdk.WebsocketEvent, chanErrorReceived chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WebsocketEventsListen", ctx, goRoutines, chanMsgToSend, chanMsgReceived, chanErrorReceived)
}

// WebsocketEventsListen indicates an expected call of WebsocketEventsListen.
func (mr *MockEventsClientMockRecorder) WebsocketEventsListen(ctx, goRoutines, chanMsgToSend, chanMsgReceived, chanErrorReceived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebsocketEventsListen", reflect.TypeOf((*MockEventsClient)(nil).WebsocketEventsListen), ctx, goRoutines, chanMsgToSend, chanMsgReceived, chanErrorReceived)
}

// MockDownloadClient is a mock of DownloadClient interface.
type MockDownloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadClientMockRecorder
}

// MockDownloadClientMockRecorder is the mock recorder for MockDownloadClient.
type MockDownloadClientMockRecorder struct {
	mock *MockDownloadClient
}

// NewMockDownloadClient creates a new mock instance.
func NewMockDownloadClient(ctrl *gomock.Controller) *MockDownloadClient {
	mock := &MockDownloadClient{ctrl: ctrl}
	mock.recorder = &MockDownloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadClient) EXPECT() *MockDownloadClientMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockDownloadClient) Download() ([]sdk.DownloadableResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download")
	ret0, _ := ret[0].([]sdk.DownloadableResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockDownloadClientMockRecorder) Download() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloadClient)(nil).Download))
}

// DownloadURLFromAPI mocks base method.
func (m *MockDownloadClient) DownloadURLFromAPI(name, os, arch, variant string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadURLFromAPI", name, os, arch, variant)
	ret0, _ := ret[0].(string)
	return ret0
}

// DownloadURLFromAPI indicates an expected call of DownloadURLFromAPI.
func (mr *MockDownloadClientMockRecorder) DownloadURLFromAPI(name, os, arch, variant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadURLFromAPI", reflect.TypeOf((*MockDownloadClient)(nil).DownloadURLFromAPI), name, os, arch, variant)
}

// MockActionClient is a mock of ActionClient interface.
type MockActionClient struct {
	ctrl     *gomock.Controller
	recorder *MockActionClientMockRecorder
}

// MockActionClientMockRecorder is the mock recorder for MockActionClient.
type MockActionClientMockRecorder struct {
	mock *MockActionClient
}

// NewMockActionClient creates a new mock instance.
func NewMockActionClient(ctrl *gomock.Controller) *MockActionClient {
	mock := &MockActionClient{ctrl: ctrl}
	mock.recorder = &MockActionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionClient) EXPECT() *MockActionClientMockRecorder {
	return m.recorder
}

// ActionBuiltinGet mocks base method.
func (m *MockActionClient) ActionBuiltinGet(name string, mods ...cdsclient.RequestModifier) (*sdk.Action, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionBuiltinGet", varargs...)
	ret0, _ := ret[0].(*sdk.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionBuiltinGet indicates an expected call of ActionBuiltinGet.
func (mr *MockActionClientMockRecorder) ActionBuiltinGet(name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionBuiltinGet", reflect.TypeOf((*MockActionClient)(nil).ActionBuiltinGet), varargs...)
}

// ActionBuiltinList mocks base method.
func (m *MockActionClient) ActionBuiltinList() ([]sdk.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionBuiltinList")
	ret0, _ := ret[0].([]sdk.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionBuiltinList indicates an expected call of ActionBuiltinList.
func (mr *MockActionClientMockRecorder) ActionBuiltinList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionBuiltinList", reflect.TypeOf((*MockActionClient)(nil).ActionBuiltinList))
}

// ActionDelete mocks base method.
func (m *MockActionClient) ActionDelete(groupName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionDelete", groupName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionDelete indicates an expected call of ActionDelete.
func (mr *MockActionClientMockRecorder) ActionDelete(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionDelete", reflect.TypeOf((*MockActionClient)(nil).ActionDelete), groupName, name)
}

// ActionExport mocks base method.
func (m *MockActionClient) ActionExport(groupName, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionExport indicates an expected call of ActionExport.
func (mr *MockActionClientMockRecorder) ActionExport(groupName, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionExport", reflect.TypeOf((*MockActionClient)(nil).ActionExport), varargs...)
}

// ActionGet mocks base method.
func (m *MockActionClient) ActionGet(groupName, name string, mods ...cdsclient.RequestModifier) (*sdk.Action, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionGet", varargs...)
	ret0, _ := ret[0].(*sdk.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionGet indicates an expected call of ActionGet.
func (mr *MockActionClientMockRecorder) ActionGet(groupName, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionGet", reflect.TypeOf((*MockActionClient)(nil).ActionGet), varargs...)
}

// ActionImport mocks base method.
func (m *MockActionClient) ActionImport(content io.Reader, mods ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionImport", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionImport indicates an expected call of ActionImport.
func (mr *MockActionClientMockRecorder) ActionImport(content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionImport", reflect.TypeOf((*MockActionClient)(nil).ActionImport), varargs...)
}

// ActionList mocks base method.
func (m *MockActionClient) ActionList() ([]sdk.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionList")
	ret0, _ := ret[0].([]sdk.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionList indicates an expected call of ActionList.
func (mr *MockActionClientMockRecorder) ActionList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionList", reflect.TypeOf((*MockActionClient)(nil).ActionList))
}

// ActionUsage mocks base method.
func (m *MockActionClient) ActionUsage(groupName, name string, mods ...cdsclient.RequestModifier) (*sdk.ActionUsages, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionUsage", varargs...)
	ret0, _ := ret[0].(*sdk.ActionUsages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionUsage indicates an expected call of ActionUsage.
func (mr *MockActionClientMockRecorder) ActionUsage(groupName, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionUsage", reflect.TypeOf((*MockActionClient)(nil).ActionUsage), varargs...)
}

// MockGroupClient is a mock of GroupClient interface.
type MockGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockGroupClientMockRecorder
}

// MockGroupClientMockRecorder is the mock recorder for MockGroupClient.
type MockGroupClientMockRecorder struct {
	mock *MockGroupClient
}

// NewMockGroupClient creates a new mock instance.
func NewMockGroupClient(ctrl *gomock.Controller) *MockGroupClient {
	mock := &MockGroupClient{ctrl: ctrl}
	mock.recorder = &MockGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupClient) EXPECT() *MockGroupClientMockRecorder {
	return m.recorder
}

// GroupCreate mocks base method.
func (m *MockGroupClient) GroupCreate(group *sdk.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCreate", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupCreate indicates an expected call of GroupCreate.
func (mr *MockGroupClientMockRecorder) GroupCreate(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreate", reflect.TypeOf((*MockGroupClient)(nil).GroupCreate), group)
}

// GroupDelete mocks base method.
func (m *MockGroupClient) GroupDelete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupDelete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupDelete indicates an expected call of GroupDelete.
func (mr *MockGroupClientMockRecorder) GroupDelete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupDelete", reflect.TypeOf((*MockGroupClient)(nil).GroupDelete), name)
}

// GroupGet mocks base method.
func (m *MockGroupClient) GroupGet(name string, mods ...cdsclient.RequestModifier) (*sdk.Group, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupGet", varargs...)
	ret0, _ := ret[0].(*sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupGet indicates an expected call of GroupGet.
func (mr *MockGroupClientMockRecorder) GroupGet(name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupGet", reflect.TypeOf((*MockGroupClient)(nil).GroupGet), varargs...)
}

// GroupList mocks base method.
func (m *MockGroupClient) GroupList() ([]sdk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupList")
	ret0, _ := ret[0].([]sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupList indicates an expected call of GroupList.
func (mr *MockGroupClientMockRecorder) GroupList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupList", reflect.TypeOf((*MockGroupClient)(nil).GroupList))
}

// GroupMemberAdd mocks base method.
func (m *MockGroupClient) GroupMemberAdd(groupName string, member *sdk.GroupMember) (sdk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMemberAdd", groupName, member)
	ret0, _ := ret[0].(sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupMemberAdd indicates an expected call of GroupMemberAdd.
func (mr *MockGroupClientMockRecorder) GroupMemberAdd(groupName, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMemberAdd", reflect.TypeOf((*MockGroupClient)(nil).GroupMemberAdd), groupName, member)
}

// GroupMemberEdit mocks base method.
func (m *MockGroupClient) GroupMemberEdit(groupName string, member *sdk.GroupMember) (sdk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMemberEdit", groupName, member)
	ret0, _ := ret[0].(sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupMemberEdit indicates an expected call of GroupMemberEdit.
func (mr *MockGroupClientMockRecorder) GroupMemberEdit(groupName, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMemberEdit", reflect.TypeOf((*MockGroupClient)(nil).GroupMemberEdit), groupName, member)
}

// GroupMemberRemove mocks base method.
func (m *MockGroupClient) GroupMemberRemove(groupName, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMemberRemove", groupName, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupMemberRemove indicates an expected call of GroupMemberRemove.
func (mr *MockGroupClientMockRecorder) GroupMemberRemove(groupName, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMemberRemove", reflect.TypeOf((*MockGroupClient)(nil).GroupMemberRemove), groupName, username)
}

// GroupRename mocks base method.
func (m *MockGroupClient) GroupRename(oldName, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRename", oldName, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupRename indicates an expected call of GroupRename.
func (mr *MockGroupClientMockRecorder) GroupRename(oldName, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRename", reflect.TypeOf((*MockGroupClient)(nil).GroupRename), oldName, newName)
}

// MockPipelineClient is a mock of PipelineClient interface.
type MockPipelineClient struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineClientMockRecorder
}

// MockPipelineClientMockRecorder is the mock recorder for MockPipelineClient.
type MockPipelineClientMockRecorder struct {
	mock *MockPipelineClient
}

// NewMockPipelineClient creates a new mock instance.
func NewMockPipelineClient(ctrl *gomock.Controller) *MockPipelineClient {
	mock := &MockPipelineClient{ctrl: ctrl}
	mock.recorder = &MockPipelineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineClient) EXPECT() *MockPipelineClientMockRecorder {
	return m.recorder
}

// PipelineCreate mocks base method.
func (m *MockPipelineClient) PipelineCreate(projectKey string, pip *sdk.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineCreate", projectKey, pip)
	ret0, _ := ret[0].(error)
	return ret0
}

// PipelineCreate indicates an expected call of PipelineCreate.
func (mr *MockPipelineClientMockRecorder) PipelineCreate(projectKey, pip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCreate", reflect.TypeOf((*MockPipelineClient)(nil).PipelineCreate), projectKey, pip)
}

// PipelineDelete mocks base method.
func (m *MockPipelineClient) PipelineDelete(projectKey, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineDelete", projectKey, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// PipelineDelete indicates an expected call of PipelineDelete.
func (mr *MockPipelineClientMockRecorder) PipelineDelete(projectKey, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineDelete", reflect.TypeOf((*MockPipelineClient)(nil).PipelineDelete), projectKey, name)
}

// PipelineGet mocks base method.
func (m *MockPipelineClient) PipelineGet(projectKey, name string, mods ...cdsclient.RequestModifier) (*sdk.Pipeline, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineGet", varargs...)
	ret0, _ := ret[0].(*sdk.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineGet indicates an expected call of PipelineGet.
func (mr *MockPipelineClientMockRecorder) PipelineGet(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineGet", reflect.TypeOf((*MockPipelineClient)(nil).PipelineGet), varargs...)
}

// PipelineList mocks base method.
func (m *MockPipelineClient) PipelineList(projectKey string) ([]sdk.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineList", projectKey)
	ret0, _ := ret[0].([]sdk.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineList indicates an expected call of PipelineList.
func (mr *MockPipelineClientMockRecorder) PipelineList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineList", reflect.TypeOf((*MockPipelineClient)(nil).PipelineList), projectKey)
}

// MockMaintenanceClient is a mock of MaintenanceClient interface.
type MockMaintenanceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMaintenanceClientMockRecorder
}

// MockMaintenanceClientMockRecorder is the mock recorder for MockMaintenanceClient.
type MockMaintenanceClientMockRecorder struct {
	mock *MockMaintenanceClient
}

// NewMockMaintenanceClient creates a new mock instance.
func NewMockMaintenanceClient(ctrl *gomock.Controller) *MockMaintenanceClient {
	mock := &MockMaintenanceClient{ctrl: ctrl}
	mock.recorder = &MockMaintenanceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMaintenanceClient) EXPECT() *MockMaintenanceClientMockRecorder {
	return m.recorder
}

// Maintenance mocks base method.
func (m *MockMaintenanceClient) Maintenance(enable, hooks bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Maintenance", enable, hooks)
	ret0, _ := ret[0].(error)
	return ret0
}

// Maintenance indicates an expected call of Maintenance.
func (mr *MockMaintenanceClientMockRecorder) Maintenance(enable, hooks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Maintenance", reflect.TypeOf((*MockMaintenanceClient)(nil).Maintenance), enable, hooks)
}

// MockOrganizationClient is a mock of OrganizationClient interface.
type MockOrganizationClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationClientMockRecorder
}

// MockOrganizationClientMockRecorder is the mock recorder for MockOrganizationClient.
type MockOrganizationClientMockRecorder struct {
	mock *MockOrganizationClient
}

// NewMockOrganizationClient creates a new mock instance.
func NewMockOrganizationClient(ctrl *gomock.Controller) *MockOrganizationClient {
	mock := &MockOrganizationClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationClient) EXPECT() *MockOrganizationClientMockRecorder {
	return m.recorder
}

// OrganizationAdd mocks base method.
func (m *MockOrganizationClient) OrganizationAdd(ctx context.Context, organization sdk.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationAdd", ctx, organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrganizationAdd indicates an expected call of OrganizationAdd.
func (mr *MockOrganizationClientMockRecorder) OrganizationAdd(ctx, organization interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationAdd", reflect.TypeOf((*MockOrganizationClient)(nil).OrganizationAdd), ctx, organization)
}

// OrganizationDelete mocks base method.
func (m *MockOrganizationClient) OrganizationDelete(ctx context.Context, organizationIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationDelete", ctx, organizationIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrganizationDelete indicates an expected call of OrganizationDelete.
func (mr *MockOrganizationClientMockRecorder) OrganizationDelete(ctx, organizationIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationDelete", reflect.TypeOf((*MockOrganizationClient)(nil).OrganizationDelete), ctx, organizationIdentifier)
}

// OrganizationGet mocks base method.
func (m *MockOrganizationClient) OrganizationGet(ctx context.Context, organizationIdentifier string) (sdk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationGet", ctx, organizationIdentifier)
	ret0, _ := ret[0].(sdk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationGet indicates an expected call of OrganizationGet.
func (mr *MockOrganizationClientMockRecorder) OrganizationGet(ctx, organizationIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationGet", reflect.TypeOf((*MockOrganizationClient)(nil).OrganizationGet), ctx, organizationIdentifier)
}

// OrganizationList mocks base method.
func (m *MockOrganizationClient) OrganizationList(ctx context.Context) ([]sdk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationList", ctx)
	ret0, _ := ret[0].([]sdk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationList indicates an expected call of OrganizationList.
func (mr *MockOrganizationClientMockRecorder) OrganizationList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationList", reflect.TypeOf((*MockOrganizationClient)(nil).OrganizationList), ctx)
}

// MockRegionClient is a mock of RegionClient interface.
type MockRegionClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegionClientMockRecorder
}

// MockRegionClientMockRecorder is the mock recorder for MockRegionClient.
type MockRegionClientMockRecorder struct {
	mock *MockRegionClient
}

// NewMockRegionClient creates a new mock instance.
func NewMockRegionClient(ctrl *gomock.Controller) *MockRegionClient {
	mock := &MockRegionClient{ctrl: ctrl}
	mock.recorder = &MockRegionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionClient) EXPECT() *MockRegionClientMockRecorder {
	return m.recorder
}

// RegionAdd mocks base method.
func (m *MockRegionClient) RegionAdd(ctx context.Context, region sdk.Region) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionAdd", ctx, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegionAdd indicates an expected call of RegionAdd.
func (mr *MockRegionClientMockRecorder) RegionAdd(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionAdd", reflect.TypeOf((*MockRegionClient)(nil).RegionAdd), ctx, region)
}

// RegionDelete mocks base method.
func (m *MockRegionClient) RegionDelete(ctx context.Context, regionIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionDelete", ctx, regionIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegionDelete indicates an expected call of RegionDelete.
func (mr *MockRegionClientMockRecorder) RegionDelete(ctx, regionIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionDelete", reflect.TypeOf((*MockRegionClient)(nil).RegionDelete), ctx, regionIdentifier)
}

// RegionGet mocks base method.
func (m *MockRegionClient) RegionGet(ctx context.Context, regionIdentifier string) (sdk.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionGet", ctx, regionIdentifier)
	ret0, _ := ret[0].(sdk.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionGet indicates an expected call of RegionGet.
func (mr *MockRegionClientMockRecorder) RegionGet(ctx, regionIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionGet", reflect.TypeOf((*MockRegionClient)(nil).RegionGet), ctx, regionIdentifier)
}

// RegionList mocks base method.
func (m *MockRegionClient) RegionList(ctx context.Context) ([]sdk.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionList", ctx)
	ret0, _ := ret[0].([]sdk.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionList indicates an expected call of RegionList.
func (mr *MockRegionClientMockRecorder) RegionList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionList", reflect.TypeOf((*MockRegionClient)(nil).RegionList), ctx)
}

// MockHatcheryClient is a mock of HatcheryClient interface.
type MockHatcheryClient struct {
	ctrl     *gomock.Controller
	recorder *MockHatcheryClientMockRecorder
}

// MockHatcheryClientMockRecorder is the mock recorder for MockHatcheryClient.
type MockHatcheryClientMockRecorder struct {
	mock *MockHatcheryClient
}

// NewMockHatcheryClient creates a new mock instance.
func NewMockHatcheryClient(ctrl *gomock.Controller) *MockHatcheryClient {
	mock := &MockHatcheryClient{ctrl: ctrl}
	mock.recorder = &MockHatcheryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHatcheryClient) EXPECT() *MockHatcheryClientMockRecorder {
	return m.recorder
}

// HatcheryAdd mocks base method.
func (m *MockHatcheryClient) HatcheryAdd(ctx context.Context, h *sdk.Hatchery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HatcheryAdd", ctx, h)
	ret0, _ := ret[0].(error)
	return ret0
}

// HatcheryAdd indicates an expected call of HatcheryAdd.
func (mr *MockHatcheryClientMockRecorder) HatcheryAdd(ctx, h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HatcheryAdd", reflect.TypeOf((*MockHatcheryClient)(nil).HatcheryAdd), ctx, h)
}

// HatcheryDelete mocks base method.
func (m *MockHatcheryClient) HatcheryDelete(ctx context.Context, hatcheryIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HatcheryDelete", ctx, hatcheryIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// HatcheryDelete indicates an expected call of HatcheryDelete.
func (mr *MockHatcheryClientMockRecorder) HatcheryDelete(ctx, hatcheryIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HatcheryDelete", reflect.TypeOf((*MockHatcheryClient)(nil).HatcheryDelete), ctx, hatcheryIdentifier)
}

// HatcheryGet mocks base method.
func (m *MockHatcheryClient) HatcheryGet(ctx context.Context, hatcheryIdentifier string) (sdk.Hatchery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HatcheryGet", ctx, hatcheryIdentifier)
	ret0, _ := ret[0].(sdk.Hatchery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HatcheryGet indicates an expected call of HatcheryGet.
func (mr *MockHatcheryClientMockRecorder) HatcheryGet(ctx, hatcheryIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HatcheryGet", reflect.TypeOf((*MockHatcheryClient)(nil).HatcheryGet), ctx, hatcheryIdentifier)
}

// HatcheryList mocks base method.
func (m *MockHatcheryClient) HatcheryList(ctx context.Context) ([]sdk.Hatchery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HatcheryList", ctx)
	ret0, _ := ret[0].([]sdk.Hatchery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HatcheryList indicates an expected call of HatcheryList.
func (mr *MockHatcheryClientMockRecorder) HatcheryList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HatcheryList", reflect.TypeOf((*MockHatcheryClient)(nil).HatcheryList), ctx)
}

// MockHatcheryServiceClient is a mock of HatcheryServiceClient interface.
type MockHatcheryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHatcheryServiceClientMockRecorder
}

// MockHatcheryServiceClientMockRecorder is the mock recorder for MockHatcheryServiceClient.
type MockHatcheryServiceClientMockRecorder struct {
	mock *MockHatcheryServiceClient
}

// NewMockHatcheryServiceClient creates a new mock instance.
func NewMockHatcheryServiceClient(ctrl *gomock.Controller) *MockHatcheryServiceClient {
	mock := &MockHatcheryServiceClient{ctrl: ctrl}
	mock.recorder = &MockHatcheryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHatcheryServiceClient) EXPECT() *MockHatcheryServiceClientMockRecorder {
	return m.recorder
}

// EntityGet mocks base method.
func (m *MockHatcheryServiceClient) EntityGet(ctx context.Context, projKey, vcsIdentifier, repoIdentifier, entityType, entityName string, mods ...cdsclient.RequestModifier) (*sdk.Entity, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projKey, vcsIdentifier, repoIdentifier, entityType, entityName}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EntityGet", varargs...)
	ret0, _ := ret[0].(*sdk.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntityGet indicates an expected call of EntityGet.
func (mr *MockHatcheryServiceClientMockRecorder) EntityGet(ctx, projKey, vcsIdentifier, repoIdentifier, entityType, entityName interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projKey, vcsIdentifier, repoIdentifier, entityType, entityName}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntityGet", reflect.TypeOf((*MockHatcheryServiceClient)(nil).EntityGet), varargs...)
}

// GetWorkerModel mocks base method.
func (m *MockHatcheryServiceClient) GetWorkerModel(ctx context.Context, projKey, vcsIdentifier, repoIdentifier, workerModelName string, mods ...cdsclient.RequestModifier) (*sdk.V2WorkerModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projKey, vcsIdentifier, repoIdentifier, workerModelName}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkerModel", varargs...)
	ret0, _ := ret[0].(*sdk.V2WorkerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerModel indicates an expected call of GetWorkerModel.
func (mr *MockHatcheryServiceClientMockRecorder) GetWorkerModel(ctx, projKey, vcsIdentifier, repoIdentifier, workerModelName interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projKey, vcsIdentifier, repoIdentifier, workerModelName}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerModel", reflect.TypeOf((*MockHatcheryServiceClient)(nil).GetWorkerModel), varargs...)
}

// Heartbeat mocks base method.
func (m *MockHatcheryServiceClient) Heartbeat(ctx context.Context, mon *sdk.MonitoringStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", ctx, mon)
	ret0, _ := ret[0].(error)
	return ret0
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockHatcheryServiceClientMockRecorder) Heartbeat(ctx, mon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockHatcheryServiceClient)(nil).Heartbeat), ctx, mon)
}

// V2HatcheryReleaseJob mocks base method.
func (m *MockHatcheryServiceClient) V2HatcheryReleaseJob(ctx context.Context, regionName, jobRunID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2HatcheryReleaseJob", ctx, regionName, jobRunID)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2HatcheryReleaseJob indicates an expected call of V2HatcheryReleaseJob.
func (mr *MockHatcheryServiceClientMockRecorder) V2HatcheryReleaseJob(ctx, regionName, jobRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2HatcheryReleaseJob", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2HatcheryReleaseJob), ctx, regionName, jobRunID)
}

// V2HatcheryTakeJob mocks base method.
func (m *MockHatcheryServiceClient) V2HatcheryTakeJob(ctx context.Context, regionName, jobRunID string) (*sdk.V2WorkflowRunJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2HatcheryTakeJob", ctx, regionName, jobRunID)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2HatcheryTakeJob indicates an expected call of V2HatcheryTakeJob.
func (mr *MockHatcheryServiceClientMockRecorder) V2HatcheryTakeJob(ctx, regionName, jobRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2HatcheryTakeJob", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2HatcheryTakeJob), ctx, regionName, jobRunID)
}

// V2QueueGetJobRun mocks base method.
func (m *MockHatcheryServiceClient) V2QueueGetJobRun(ctx context.Context, regionName, id string) (*sdk.V2WorkflowRunJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueGetJobRun", ctx, regionName, id)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueGetJobRun indicates an expected call of V2QueueGetJobRun.
func (mr *MockHatcheryServiceClientMockRecorder) V2QueueGetJobRun(ctx, regionName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueGetJobRun", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2QueueGetJobRun), ctx, regionName, id)
}

// V2QueueJobResult mocks base method.
func (m *MockHatcheryServiceClient) V2QueueJobResult(ctx context.Context, region, jobRunID string, result sdk.V2WorkflowRunJobResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobResult", ctx, region, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobResult indicates an expected call of V2QueueJobResult.
func (mr *MockHatcheryServiceClientMockRecorder) V2QueueJobResult(ctx, region, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobResult", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2QueueJobResult), ctx, region, jobRunID, result)
}

// V2QueueJobRunResultCreate mocks base method.
func (m *MockHatcheryServiceClient) V2QueueJobRunResultCreate(ctx context.Context, regionName, jobRunID string, result *sdk.V2WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultCreate", ctx, regionName, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobRunResultCreate indicates an expected call of V2QueueJobRunResultCreate.
func (mr *MockHatcheryServiceClientMockRecorder) V2QueueJobRunResultCreate(ctx, regionName, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultCreate", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2QueueJobRunResultCreate), ctx, regionName, jobRunID, result)
}

// V2QueueJobRunResultGet mocks base method.
func (m *MockHatcheryServiceClient) V2QueueJobRunResultGet(ctx context.Context, regionName, jobRunID, runResultID string) (*sdk.V2WorkflowRunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultGet", ctx, regionName, jobRunID, runResultID)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueJobRunResultGet indicates an expected call of V2QueueJobRunResultGet.
func (mr *MockHatcheryServiceClientMockRecorder) V2QueueJobRunResultGet(ctx, regionName, jobRunID, runResultID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultGet", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2QueueJobRunResultGet), ctx, regionName, jobRunID, runResultID)
}

// V2QueueJobRunResultUpdate mocks base method.
func (m *MockHatcheryServiceClient) V2QueueJobRunResultUpdate(ctx context.Context, regionName, jobRunID string, result *sdk.V2WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultUpdate", ctx, regionName, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobRunResultUpdate indicates an expected call of V2QueueJobRunResultUpdate.
func (mr *MockHatcheryServiceClientMockRecorder) V2QueueJobRunResultUpdate(ctx, regionName, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultUpdate", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2QueueJobRunResultUpdate), ctx, regionName, jobRunID, result)
}

// V2QueueJobStepUpdate mocks base method.
func (m *MockHatcheryServiceClient) V2QueueJobStepUpdate(ctx context.Context, regionName, id string, stepsStatus sdk.JobStepsStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobStepUpdate", ctx, regionName, id, stepsStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobStepUpdate indicates an expected call of V2QueueJobStepUpdate.
func (mr *MockHatcheryServiceClientMockRecorder) V2QueueJobStepUpdate(ctx, regionName, id, stepsStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobStepUpdate", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2QueueJobStepUpdate), ctx, regionName, id, stepsStatus)
}

// V2QueuePolling mocks base method.
func (m *MockHatcheryServiceClient) V2QueuePolling(ctx context.Context, region string, goRoutines *sdk.GoRoutines, jobs chan<- sdk.V2WorkflowRunJob, errs chan<- error, delay time.Duration, ms ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, region, goRoutines, jobs, errs, delay}
	for _, a := range ms {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "V2QueuePolling", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueuePolling indicates an expected call of V2QueuePolling.
func (mr *MockHatcheryServiceClientMockRecorder) V2QueuePolling(ctx, region, goRoutines, jobs, errs, delay interface{}, ms ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, region, goRoutines, jobs, errs, delay}, ms...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueuePolling", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2QueuePolling), varargs...)
}

// V2QueuePushJobInfo mocks base method.
func (m *MockHatcheryServiceClient) V2QueuePushJobInfo(ctx context.Context, regionName, jobRunID string, msg sdk.V2SendJobRunInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueuePushJobInfo", ctx, regionName, jobRunID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueuePushJobInfo indicates an expected call of V2QueuePushJobInfo.
func (mr *MockHatcheryServiceClientMockRecorder) V2QueuePushJobInfo(ctx, regionName, jobRunID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueuePushJobInfo", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2QueuePushJobInfo), ctx, regionName, jobRunID, msg)
}

// V2QueueWorkerTakeJob mocks base method.
func (m *MockHatcheryServiceClient) V2QueueWorkerTakeJob(ctx context.Context, region, runJobID string) (*sdk.V2TakeJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueWorkerTakeJob", ctx, region, runJobID)
	ret0, _ := ret[0].(*sdk.V2TakeJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueWorkerTakeJob indicates an expected call of V2QueueWorkerTakeJob.
func (mr *MockHatcheryServiceClientMockRecorder) V2QueueWorkerTakeJob(ctx, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueWorkerTakeJob", reflect.TypeOf((*MockHatcheryServiceClient)(nil).V2QueueWorkerTakeJob), ctx, region, runJobID)
}

// MockProjectClient is a mock of ProjectClient interface.
type MockProjectClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectClientMockRecorder
}

// MockProjectClientMockRecorder is the mock recorder for MockProjectClient.
type MockProjectClientMockRecorder struct {
	mock *MockProjectClient
}

// NewMockProjectClient creates a new mock instance.
func NewMockProjectClient(ctrl *gomock.Controller) *MockProjectClient {
	mock := &MockProjectClient{ctrl: ctrl}
	mock.recorder = &MockProjectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectClient) EXPECT() *MockProjectClientMockRecorder {
	return m.recorder
}

// ProjectAccess mocks base method.
func (m *MockProjectClient) ProjectAccess(ctx context.Context, projectKey, sessionID string, itemType sdk.CDNItemType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectAccess", ctx, projectKey, sessionID, itemType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectAccess indicates an expected call of ProjectAccess.
func (mr *MockProjectClientMockRecorder) ProjectAccess(ctx, projectKey, sessionID, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectAccess", reflect.TypeOf((*MockProjectClient)(nil).ProjectAccess), ctx, projectKey, sessionID, itemType)
}

// ProjectCreate mocks base method.
func (m *MockProjectClient) ProjectCreate(proj *sdk.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectCreate", proj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectCreate indicates an expected call of ProjectCreate.
func (mr *MockProjectClientMockRecorder) ProjectCreate(proj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectCreate", reflect.TypeOf((*MockProjectClient)(nil).ProjectCreate), proj)
}

// ProjectDelete mocks base method.
func (m *MockProjectClient) ProjectDelete(projectKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectDelete", projectKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectDelete indicates an expected call of ProjectDelete.
func (mr *MockProjectClientMockRecorder) ProjectDelete(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectDelete", reflect.TypeOf((*MockProjectClient)(nil).ProjectDelete), projectKey)
}

// ProjectGet mocks base method.
func (m *MockProjectClient) ProjectGet(projectKey string, opts ...cdsclient.RequestModifier) (*sdk.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectGet", varargs...)
	ret0, _ := ret[0].(*sdk.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectGet indicates an expected call of ProjectGet.
func (mr *MockProjectClientMockRecorder) ProjectGet(projectKey interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectGet", reflect.TypeOf((*MockProjectClient)(nil).ProjectGet), varargs...)
}

// ProjectGroupAdd mocks base method.
func (m *MockProjectClient) ProjectGroupAdd(projectKey, groupName string, permission int, projectOnly bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectGroupAdd", projectKey, groupName, permission, projectOnly)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectGroupAdd indicates an expected call of ProjectGroupAdd.
func (mr *MockProjectClientMockRecorder) ProjectGroupAdd(projectKey, groupName, permission, projectOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectGroupAdd", reflect.TypeOf((*MockProjectClient)(nil).ProjectGroupAdd), projectKey, groupName, permission, projectOnly)
}

// ProjectGroupDelete mocks base method.
func (m *MockProjectClient) ProjectGroupDelete(projectKey, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectGroupDelete", projectKey, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectGroupDelete indicates an expected call of ProjectGroupDelete.
func (mr *MockProjectClientMockRecorder) ProjectGroupDelete(projectKey, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectGroupDelete", reflect.TypeOf((*MockProjectClient)(nil).ProjectGroupDelete), projectKey, groupName)
}

// ProjectIntegrationDelete mocks base method.
func (m *MockProjectClient) ProjectIntegrationDelete(projectKey, integrationName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationDelete", projectKey, integrationName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectIntegrationDelete indicates an expected call of ProjectIntegrationDelete.
func (mr *MockProjectClientMockRecorder) ProjectIntegrationDelete(projectKey, integrationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationDelete", reflect.TypeOf((*MockProjectClient)(nil).ProjectIntegrationDelete), projectKey, integrationName)
}

// ProjectIntegrationGet mocks base method.
func (m *MockProjectClient) ProjectIntegrationGet(projectKey, integrationName string, clearPassword bool) (sdk.ProjectIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationGet", projectKey, integrationName, clearPassword)
	ret0, _ := ret[0].(sdk.ProjectIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationGet indicates an expected call of ProjectIntegrationGet.
func (mr *MockProjectClientMockRecorder) ProjectIntegrationGet(projectKey, integrationName, clearPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationGet", reflect.TypeOf((*MockProjectClient)(nil).ProjectIntegrationGet), projectKey, integrationName, clearPassword)
}

// ProjectIntegrationImport mocks base method.
func (m *MockProjectClient) ProjectIntegrationImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) (sdk.ProjectIntegration, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectIntegrationImport", varargs...)
	ret0, _ := ret[0].(sdk.ProjectIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationImport indicates an expected call of ProjectIntegrationImport.
func (mr *MockProjectClientMockRecorder) ProjectIntegrationImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationImport", reflect.TypeOf((*MockProjectClient)(nil).ProjectIntegrationImport), varargs...)
}

// ProjectIntegrationList mocks base method.
func (m *MockProjectClient) ProjectIntegrationList(projectKey string) ([]sdk.ProjectIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationList", projectKey)
	ret0, _ := ret[0].([]sdk.ProjectIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationList indicates an expected call of ProjectIntegrationList.
func (mr *MockProjectClientMockRecorder) ProjectIntegrationList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationList", reflect.TypeOf((*MockProjectClient)(nil).ProjectIntegrationList), projectKey)
}

// ProjectIntegrationWorkerHookGet mocks base method.
func (m *MockProjectClient) ProjectIntegrationWorkerHookGet(projectKey, integrationName string) (*sdk.WorkerHookProjectIntegrationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationWorkerHookGet", projectKey, integrationName)
	ret0, _ := ret[0].(*sdk.WorkerHookProjectIntegrationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationWorkerHookGet indicates an expected call of ProjectIntegrationWorkerHookGet.
func (mr *MockProjectClientMockRecorder) ProjectIntegrationWorkerHookGet(projectKey, integrationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationWorkerHookGet", reflect.TypeOf((*MockProjectClient)(nil).ProjectIntegrationWorkerHookGet), projectKey, integrationName)
}

// ProjectIntegrationWorkerHooksImport mocks base method.
func (m *MockProjectClient) ProjectIntegrationWorkerHooksImport(projectKey, integrationName string, hook sdk.WorkerHookProjectIntegrationModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationWorkerHooksImport", projectKey, integrationName, hook)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectIntegrationWorkerHooksImport indicates an expected call of ProjectIntegrationWorkerHooksImport.
func (mr *MockProjectClientMockRecorder) ProjectIntegrationWorkerHooksImport(projectKey, integrationName, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationWorkerHooksImport", reflect.TypeOf((*MockProjectClient)(nil).ProjectIntegrationWorkerHooksImport), projectKey, integrationName, hook)
}

// ProjectKeyCreate mocks base method.
func (m *MockProjectClient) ProjectKeyCreate(projectKey string, key *sdk.ProjectKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeyCreate", projectKey, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeyCreate indicates an expected call of ProjectKeyCreate.
func (mr *MockProjectClientMockRecorder) ProjectKeyCreate(projectKey, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeyCreate", reflect.TypeOf((*MockProjectClient)(nil).ProjectKeyCreate), projectKey, key)
}

// ProjectKeysDelete mocks base method.
func (m *MockProjectClient) ProjectKeysDelete(projectKey, keyProjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysDelete", projectKey, keyProjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeysDelete indicates an expected call of ProjectKeysDelete.
func (mr *MockProjectClientMockRecorder) ProjectKeysDelete(projectKey, keyProjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysDelete", reflect.TypeOf((*MockProjectClient)(nil).ProjectKeysDelete), projectKey, keyProjectName)
}

// ProjectKeysDisable mocks base method.
func (m *MockProjectClient) ProjectKeysDisable(projectKey, keyProjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysDisable", projectKey, keyProjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeysDisable indicates an expected call of ProjectKeysDisable.
func (mr *MockProjectClientMockRecorder) ProjectKeysDisable(projectKey, keyProjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysDisable", reflect.TypeOf((*MockProjectClient)(nil).ProjectKeysDisable), projectKey, keyProjectName)
}

// ProjectKeysEnable mocks base method.
func (m *MockProjectClient) ProjectKeysEnable(projectKey, keyProjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysEnable", projectKey, keyProjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeysEnable indicates an expected call of ProjectKeysEnable.
func (mr *MockProjectClientMockRecorder) ProjectKeysEnable(projectKey, keyProjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysEnable", reflect.TypeOf((*MockProjectClient)(nil).ProjectKeysEnable), projectKey, keyProjectName)
}

// ProjectKeysList mocks base method.
func (m *MockProjectClient) ProjectKeysList(projectKey string) ([]sdk.ProjectKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysList", projectKey)
	ret0, _ := ret[0].([]sdk.ProjectKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectKeysList indicates an expected call of ProjectKeysList.
func (mr *MockProjectClientMockRecorder) ProjectKeysList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysList", reflect.TypeOf((*MockProjectClient)(nil).ProjectKeysList), projectKey)
}

// ProjectList mocks base method.
func (m *MockProjectClient) ProjectList(withApplications, withWorkflow bool, filters ...cdsclient.Filter) ([]sdk.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{withApplications, withWorkflow}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectList", varargs...)
	ret0, _ := ret[0].([]sdk.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectList indicates an expected call of ProjectList.
func (mr *MockProjectClientMockRecorder) ProjectList(withApplications, withWorkflow interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{withApplications, withWorkflow}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectList", reflect.TypeOf((*MockProjectClient)(nil).ProjectList), varargs...)
}

// ProjectRepositoryAnalysis mocks base method.
func (m *MockProjectClient) ProjectRepositoryAnalysis(ctx context.Context, analysis sdk.AnalysisRequest) (sdk.AnalysisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryAnalysis", ctx, analysis)
	ret0, _ := ret[0].(sdk.AnalysisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryAnalysis indicates an expected call of ProjectRepositoryAnalysis.
func (mr *MockProjectClientMockRecorder) ProjectRepositoryAnalysis(ctx, analysis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryAnalysis", reflect.TypeOf((*MockProjectClient)(nil).ProjectRepositoryAnalysis), ctx, analysis)
}

// ProjectRepositoryAnalysisGet mocks base method.
func (m *MockProjectClient) ProjectRepositoryAnalysisGet(ctx context.Context, projectKey, vcsIdentifier, repositoryIdentifier, analysisID string) (sdk.ProjectRepositoryAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryAnalysisGet", ctx, projectKey, vcsIdentifier, repositoryIdentifier, analysisID)
	ret0, _ := ret[0].(sdk.ProjectRepositoryAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryAnalysisGet indicates an expected call of ProjectRepositoryAnalysisGet.
func (mr *MockProjectClientMockRecorder) ProjectRepositoryAnalysisGet(ctx, projectKey, vcsIdentifier, repositoryIdentifier, analysisID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryAnalysisGet", reflect.TypeOf((*MockProjectClient)(nil).ProjectRepositoryAnalysisGet), ctx, projectKey, vcsIdentifier, repositoryIdentifier, analysisID)
}

// ProjectRepositoryAnalysisList mocks base method.
func (m *MockProjectClient) ProjectRepositoryAnalysisList(ctx context.Context, projectKey, vcsIdentifier, repositoryIdentifier string) ([]sdk.ProjectRepositoryAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryAnalysisList", ctx, projectKey, vcsIdentifier, repositoryIdentifier)
	ret0, _ := ret[0].([]sdk.ProjectRepositoryAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryAnalysisList indicates an expected call of ProjectRepositoryAnalysisList.
func (mr *MockProjectClientMockRecorder) ProjectRepositoryAnalysisList(ctx, projectKey, vcsIdentifier, repositoryIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryAnalysisList", reflect.TypeOf((*MockProjectClient)(nil).ProjectRepositoryAnalysisList), ctx, projectKey, vcsIdentifier, repositoryIdentifier)
}

// ProjectRepositoryDelete mocks base method.
func (m *MockProjectClient) ProjectRepositoryDelete(ctx context.Context, projectKey, vcsName, repositoryName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryDelete", ctx, projectKey, vcsName, repositoryName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectRepositoryDelete indicates an expected call of ProjectRepositoryDelete.
func (mr *MockProjectClientMockRecorder) ProjectRepositoryDelete(ctx, projectKey, vcsName, repositoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryDelete", reflect.TypeOf((*MockProjectClient)(nil).ProjectRepositoryDelete), ctx, projectKey, vcsName, repositoryName)
}

// ProjectRepositoryHookSecret mocks base method.
func (m *MockProjectClient) ProjectRepositoryHookSecret(ctx context.Context, projectKey, vcsType, vcsName, repoName string) (sdk.HookAccessData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryHookSecret", ctx, projectKey, vcsType, vcsName, repoName)
	ret0, _ := ret[0].(sdk.HookAccessData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryHookSecret indicates an expected call of ProjectRepositoryHookSecret.
func (mr *MockProjectClientMockRecorder) ProjectRepositoryHookSecret(ctx, projectKey, vcsType, vcsName, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryHookSecret", reflect.TypeOf((*MockProjectClient)(nil).ProjectRepositoryHookSecret), ctx, projectKey, vcsType, vcsName, repoName)
}

// ProjectRepositoryManagerDelete mocks base method.
func (m *MockProjectClient) ProjectRepositoryManagerDelete(projectKey, repoManagerName string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryManagerDelete", projectKey, repoManagerName, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectRepositoryManagerDelete indicates an expected call of ProjectRepositoryManagerDelete.
func (mr *MockProjectClientMockRecorder) ProjectRepositoryManagerDelete(projectKey, repoManagerName, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryManagerDelete", reflect.TypeOf((*MockProjectClient)(nil).ProjectRepositoryManagerDelete), projectKey, repoManagerName, force)
}

// ProjectRepositoryManagerList mocks base method.
func (m *MockProjectClient) ProjectRepositoryManagerList(projectKey string) ([]sdk.ProjectVCSServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryManagerList", projectKey)
	ret0, _ := ret[0].([]sdk.ProjectVCSServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryManagerList indicates an expected call of ProjectRepositoryManagerList.
func (mr *MockProjectClientMockRecorder) ProjectRepositoryManagerList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryManagerList", reflect.TypeOf((*MockProjectClient)(nil).ProjectRepositoryManagerList), projectKey)
}

// ProjectUpdate mocks base method.
func (m *MockProjectClient) ProjectUpdate(key string, project *sdk.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectUpdate", key, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectUpdate indicates an expected call of ProjectUpdate.
func (mr *MockProjectClientMockRecorder) ProjectUpdate(key, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUpdate", reflect.TypeOf((*MockProjectClient)(nil).ProjectUpdate), key, project)
}

// ProjectVCSDelete mocks base method.
func (m *MockProjectClient) ProjectVCSDelete(ctx context.Context, projectKey, vcsName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSDelete", ctx, projectKey, vcsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVCSDelete indicates an expected call of ProjectVCSDelete.
func (mr *MockProjectClientMockRecorder) ProjectVCSDelete(ctx, projectKey, vcsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSDelete", reflect.TypeOf((*MockProjectClient)(nil).ProjectVCSDelete), ctx, projectKey, vcsName)
}

// ProjectVCSGet mocks base method.
func (m *MockProjectClient) ProjectVCSGet(ctx context.Context, projectKey, integrationName string) (sdk.VCSProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSGet", ctx, projectKey, integrationName)
	ret0, _ := ret[0].(sdk.VCSProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVCSGet indicates an expected call of ProjectVCSGet.
func (mr *MockProjectClientMockRecorder) ProjectVCSGet(ctx, projectKey, integrationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSGet", reflect.TypeOf((*MockProjectClient)(nil).ProjectVCSGet), ctx, projectKey, integrationName)
}

// ProjectVCSImport mocks base method.
func (m *MockProjectClient) ProjectVCSImport(ctx context.Context, projectKey string, vcs sdk.VCSProject, mods ...cdsclient.RequestModifier) (sdk.VCSProject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcs}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectVCSImport", varargs...)
	ret0, _ := ret[0].(sdk.VCSProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVCSImport indicates an expected call of ProjectVCSImport.
func (mr *MockProjectClientMockRecorder) ProjectVCSImport(ctx, projectKey, vcs interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcs}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSImport", reflect.TypeOf((*MockProjectClient)(nil).ProjectVCSImport), varargs...)
}

// ProjectVCSList mocks base method.
func (m *MockProjectClient) ProjectVCSList(ctx context.Context, projectKey string) ([]sdk.VCSProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSList", ctx, projectKey)
	ret0, _ := ret[0].([]sdk.VCSProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVCSList indicates an expected call of ProjectVCSList.
func (mr *MockProjectClientMockRecorder) ProjectVCSList(ctx, projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSList", reflect.TypeOf((*MockProjectClient)(nil).ProjectVCSList), ctx, projectKey)
}

// ProjectVCSRepositoryAdd mocks base method.
func (m *MockProjectClient) ProjectVCSRepositoryAdd(ctx context.Context, projectKey, vcsName string, repo sdk.ProjectRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSRepositoryAdd", ctx, projectKey, vcsName, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVCSRepositoryAdd indicates an expected call of ProjectVCSRepositoryAdd.
func (mr *MockProjectClientMockRecorder) ProjectVCSRepositoryAdd(ctx, projectKey, vcsName, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSRepositoryAdd", reflect.TypeOf((*MockProjectClient)(nil).ProjectVCSRepositoryAdd), ctx, projectKey, vcsName, repo)
}

// ProjectVCSRepositoryList mocks base method.
func (m *MockProjectClient) ProjectVCSRepositoryList(ctx context.Context, projectKey, vcsName string) ([]sdk.ProjectRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSRepositoryList", ctx, projectKey, vcsName)
	ret0, _ := ret[0].([]sdk.ProjectRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVCSRepositoryList indicates an expected call of ProjectVCSRepositoryList.
func (mr *MockProjectClientMockRecorder) ProjectVCSRepositoryList(ctx, projectKey, vcsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSRepositoryList", reflect.TypeOf((*MockProjectClient)(nil).ProjectVCSRepositoryList), ctx, projectKey, vcsName)
}

// ProjectVariableCreate mocks base method.
func (m *MockProjectClient) ProjectVariableCreate(projectKey string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableCreate", projectKey, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVariableCreate indicates an expected call of ProjectVariableCreate.
func (mr *MockProjectClientMockRecorder) ProjectVariableCreate(projectKey, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableCreate", reflect.TypeOf((*MockProjectClient)(nil).ProjectVariableCreate), projectKey, variable)
}

// ProjectVariableDelete mocks base method.
func (m *MockProjectClient) ProjectVariableDelete(projectKey, varName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableDelete", projectKey, varName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVariableDelete indicates an expected call of ProjectVariableDelete.
func (mr *MockProjectClientMockRecorder) ProjectVariableDelete(projectKey, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableDelete", reflect.TypeOf((*MockProjectClient)(nil).ProjectVariableDelete), projectKey, varName)
}

// ProjectVariableGet mocks base method.
func (m *MockProjectClient) ProjectVariableGet(projectKey, varName string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableGet", projectKey, varName)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVariableGet indicates an expected call of ProjectVariableGet.
func (mr *MockProjectClientMockRecorder) ProjectVariableGet(projectKey, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableGet", reflect.TypeOf((*MockProjectClient)(nil).ProjectVariableGet), projectKey, varName)
}

// ProjectVariableUpdate mocks base method.
func (m *MockProjectClient) ProjectVariableUpdate(projectKey string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableUpdate", projectKey, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVariableUpdate indicates an expected call of ProjectVariableUpdate.
func (mr *MockProjectClientMockRecorder) ProjectVariableUpdate(projectKey, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableUpdate", reflect.TypeOf((*MockProjectClient)(nil).ProjectVariableUpdate), projectKey, variable)
}

// ProjectVariablesList mocks base method.
func (m *MockProjectClient) ProjectVariablesList(key string) ([]sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariablesList", key)
	ret0, _ := ret[0].([]sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVariablesList indicates an expected call of ProjectVariablesList.
func (mr *MockProjectClientMockRecorder) ProjectVariablesList(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariablesList", reflect.TypeOf((*MockProjectClient)(nil).ProjectVariablesList), key)
}

// VariableEncrypt mocks base method.
func (m *MockProjectClient) VariableEncrypt(projectKey, varName, content string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableEncrypt", projectKey, varName, content)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableEncrypt indicates an expected call of VariableEncrypt.
func (mr *MockProjectClientMockRecorder) VariableEncrypt(projectKey, varName, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableEncrypt", reflect.TypeOf((*MockProjectClient)(nil).VariableEncrypt), projectKey, varName, content)
}

// VariableEncryptDelete mocks base method.
func (m *MockProjectClient) VariableEncryptDelete(projectKey, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableEncryptDelete", projectKey, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// VariableEncryptDelete indicates an expected call of VariableEncryptDelete.
func (mr *MockProjectClientMockRecorder) VariableEncryptDelete(projectKey, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableEncryptDelete", reflect.TypeOf((*MockProjectClient)(nil).VariableEncryptDelete), projectKey, name)
}

// VariableListEncrypt mocks base method.
func (m *MockProjectClient) VariableListEncrypt(projectKey string) ([]sdk.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableListEncrypt", projectKey)
	ret0, _ := ret[0].([]sdk.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableListEncrypt indicates an expected call of VariableListEncrypt.
func (mr *MockProjectClientMockRecorder) VariableListEncrypt(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableListEncrypt", reflect.TypeOf((*MockProjectClient)(nil).VariableListEncrypt), projectKey)
}

// MockRBACClient is a mock of RBACClient interface.
type MockRBACClient struct {
	ctrl     *gomock.Controller
	recorder *MockRBACClientMockRecorder
}

// MockRBACClientMockRecorder is the mock recorder for MockRBACClient.
type MockRBACClientMockRecorder struct {
	mock *MockRBACClient
}

// NewMockRBACClient creates a new mock instance.
func NewMockRBACClient(ctrl *gomock.Controller) *MockRBACClient {
	mock := &MockRBACClient{ctrl: ctrl}
	mock.recorder = &MockRBACClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRBACClient) EXPECT() *MockRBACClientMockRecorder {
	return m.recorder
}

// RBACDelete mocks base method.
func (m *MockRBACClient) RBACDelete(ctx context.Context, permissionIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RBACDelete", ctx, permissionIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// RBACDelete indicates an expected call of RBACDelete.
func (mr *MockRBACClientMockRecorder) RBACDelete(ctx, permissionIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RBACDelete", reflect.TypeOf((*MockRBACClient)(nil).RBACDelete), ctx, permissionIdentifier)
}

// RBACGet mocks base method.
func (m *MockRBACClient) RBACGet(ctx context.Context, permissionIdentifier string) (sdk.RBAC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RBACGet", ctx, permissionIdentifier)
	ret0, _ := ret[0].(sdk.RBAC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RBACGet indicates an expected call of RBACGet.
func (mr *MockRBACClientMockRecorder) RBACGet(ctx, permissionIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RBACGet", reflect.TypeOf((*MockRBACClient)(nil).RBACGet), ctx, permissionIdentifier)
}

// RBACImport mocks base method.
func (m *MockRBACClient) RBACImport(ctx context.Context, rbacRule sdk.RBAC, mods ...cdsclient.RequestModifier) (sdk.RBAC, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rbacRule}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RBACImport", varargs...)
	ret0, _ := ret[0].(sdk.RBAC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RBACImport indicates an expected call of RBACImport.
func (mr *MockRBACClientMockRecorder) RBACImport(ctx, rbacRule interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rbacRule}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RBACImport", reflect.TypeOf((*MockRBACClient)(nil).RBACImport), varargs...)
}

// MockProjectKeysClient is a mock of ProjectKeysClient interface.
type MockProjectKeysClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectKeysClientMockRecorder
}

// MockProjectKeysClientMockRecorder is the mock recorder for MockProjectKeysClient.
type MockProjectKeysClientMockRecorder struct {
	mock *MockProjectKeysClient
}

// NewMockProjectKeysClient creates a new mock instance.
func NewMockProjectKeysClient(ctrl *gomock.Controller) *MockProjectKeysClient {
	mock := &MockProjectKeysClient{ctrl: ctrl}
	mock.recorder = &MockProjectKeysClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectKeysClient) EXPECT() *MockProjectKeysClientMockRecorder {
	return m.recorder
}

// ProjectKeyCreate mocks base method.
func (m *MockProjectKeysClient) ProjectKeyCreate(projectKey string, key *sdk.ProjectKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeyCreate", projectKey, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeyCreate indicates an expected call of ProjectKeyCreate.
func (mr *MockProjectKeysClientMockRecorder) ProjectKeyCreate(projectKey, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeyCreate", reflect.TypeOf((*MockProjectKeysClient)(nil).ProjectKeyCreate), projectKey, key)
}

// ProjectKeysDelete mocks base method.
func (m *MockProjectKeysClient) ProjectKeysDelete(projectKey, keyProjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysDelete", projectKey, keyProjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeysDelete indicates an expected call of ProjectKeysDelete.
func (mr *MockProjectKeysClientMockRecorder) ProjectKeysDelete(projectKey, keyProjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysDelete", reflect.TypeOf((*MockProjectKeysClient)(nil).ProjectKeysDelete), projectKey, keyProjectName)
}

// ProjectKeysDisable mocks base method.
func (m *MockProjectKeysClient) ProjectKeysDisable(projectKey, keyProjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysDisable", projectKey, keyProjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeysDisable indicates an expected call of ProjectKeysDisable.
func (mr *MockProjectKeysClientMockRecorder) ProjectKeysDisable(projectKey, keyProjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysDisable", reflect.TypeOf((*MockProjectKeysClient)(nil).ProjectKeysDisable), projectKey, keyProjectName)
}

// ProjectKeysEnable mocks base method.
func (m *MockProjectKeysClient) ProjectKeysEnable(projectKey, keyProjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysEnable", projectKey, keyProjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeysEnable indicates an expected call of ProjectKeysEnable.
func (mr *MockProjectKeysClientMockRecorder) ProjectKeysEnable(projectKey, keyProjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysEnable", reflect.TypeOf((*MockProjectKeysClient)(nil).ProjectKeysEnable), projectKey, keyProjectName)
}

// ProjectKeysList mocks base method.
func (m *MockProjectKeysClient) ProjectKeysList(projectKey string) ([]sdk.ProjectKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysList", projectKey)
	ret0, _ := ret[0].([]sdk.ProjectKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectKeysList indicates an expected call of ProjectKeysList.
func (mr *MockProjectKeysClientMockRecorder) ProjectKeysList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysList", reflect.TypeOf((*MockProjectKeysClient)(nil).ProjectKeysList), projectKey)
}

// MockProjectVariablesClient is a mock of ProjectVariablesClient interface.
type MockProjectVariablesClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectVariablesClientMockRecorder
}

// MockProjectVariablesClientMockRecorder is the mock recorder for MockProjectVariablesClient.
type MockProjectVariablesClientMockRecorder struct {
	mock *MockProjectVariablesClient
}

// NewMockProjectVariablesClient creates a new mock instance.
func NewMockProjectVariablesClient(ctrl *gomock.Controller) *MockProjectVariablesClient {
	mock := &MockProjectVariablesClient{ctrl: ctrl}
	mock.recorder = &MockProjectVariablesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectVariablesClient) EXPECT() *MockProjectVariablesClientMockRecorder {
	return m.recorder
}

// ProjectVariableCreate mocks base method.
func (m *MockProjectVariablesClient) ProjectVariableCreate(projectKey string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableCreate", projectKey, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVariableCreate indicates an expected call of ProjectVariableCreate.
func (mr *MockProjectVariablesClientMockRecorder) ProjectVariableCreate(projectKey, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableCreate", reflect.TypeOf((*MockProjectVariablesClient)(nil).ProjectVariableCreate), projectKey, variable)
}

// ProjectVariableDelete mocks base method.
func (m *MockProjectVariablesClient) ProjectVariableDelete(projectKey, varName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableDelete", projectKey, varName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVariableDelete indicates an expected call of ProjectVariableDelete.
func (mr *MockProjectVariablesClientMockRecorder) ProjectVariableDelete(projectKey, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableDelete", reflect.TypeOf((*MockProjectVariablesClient)(nil).ProjectVariableDelete), projectKey, varName)
}

// ProjectVariableGet mocks base method.
func (m *MockProjectVariablesClient) ProjectVariableGet(projectKey, varName string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableGet", projectKey, varName)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVariableGet indicates an expected call of ProjectVariableGet.
func (mr *MockProjectVariablesClientMockRecorder) ProjectVariableGet(projectKey, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableGet", reflect.TypeOf((*MockProjectVariablesClient)(nil).ProjectVariableGet), projectKey, varName)
}

// ProjectVariableUpdate mocks base method.
func (m *MockProjectVariablesClient) ProjectVariableUpdate(projectKey string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableUpdate", projectKey, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVariableUpdate indicates an expected call of ProjectVariableUpdate.
func (mr *MockProjectVariablesClientMockRecorder) ProjectVariableUpdate(projectKey, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableUpdate", reflect.TypeOf((*MockProjectVariablesClient)(nil).ProjectVariableUpdate), projectKey, variable)
}

// ProjectVariablesList mocks base method.
func (m *MockProjectVariablesClient) ProjectVariablesList(key string) ([]sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariablesList", key)
	ret0, _ := ret[0].([]sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVariablesList indicates an expected call of ProjectVariablesList.
func (mr *MockProjectVariablesClientMockRecorder) ProjectVariablesList(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariablesList", reflect.TypeOf((*MockProjectVariablesClient)(nil).ProjectVariablesList), key)
}

// VariableEncrypt mocks base method.
func (m *MockProjectVariablesClient) VariableEncrypt(projectKey, varName, content string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableEncrypt", projectKey, varName, content)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableEncrypt indicates an expected call of VariableEncrypt.
func (mr *MockProjectVariablesClientMockRecorder) VariableEncrypt(projectKey, varName, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableEncrypt", reflect.TypeOf((*MockProjectVariablesClient)(nil).VariableEncrypt), projectKey, varName, content)
}

// VariableEncryptDelete mocks base method.
func (m *MockProjectVariablesClient) VariableEncryptDelete(projectKey, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableEncryptDelete", projectKey, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// VariableEncryptDelete indicates an expected call of VariableEncryptDelete.
func (mr *MockProjectVariablesClientMockRecorder) VariableEncryptDelete(projectKey, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableEncryptDelete", reflect.TypeOf((*MockProjectVariablesClient)(nil).VariableEncryptDelete), projectKey, name)
}

// VariableListEncrypt mocks base method.
func (m *MockProjectVariablesClient) VariableListEncrypt(projectKey string) ([]sdk.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableListEncrypt", projectKey)
	ret0, _ := ret[0].([]sdk.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableListEncrypt indicates an expected call of VariableListEncrypt.
func (mr *MockProjectVariablesClientMockRecorder) VariableListEncrypt(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableListEncrypt", reflect.TypeOf((*MockProjectVariablesClient)(nil).VariableListEncrypt), projectKey)
}

// MockV2QueueClient is a mock of V2QueueClient interface.
type MockV2QueueClient struct {
	ctrl     *gomock.Controller
	recorder *MockV2QueueClientMockRecorder
}

// MockV2QueueClientMockRecorder is the mock recorder for MockV2QueueClient.
type MockV2QueueClientMockRecorder struct {
	mock *MockV2QueueClient
}

// NewMockV2QueueClient creates a new mock instance.
func NewMockV2QueueClient(ctrl *gomock.Controller) *MockV2QueueClient {
	mock := &MockV2QueueClient{ctrl: ctrl}
	mock.recorder = &MockV2QueueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockV2QueueClient) EXPECT() *MockV2QueueClientMockRecorder {
	return m.recorder
}

// V2QueueGetJobRun mocks base method.
func (m *MockV2QueueClient) V2QueueGetJobRun(ctx context.Context, regionName, id string) (*sdk.V2WorkflowRunJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueGetJobRun", ctx, regionName, id)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueGetJobRun indicates an expected call of V2QueueGetJobRun.
func (mr *MockV2QueueClientMockRecorder) V2QueueGetJobRun(ctx, regionName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueGetJobRun", reflect.TypeOf((*MockV2QueueClient)(nil).V2QueueGetJobRun), ctx, regionName, id)
}

// V2QueueJobResult mocks base method.
func (m *MockV2QueueClient) V2QueueJobResult(ctx context.Context, region, jobRunID string, result sdk.V2WorkflowRunJobResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobResult", ctx, region, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobResult indicates an expected call of V2QueueJobResult.
func (mr *MockV2QueueClientMockRecorder) V2QueueJobResult(ctx, region, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobResult", reflect.TypeOf((*MockV2QueueClient)(nil).V2QueueJobResult), ctx, region, jobRunID, result)
}

// V2QueueJobRunResultCreate mocks base method.
func (m *MockV2QueueClient) V2QueueJobRunResultCreate(ctx context.Context, regionName, jobRunID string, result *sdk.V2WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultCreate", ctx, regionName, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobRunResultCreate indicates an expected call of V2QueueJobRunResultCreate.
func (mr *MockV2QueueClientMockRecorder) V2QueueJobRunResultCreate(ctx, regionName, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultCreate", reflect.TypeOf((*MockV2QueueClient)(nil).V2QueueJobRunResultCreate), ctx, regionName, jobRunID, result)
}

// V2QueueJobRunResultGet mocks base method.
func (m *MockV2QueueClient) V2QueueJobRunResultGet(ctx context.Context, regionName, jobRunID, runResultID string) (*sdk.V2WorkflowRunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultGet", ctx, regionName, jobRunID, runResultID)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueJobRunResultGet indicates an expected call of V2QueueJobRunResultGet.
func (mr *MockV2QueueClientMockRecorder) V2QueueJobRunResultGet(ctx, regionName, jobRunID, runResultID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultGet", reflect.TypeOf((*MockV2QueueClient)(nil).V2QueueJobRunResultGet), ctx, regionName, jobRunID, runResultID)
}

// V2QueueJobRunResultUpdate mocks base method.
func (m *MockV2QueueClient) V2QueueJobRunResultUpdate(ctx context.Context, regionName, jobRunID string, result *sdk.V2WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultUpdate", ctx, regionName, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobRunResultUpdate indicates an expected call of V2QueueJobRunResultUpdate.
func (mr *MockV2QueueClientMockRecorder) V2QueueJobRunResultUpdate(ctx, regionName, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultUpdate", reflect.TypeOf((*MockV2QueueClient)(nil).V2QueueJobRunResultUpdate), ctx, regionName, jobRunID, result)
}

// V2QueueJobStepUpdate mocks base method.
func (m *MockV2QueueClient) V2QueueJobStepUpdate(ctx context.Context, regionName, id string, stepsStatus sdk.JobStepsStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobStepUpdate", ctx, regionName, id, stepsStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobStepUpdate indicates an expected call of V2QueueJobStepUpdate.
func (mr *MockV2QueueClientMockRecorder) V2QueueJobStepUpdate(ctx, regionName, id, stepsStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobStepUpdate", reflect.TypeOf((*MockV2QueueClient)(nil).V2QueueJobStepUpdate), ctx, regionName, id, stepsStatus)
}

// V2QueuePolling mocks base method.
func (m *MockV2QueueClient) V2QueuePolling(ctx context.Context, region string, goRoutines *sdk.GoRoutines, jobs chan<- sdk.V2WorkflowRunJob, errs chan<- error, delay time.Duration, ms ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, region, goRoutines, jobs, errs, delay}
	for _, a := range ms {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "V2QueuePolling", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueuePolling indicates an expected call of V2QueuePolling.
func (mr *MockV2QueueClientMockRecorder) V2QueuePolling(ctx, region, goRoutines, jobs, errs, delay interface{}, ms ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, region, goRoutines, jobs, errs, delay}, ms...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueuePolling", reflect.TypeOf((*MockV2QueueClient)(nil).V2QueuePolling), varargs...)
}

// V2QueuePushJobInfo mocks base method.
func (m *MockV2QueueClient) V2QueuePushJobInfo(ctx context.Context, regionName, jobRunID string, msg sdk.V2SendJobRunInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueuePushJobInfo", ctx, regionName, jobRunID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueuePushJobInfo indicates an expected call of V2QueuePushJobInfo.
func (mr *MockV2QueueClientMockRecorder) V2QueuePushJobInfo(ctx, regionName, jobRunID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueuePushJobInfo", reflect.TypeOf((*MockV2QueueClient)(nil).V2QueuePushJobInfo), ctx, regionName, jobRunID, msg)
}

// V2QueueWorkerTakeJob mocks base method.
func (m *MockV2QueueClient) V2QueueWorkerTakeJob(ctx context.Context, region, runJobID string) (*sdk.V2TakeJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueWorkerTakeJob", ctx, region, runJobID)
	ret0, _ := ret[0].(*sdk.V2TakeJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueWorkerTakeJob indicates an expected call of V2QueueWorkerTakeJob.
func (mr *MockV2QueueClientMockRecorder) V2QueueWorkerTakeJob(ctx, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueWorkerTakeJob", reflect.TypeOf((*MockV2QueueClient)(nil).V2QueueWorkerTakeJob), ctx, region, runJobID)
}

// MockQueueClient is a mock of QueueClient interface.
type MockQueueClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueueClientMockRecorder
}

// MockQueueClientMockRecorder is the mock recorder for MockQueueClient.
type MockQueueClientMockRecorder struct {
	mock *MockQueueClient
}

// NewMockQueueClient creates a new mock instance.
func NewMockQueueClient(ctrl *gomock.Controller) *MockQueueClient {
	mock := &MockQueueClient{ctrl: ctrl}
	mock.recorder = &MockQueueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueClient) EXPECT() *MockQueueClientMockRecorder {
	return m.recorder
}

// QueueCountWorkflowNodeJobRun mocks base method.
func (m *MockQueueClient) QueueCountWorkflowNodeJobRun(since, until *time.Time, modelType string) (sdk.WorkflowNodeJobRunCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCountWorkflowNodeJobRun", since, until, modelType)
	ret0, _ := ret[0].(sdk.WorkflowNodeJobRunCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueCountWorkflowNodeJobRun indicates an expected call of QueueCountWorkflowNodeJobRun.
func (mr *MockQueueClientMockRecorder) QueueCountWorkflowNodeJobRun(since, until, modelType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCountWorkflowNodeJobRun", reflect.TypeOf((*MockQueueClient)(nil).QueueCountWorkflowNodeJobRun), since, until, modelType)
}

// QueueJobBook mocks base method.
func (m *MockQueueClient) QueueJobBook(ctx context.Context, id string) (sdk.WorkflowNodeJobRunBooked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobBook", ctx, id)
	ret0, _ := ret[0].(sdk.WorkflowNodeJobRunBooked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueJobBook indicates an expected call of QueueJobBook.
func (mr *MockQueueClientMockRecorder) QueueJobBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobBook", reflect.TypeOf((*MockQueueClient)(nil).QueueJobBook), ctx, id)
}

// QueueJobInfo mocks base method.
func (m *MockQueueClient) QueueJobInfo(ctx context.Context, id string) (*sdk.WorkflowNodeJobRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobInfo", ctx, id)
	ret0, _ := ret[0].(*sdk.WorkflowNodeJobRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueJobInfo indicates an expected call of QueueJobInfo.
func (mr *MockQueueClientMockRecorder) QueueJobInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobInfo", reflect.TypeOf((*MockQueueClient)(nil).QueueJobInfo), ctx, id)
}

// QueueJobRelease mocks base method.
func (m *MockQueueClient) QueueJobRelease(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobRelease", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobRelease indicates an expected call of QueueJobRelease.
func (mr *MockQueueClientMockRecorder) QueueJobRelease(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobRelease", reflect.TypeOf((*MockQueueClient)(nil).QueueJobRelease), ctx, id)
}

// QueueJobSendSpawnInfo mocks base method.
func (m *MockQueueClient) QueueJobSendSpawnInfo(ctx context.Context, id string, in []sdk.SpawnInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobSendSpawnInfo", ctx, id, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobSendSpawnInfo indicates an expected call of QueueJobSendSpawnInfo.
func (mr *MockQueueClientMockRecorder) QueueJobSendSpawnInfo(ctx, id, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobSendSpawnInfo", reflect.TypeOf((*MockQueueClient)(nil).QueueJobSendSpawnInfo), ctx, id, in)
}

// QueueJobSetVersion mocks base method.
func (m *MockQueueClient) QueueJobSetVersion(ctx context.Context, jobID int64, version sdk.WorkflowRunVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobSetVersion", ctx, jobID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobSetVersion indicates an expected call of QueueJobSetVersion.
func (mr *MockQueueClientMockRecorder) QueueJobSetVersion(ctx, jobID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobSetVersion", reflect.TypeOf((*MockQueueClient)(nil).QueueJobSetVersion), ctx, jobID, version)
}

// QueueJobTag mocks base method.
func (m *MockQueueClient) QueueJobTag(ctx context.Context, jobID int64, tags []sdk.WorkflowRunTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobTag", ctx, jobID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobTag indicates an expected call of QueueJobTag.
func (mr *MockQueueClientMockRecorder) QueueJobTag(ctx, jobID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobTag", reflect.TypeOf((*MockQueueClient)(nil).QueueJobTag), ctx, jobID, tags)
}

// QueuePolling mocks base method.
func (m *MockQueueClient) QueuePolling(ctx context.Context, goRoutines *sdk.GoRoutines, jobs chan<- sdk.WorkflowNodeJobRun, errs chan<- error, delay time.Duration, ms ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, goRoutines, jobs, errs, delay}
	for _, a := range ms {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueuePolling", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuePolling indicates an expected call of QueuePolling.
func (mr *MockQueueClientMockRecorder) QueuePolling(ctx, goRoutines, jobs, errs, delay interface{}, ms ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, goRoutines, jobs, errs, delay}, ms...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuePolling", reflect.TypeOf((*MockQueueClient)(nil).QueuePolling), varargs...)
}

// QueueSendResult mocks base method.
func (m *MockQueueClient) QueueSendResult(ctx context.Context, id int64, res sdk.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSendResult", ctx, id, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSendResult indicates an expected call of QueueSendResult.
func (mr *MockQueueClientMockRecorder) QueueSendResult(ctx, id, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSendResult", reflect.TypeOf((*MockQueueClient)(nil).QueueSendResult), ctx, id, res)
}

// QueueSendStepResult mocks base method.
func (m *MockQueueClient) QueueSendStepResult(ctx context.Context, id int64, res sdk.StepStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSendStepResult", ctx, id, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSendStepResult indicates an expected call of QueueSendStepResult.
func (mr *MockQueueClientMockRecorder) QueueSendStepResult(ctx, id, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSendStepResult", reflect.TypeOf((*MockQueueClient)(nil).QueueSendStepResult), ctx, id, res)
}

// QueueSendUnitTests mocks base method.
func (m *MockQueueClient) QueueSendUnitTests(ctx context.Context, id int64, report sdk.JUnitTestsSuites) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSendUnitTests", ctx, id, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSendUnitTests indicates an expected call of QueueSendUnitTests.
func (mr *MockQueueClientMockRecorder) QueueSendUnitTests(ctx, id, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSendUnitTests", reflect.TypeOf((*MockQueueClient)(nil).QueueSendUnitTests), ctx, id, report)
}

// QueueTakeJob mocks base method.
func (m *MockQueueClient) QueueTakeJob(ctx context.Context, job sdk.WorkflowNodeJobRun) (*sdk.WorkflowNodeJobRunData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueTakeJob", ctx, job)
	ret0, _ := ret[0].(*sdk.WorkflowNodeJobRunData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueTakeJob indicates an expected call of QueueTakeJob.
func (mr *MockQueueClientMockRecorder) QueueTakeJob(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueTakeJob", reflect.TypeOf((*MockQueueClient)(nil).QueueTakeJob), ctx, job)
}

// QueueWorkerCacheLink mocks base method.
func (m *MockQueueClient) QueueWorkerCacheLink(ctx context.Context, jobID int64, tag string) (sdk.CDNItemLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkerCacheLink", ctx, jobID, tag)
	ret0, _ := ret[0].(sdk.CDNItemLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueWorkerCacheLink indicates an expected call of QueueWorkerCacheLink.
func (mr *MockQueueClientMockRecorder) QueueWorkerCacheLink(ctx, jobID, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkerCacheLink", reflect.TypeOf((*MockQueueClient)(nil).QueueWorkerCacheLink), ctx, jobID, tag)
}

// QueueWorkflowNodeJobRun mocks base method.
func (m *MockQueueClient) QueueWorkflowNodeJobRun(mods ...cdsclient.RequestModifier) ([]sdk.WorkflowNodeJobRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueueWorkflowNodeJobRun", varargs...)
	ret0, _ := ret[0].([]sdk.WorkflowNodeJobRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueWorkflowNodeJobRun indicates an expected call of QueueWorkflowNodeJobRun.
func (mr *MockQueueClientMockRecorder) QueueWorkflowNodeJobRun(mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowNodeJobRun", reflect.TypeOf((*MockQueueClient)(nil).QueueWorkflowNodeJobRun), mods...)
}

// QueueWorkflowRunResultCheck mocks base method.
func (m *MockQueueClient) QueueWorkflowRunResultCheck(ctx context.Context, jobID int64, runResultCheck sdk.WorkflowRunResultCheck) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultCheck", ctx, jobID, runResultCheck)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueWorkflowRunResultCheck indicates an expected call of QueueWorkflowRunResultCheck.
func (mr *MockQueueClientMockRecorder) QueueWorkflowRunResultCheck(ctx, jobID, runResultCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultCheck", reflect.TypeOf((*MockQueueClient)(nil).QueueWorkflowRunResultCheck), ctx, jobID, runResultCheck)
}

// QueueWorkflowRunResultsAdd mocks base method.
func (m *MockQueueClient) QueueWorkflowRunResultsAdd(ctx context.Context, jobID int64, addRequest sdk.WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultsAdd", ctx, jobID, addRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWorkflowRunResultsAdd indicates an expected call of QueueWorkflowRunResultsAdd.
func (mr *MockQueueClientMockRecorder) QueueWorkflowRunResultsAdd(ctx, jobID, addRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultsAdd", reflect.TypeOf((*MockQueueClient)(nil).QueueWorkflowRunResultsAdd), ctx, jobID, addRequest)
}

// QueueWorkflowRunResultsPromote mocks base method.
func (m *MockQueueClient) QueueWorkflowRunResultsPromote(ctx context.Context, permJobID int64, runResultIDs []string, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultsPromote", ctx, permJobID, runResultIDs, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWorkflowRunResultsPromote indicates an expected call of QueueWorkflowRunResultsPromote.
func (mr *MockQueueClientMockRecorder) QueueWorkflowRunResultsPromote(ctx, permJobID, runResultIDs, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultsPromote", reflect.TypeOf((*MockQueueClient)(nil).QueueWorkflowRunResultsPromote), ctx, permJobID, runResultIDs, to)
}

// QueueWorkflowRunResultsRelease mocks base method.
func (m *MockQueueClient) QueueWorkflowRunResultsRelease(ctx context.Context, permJobID int64, runResultIDs []string, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultsRelease", ctx, permJobID, runResultIDs, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWorkflowRunResultsRelease indicates an expected call of QueueWorkflowRunResultsRelease.
func (mr *MockQueueClientMockRecorder) QueueWorkflowRunResultsRelease(ctx, permJobID, runResultIDs, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultsRelease", reflect.TypeOf((*MockQueueClient)(nil).QueueWorkflowRunResultsRelease), ctx, permJobID, runResultIDs, to)
}

// MockUserClient is a mock of UserClient interface.
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient.
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance.
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// UpdateFavorite mocks base method.
func (m *MockUserClient) UpdateFavorite(ctx context.Context, params sdk.FavoriteParams) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFavorite", ctx, params)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFavorite indicates an expected call of UpdateFavorite.
func (mr *MockUserClientMockRecorder) UpdateFavorite(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFavorite", reflect.TypeOf((*MockUserClient)(nil).UpdateFavorite), ctx, params)
}

// UserGet mocks base method.
func (m *MockUserClient) UserGet(ctx context.Context, username string) (*sdk.AuthentifiedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", ctx, username)
	ret0, _ := ret[0].(*sdk.AuthentifiedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockUserClientMockRecorder) UserGet(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockUserClient)(nil).UserGet), ctx, username)
}

// UserGetGroups mocks base method.
func (m *MockUserClient) UserGetGroups(ctx context.Context, username string) (map[string][]sdk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetGroups", ctx, username)
	ret0, _ := ret[0].(map[string][]sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetGroups indicates an expected call of UserGetGroups.
func (mr *MockUserClientMockRecorder) UserGetGroups(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetGroups", reflect.TypeOf((*MockUserClient)(nil).UserGetGroups), ctx, username)
}

// UserGetMe mocks base method.
func (m *MockUserClient) UserGetMe(ctx context.Context) (*sdk.AuthentifiedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetMe", ctx)
	ret0, _ := ret[0].(*sdk.AuthentifiedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetMe indicates an expected call of UserGetMe.
func (mr *MockUserClientMockRecorder) UserGetMe(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetMe", reflect.TypeOf((*MockUserClient)(nil).UserGetMe), ctx)
}

// UserGetSchema mocks base method.
func (m *MockUserClient) UserGetSchema(ctx context.Context) (sdk.SchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetSchema", ctx)
	ret0, _ := ret[0].(sdk.SchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetSchema indicates an expected call of UserGetSchema.
func (mr *MockUserClientMockRecorder) UserGetSchema(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetSchema", reflect.TypeOf((*MockUserClient)(nil).UserGetSchema), ctx)
}

// UserGpgKeyCreate mocks base method.
func (m *MockUserClient) UserGpgKeyCreate(ctx context.Context, username, publicKey string) (sdk.UserGPGKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGpgKeyCreate", ctx, username, publicKey)
	ret0, _ := ret[0].(sdk.UserGPGKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGpgKeyCreate indicates an expected call of UserGpgKeyCreate.
func (mr *MockUserClientMockRecorder) UserGpgKeyCreate(ctx, username, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGpgKeyCreate", reflect.TypeOf((*MockUserClient)(nil).UserGpgKeyCreate), ctx, username, publicKey)
}

// UserGpgKeyDelete mocks base method.
func (m *MockUserClient) UserGpgKeyDelete(ctx context.Context, username, keyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGpgKeyDelete", ctx, username, keyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserGpgKeyDelete indicates an expected call of UserGpgKeyDelete.
func (mr *MockUserClientMockRecorder) UserGpgKeyDelete(ctx, username, keyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGpgKeyDelete", reflect.TypeOf((*MockUserClient)(nil).UserGpgKeyDelete), ctx, username, keyID)
}

// UserGpgKeyGet mocks base method.
func (m *MockUserClient) UserGpgKeyGet(ctx context.Context, keyID string) (sdk.UserGPGKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGpgKeyGet", ctx, keyID)
	ret0, _ := ret[0].(sdk.UserGPGKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGpgKeyGet indicates an expected call of UserGpgKeyGet.
func (mr *MockUserClientMockRecorder) UserGpgKeyGet(ctx, keyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGpgKeyGet", reflect.TypeOf((*MockUserClient)(nil).UserGpgKeyGet), ctx, keyID)
}

// UserGpgKeyList mocks base method.
func (m *MockUserClient) UserGpgKeyList(ctx context.Context, username string) ([]sdk.UserGPGKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGpgKeyList", ctx, username)
	ret0, _ := ret[0].([]sdk.UserGPGKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGpgKeyList indicates an expected call of UserGpgKeyList.
func (mr *MockUserClientMockRecorder) UserGpgKeyList(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGpgKeyList", reflect.TypeOf((*MockUserClient)(nil).UserGpgKeyList), ctx, username)
}

// UserList mocks base method.
func (m *MockUserClient) UserList(ctx context.Context) ([]sdk.AuthentifiedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", ctx)
	ret0, _ := ret[0].([]sdk.AuthentifiedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockUserClientMockRecorder) UserList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockUserClient)(nil).UserList), ctx)
}

// UserUpdate mocks base method.
func (m *MockUserClient) UserUpdate(ctx context.Context, username string, user *sdk.AuthentifiedUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", ctx, username, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockUserClientMockRecorder) UserUpdate(ctx, username, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockUserClient)(nil).UserUpdate), ctx, username, user)
}

// MockV2WorkerClient is a mock of V2WorkerClient interface.
type MockV2WorkerClient struct {
	ctrl     *gomock.Controller
	recorder *MockV2WorkerClientMockRecorder
}

// MockV2WorkerClientMockRecorder is the mock recorder for MockV2WorkerClient.
type MockV2WorkerClientMockRecorder struct {
	mock *MockV2WorkerClient
}

// NewMockV2WorkerClient creates a new mock instance.
func NewMockV2WorkerClient(ctrl *gomock.Controller) *MockV2WorkerClient {
	mock := &MockV2WorkerClient{ctrl: ctrl}
	mock.recorder = &MockV2WorkerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockV2WorkerClient) EXPECT() *MockV2WorkerClientMockRecorder {
	return m.recorder
}

// V2WorkerRefresh mocks base method.
func (m *MockV2WorkerClient) V2WorkerRefresh(ctx context.Context, region, runJobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2WorkerRefresh", ctx, region, runJobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2WorkerRefresh indicates an expected call of V2WorkerRefresh.
func (mr *MockV2WorkerClientMockRecorder) V2WorkerRefresh(ctx, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerRefresh", reflect.TypeOf((*MockV2WorkerClient)(nil).V2WorkerRefresh), ctx, region, runJobID)
}

// V2WorkerRegister mocks base method.
func (m *MockV2WorkerClient) V2WorkerRegister(ctx context.Context, authToken string, form sdk.WorkerRegistrationForm, region, runJobID string) (*sdk.V2Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2WorkerRegister", ctx, authToken, form, region, runJobID)
	ret0, _ := ret[0].(*sdk.V2Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2WorkerRegister indicates an expected call of V2WorkerRegister.
func (mr *MockV2WorkerClientMockRecorder) V2WorkerRegister(ctx, authToken, form, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerRegister", reflect.TypeOf((*MockV2WorkerClient)(nil).V2WorkerRegister), ctx, authToken, form, region, runJobID)
}

// V2WorkerUnregister mocks base method.
func (m *MockV2WorkerClient) V2WorkerUnregister(ctx context.Context, region, runJobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2WorkerUnregister", ctx, region, runJobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2WorkerUnregister indicates an expected call of V2WorkerUnregister.
func (mr *MockV2WorkerClientMockRecorder) V2WorkerUnregister(ctx, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerUnregister", reflect.TypeOf((*MockV2WorkerClient)(nil).V2WorkerUnregister), ctx, region, runJobID)
}

// MockWorkerClient is a mock of WorkerClient interface.
type MockWorkerClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerClientMockRecorder
}

// MockWorkerClientMockRecorder is the mock recorder for MockWorkerClient.
type MockWorkerClientMockRecorder struct {
	mock *MockWorkerClient
}

// NewMockWorkerClient creates a new mock instance.
func NewMockWorkerClient(ctrl *gomock.Controller) *MockWorkerClient {
	mock := &MockWorkerClient{ctrl: ctrl}
	mock.recorder = &MockWorkerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerClient) EXPECT() *MockWorkerClientMockRecorder {
	return m.recorder
}

// CDNItemDownload mocks base method.
func (m *MockWorkerClient) CDNItemDownload(ctx context.Context, cdnAddr, hash string, itemType sdk.CDNItemType, md5 string, writer io.WriteSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemDownload", ctx, cdnAddr, hash, itemType, md5, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CDNItemDownload indicates an expected call of CDNItemDownload.
func (mr *MockWorkerClientMockRecorder) CDNItemDownload(ctx, cdnAddr, hash, itemType, md5, writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemDownload", reflect.TypeOf((*MockWorkerClient)(nil).CDNItemDownload), ctx, cdnAddr, hash, itemType, md5, writer)
}

// CDNItemStream mocks base method.
func (m *MockWorkerClient) CDNItemStream(ctx context.Context, cdnAddr, hash string, itemType sdk.CDNItemType) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemStream", ctx, cdnAddr, hash, itemType)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CDNItemStream indicates an expected call of CDNItemStream.
func (mr *MockWorkerClientMockRecorder) CDNItemStream(ctx, cdnAddr, hash, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemStream", reflect.TypeOf((*MockWorkerClient)(nil).CDNItemStream), ctx, cdnAddr, hash, itemType)
}

// CDNItemUpload mocks base method.
func (m *MockWorkerClient) CDNItemUpload(ctx context.Context, cdnAddr, signature string, fs afero.Fs, path string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemUpload", ctx, cdnAddr, signature, fs, path)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CDNItemUpload indicates an expected call of CDNItemUpload.
func (mr *MockWorkerClientMockRecorder) CDNItemUpload(ctx, cdnAddr, signature, fs, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemUpload", reflect.TypeOf((*MockWorkerClient)(nil).CDNItemUpload), ctx, cdnAddr, signature, fs, path)
}

// V2WorkerGet mocks base method.
func (m *MockWorkerClient) V2WorkerGet(ctx context.Context, name string, mods ...cdsclient.RequestModifier) (*sdk.V2Worker, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "V2WorkerGet", varargs...)
	ret0, _ := ret[0].(*sdk.V2Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2WorkerGet indicates an expected call of V2WorkerGet.
func (mr *MockWorkerClientMockRecorder) V2WorkerGet(ctx, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerGet", reflect.TypeOf((*MockWorkerClient)(nil).V2WorkerGet), varargs...)
}

// V2WorkerList mocks base method.
func (m *MockWorkerClient) V2WorkerList(ctx context.Context) ([]sdk.V2Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2WorkerList", ctx)
	ret0, _ := ret[0].([]sdk.V2Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2WorkerList indicates an expected call of V2WorkerList.
func (mr *MockWorkerClientMockRecorder) V2WorkerList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerList", reflect.TypeOf((*MockWorkerClient)(nil).V2WorkerList), ctx)
}

// WorkerDisable mocks base method.
func (m *MockWorkerClient) WorkerDisable(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerDisable", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerDisable indicates an expected call of WorkerDisable.
func (mr *MockWorkerClientMockRecorder) WorkerDisable(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerDisable", reflect.TypeOf((*MockWorkerClient)(nil).WorkerDisable), ctx, id)
}

// WorkerGet mocks base method.
func (m *MockWorkerClient) WorkerGet(ctx context.Context, name string, mods ...cdsclient.RequestModifier) (*sdk.Worker, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkerGet", varargs...)
	ret0, _ := ret[0].(*sdk.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerGet indicates an expected call of WorkerGet.
func (mr *MockWorkerClientMockRecorder) WorkerGet(ctx, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerGet", reflect.TypeOf((*MockWorkerClient)(nil).WorkerGet), varargs...)
}

// WorkerList mocks base method.
func (m *MockWorkerClient) WorkerList(ctx context.Context) ([]sdk.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerList", ctx)
	ret0, _ := ret[0].([]sdk.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerList indicates an expected call of WorkerList.
func (mr *MockWorkerClientMockRecorder) WorkerList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerList", reflect.TypeOf((*MockWorkerClient)(nil).WorkerList), ctx)
}

// WorkerModelAdd mocks base method.
func (m *MockWorkerClient) WorkerModelAdd(name, modelType, patternName string, dockerModel *sdk.ModelDocker, vmModel *sdk.ModelVirtualMachine, groupID int64) (sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelAdd", name, modelType, patternName, dockerModel, vmModel, groupID)
	ret0, _ := ret[0].(sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelAdd indicates an expected call of WorkerModelAdd.
func (mr *MockWorkerClientMockRecorder) WorkerModelAdd(name, modelType, patternName, dockerModel, vmModel, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelAdd", reflect.TypeOf((*MockWorkerClient)(nil).WorkerModelAdd), name, modelType, patternName, dockerModel, vmModel, groupID)
}

// WorkerModelBook mocks base method.
func (m *MockWorkerClient) WorkerModelBook(groupName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelBook", groupName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerModelBook indicates an expected call of WorkerModelBook.
func (mr *MockWorkerClientMockRecorder) WorkerModelBook(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelBook", reflect.TypeOf((*MockWorkerClient)(nil).WorkerModelBook), groupName, name)
}

// WorkerModelDelete mocks base method.
func (m *MockWorkerClient) WorkerModelDelete(groupName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelDelete", groupName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerModelDelete indicates an expected call of WorkerModelDelete.
func (mr *MockWorkerClientMockRecorder) WorkerModelDelete(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelDelete", reflect.TypeOf((*MockWorkerClient)(nil).WorkerModelDelete), groupName, name)
}

// WorkerModelEnabledList mocks base method.
func (m *MockWorkerClient) WorkerModelEnabledList() ([]sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelEnabledList")
	ret0, _ := ret[0].([]sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelEnabledList indicates an expected call of WorkerModelEnabledList.
func (mr *MockWorkerClientMockRecorder) WorkerModelEnabledList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelEnabledList", reflect.TypeOf((*MockWorkerClient)(nil).WorkerModelEnabledList))
}

// WorkerModelGet mocks base method.
func (m *MockWorkerClient) WorkerModelGet(groupName, name string) (sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelGet", groupName, name)
	ret0, _ := ret[0].(sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelGet indicates an expected call of WorkerModelGet.
func (mr *MockWorkerClientMockRecorder) WorkerModelGet(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelGet", reflect.TypeOf((*MockWorkerClient)(nil).WorkerModelGet), groupName, name)
}

// WorkerModelList mocks base method.
func (m *MockWorkerClient) WorkerModelList(arg0 *cdsclient.WorkerModelFilter) ([]sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelList", arg0)
	ret0, _ := ret[0].([]sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelList indicates an expected call of WorkerModelList.
func (mr *MockWorkerClientMockRecorder) WorkerModelList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelList", reflect.TypeOf((*MockWorkerClient)(nil).WorkerModelList), arg0)
}

// WorkerModelSecretList mocks base method.
func (m *MockWorkerClient) WorkerModelSecretList(groupName, name string) (sdk.WorkerModelSecrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelSecretList", groupName, name)
	ret0, _ := ret[0].(sdk.WorkerModelSecrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelSecretList indicates an expected call of WorkerModelSecretList.
func (mr *MockWorkerClientMockRecorder) WorkerModelSecretList(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelSecretList", reflect.TypeOf((*MockWorkerClient)(nil).WorkerModelSecretList), groupName, name)
}

// WorkerModelSpawnError mocks base method.
func (m *MockWorkerClient) WorkerModelSpawnError(groupName, name string, info sdk.SpawnErrorForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelSpawnError", groupName, name, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerModelSpawnError indicates an expected call of WorkerModelSpawnError.
func (mr *MockWorkerClientMockRecorder) WorkerModelSpawnError(groupName, name, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelSpawnError", reflect.TypeOf((*MockWorkerClient)(nil).WorkerModelSpawnError), groupName, name, info)
}

// WorkerModelv2List mocks base method.
func (m *MockWorkerClient) WorkerModelv2List(ctx context.Context, projKey, vcsIdentifier, repoIdentifier string, filter *cdsclient.WorkerModelV2Filter) ([]sdk.V2WorkerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelv2List", ctx, projKey, vcsIdentifier, repoIdentifier, filter)
	ret0, _ := ret[0].([]sdk.V2WorkerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelv2List indicates an expected call of WorkerModelv2List.
func (mr *MockWorkerClientMockRecorder) WorkerModelv2List(ctx, projKey, vcsIdentifier, repoIdentifier, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelv2List", reflect.TypeOf((*MockWorkerClient)(nil).WorkerModelv2List), ctx, projKey, vcsIdentifier, repoIdentifier, filter)
}

// WorkerRefresh mocks base method.
func (m *MockWorkerClient) WorkerRefresh(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerRefresh", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerRefresh indicates an expected call of WorkerRefresh.
func (mr *MockWorkerClientMockRecorder) WorkerRefresh(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerRefresh", reflect.TypeOf((*MockWorkerClient)(nil).WorkerRefresh), ctx)
}

// WorkerRegister mocks base method.
func (m *MockWorkerClient) WorkerRegister(ctx context.Context, authToken string, form sdk.WorkerRegistrationForm) (*sdk.Worker, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerRegister", ctx, authToken, form)
	ret0, _ := ret[0].(*sdk.Worker)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WorkerRegister indicates an expected call of WorkerRegister.
func (mr *MockWorkerClientMockRecorder) WorkerRegister(ctx, authToken, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerRegister", reflect.TypeOf((*MockWorkerClient)(nil).WorkerRegister), ctx, authToken, form)
}

// WorkerSetStatus mocks base method.
func (m *MockWorkerClient) WorkerSetStatus(ctx context.Context, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerSetStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerSetStatus indicates an expected call of WorkerSetStatus.
func (mr *MockWorkerClientMockRecorder) WorkerSetStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerSetStatus", reflect.TypeOf((*MockWorkerClient)(nil).WorkerSetStatus), ctx, status)
}

// WorkerUnregister mocks base method.
func (m *MockWorkerClient) WorkerUnregister(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerUnregister", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerUnregister indicates an expected call of WorkerUnregister.
func (mr *MockWorkerClientMockRecorder) WorkerUnregister(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerUnregister", reflect.TypeOf((*MockWorkerClient)(nil).WorkerUnregister), ctx)
}

// MockCDNClient is a mock of CDNClient interface.
type MockCDNClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNClientMockRecorder
}

// MockCDNClientMockRecorder is the mock recorder for MockCDNClient.
type MockCDNClientMockRecorder struct {
	mock *MockCDNClient
}

// NewMockCDNClient creates a new mock instance.
func NewMockCDNClient(ctrl *gomock.Controller) *MockCDNClient {
	mock := &MockCDNClient{ctrl: ctrl}
	mock.recorder = &MockCDNClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNClient) EXPECT() *MockCDNClientMockRecorder {
	return m.recorder
}

// CDNItemDownload mocks base method.
func (m *MockCDNClient) CDNItemDownload(ctx context.Context, cdnAddr, hash string, itemType sdk.CDNItemType, md5 string, writer io.WriteSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemDownload", ctx, cdnAddr, hash, itemType, md5, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CDNItemDownload indicates an expected call of CDNItemDownload.
func (mr *MockCDNClientMockRecorder) CDNItemDownload(ctx, cdnAddr, hash, itemType, md5, writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemDownload", reflect.TypeOf((*MockCDNClient)(nil).CDNItemDownload), ctx, cdnAddr, hash, itemType, md5, writer)
}

// CDNItemStream mocks base method.
func (m *MockCDNClient) CDNItemStream(ctx context.Context, cdnAddr, hash string, itemType sdk.CDNItemType) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemStream", ctx, cdnAddr, hash, itemType)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CDNItemStream indicates an expected call of CDNItemStream.
func (mr *MockCDNClientMockRecorder) CDNItemStream(ctx, cdnAddr, hash, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemStream", reflect.TypeOf((*MockCDNClient)(nil).CDNItemStream), ctx, cdnAddr, hash, itemType)
}

// CDNItemUpload mocks base method.
func (m *MockCDNClient) CDNItemUpload(ctx context.Context, cdnAddr, signature string, fs afero.Fs, path string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemUpload", ctx, cdnAddr, signature, fs, path)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CDNItemUpload indicates an expected call of CDNItemUpload.
func (mr *MockCDNClientMockRecorder) CDNItemUpload(ctx, cdnAddr, signature, fs, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemUpload", reflect.TypeOf((*MockCDNClient)(nil).CDNItemUpload), ctx, cdnAddr, signature, fs, path)
}

// MockHookClient is a mock of HookClient interface.
type MockHookClient struct {
	ctrl     *gomock.Controller
	recorder *MockHookClientMockRecorder
}

// MockHookClientMockRecorder is the mock recorder for MockHookClient.
type MockHookClientMockRecorder struct {
	mock *MockHookClient
}

// NewMockHookClient creates a new mock instance.
func NewMockHookClient(ctrl *gomock.Controller) *MockHookClient {
	mock := &MockHookClient{ctrl: ctrl}
	mock.recorder = &MockHookClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookClient) EXPECT() *MockHookClientMockRecorder {
	return m.recorder
}

// HookRepositoriesList mocks base method.
func (m *MockHookClient) HookRepositoriesList(ctx context.Context, vcsServer, repoName string) ([]sdk.ProjectRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HookRepositoriesList", ctx, vcsServer, repoName)
	ret0, _ := ret[0].([]sdk.ProjectRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HookRepositoriesList indicates an expected call of HookRepositoriesList.
func (mr *MockHookClientMockRecorder) HookRepositoriesList(ctx, vcsServer, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HookRepositoriesList", reflect.TypeOf((*MockHookClient)(nil).HookRepositoriesList), ctx, vcsServer, repoName)
}

// ListWorkflowToTrigger mocks base method.
func (m *MockHookClient) ListWorkflowToTrigger(ctx context.Context, req sdk.HookListWorkflowRequest) ([]sdk.V2WorkflowHook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowToTrigger", ctx, req)
	ret0, _ := ret[0].([]sdk.V2WorkflowHook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowToTrigger indicates an expected call of ListWorkflowToTrigger.
func (mr *MockHookClientMockRecorder) ListWorkflowToTrigger(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowToTrigger", reflect.TypeOf((*MockHookClient)(nil).ListWorkflowToTrigger), ctx, req)
}

// PollVCSEvents mocks base method.
func (m *MockHookClient) PollVCSEvents(uuid string, workflowID int64, vcsServer string, timestamp int64) (sdk.RepositoryEvents, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollVCSEvents", uuid, workflowID, vcsServer, timestamp)
	ret0, _ := ret[0].(sdk.RepositoryEvents)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PollVCSEvents indicates an expected call of PollVCSEvents.
func (mr *MockHookClientMockRecorder) PollVCSEvents(uuid, workflowID, vcsServer, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollVCSEvents", reflect.TypeOf((*MockHookClient)(nil).PollVCSEvents), uuid, workflowID, vcsServer, timestamp)
}

// RetrieveHookEventSigningKey mocks base method.
func (m *MockHookClient) RetrieveHookEventSigningKey(ctx context.Context, req sdk.HookRetrieveSignKeyRequest) (sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveHookEventSigningKey", ctx, req)
	ret0, _ := ret[0].(sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHookEventSigningKey indicates an expected call of RetrieveHookEventSigningKey.
func (mr *MockHookClientMockRecorder) RetrieveHookEventSigningKey(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHookEventSigningKey", reflect.TypeOf((*MockHookClient)(nil).RetrieveHookEventSigningKey), ctx, req)
}

// RetrieveHookEventSigningKeyOperation mocks base method.
func (m *MockHookClient) RetrieveHookEventSigningKeyOperation(ctx context.Context, operationUUID string) (sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveHookEventSigningKeyOperation", ctx, operationUUID)
	ret0, _ := ret[0].(sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHookEventSigningKeyOperation indicates an expected call of RetrieveHookEventSigningKeyOperation.
func (mr *MockHookClientMockRecorder) RetrieveHookEventSigningKeyOperation(ctx, operationUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHookEventSigningKeyOperation", reflect.TypeOf((*MockHookClient)(nil).RetrieveHookEventSigningKeyOperation), ctx, operationUUID)
}

// RetrieveHookEventUser mocks base method.
func (m *MockHookClient) RetrieveHookEventUser(ctx context.Context, req sdk.HookRetrieveUserRequest) (sdk.HookRetrieveUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveHookEventUser", ctx, req)
	ret0, _ := ret[0].(sdk.HookRetrieveUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHookEventUser indicates an expected call of RetrieveHookEventUser.
func (mr *MockHookClientMockRecorder) RetrieveHookEventUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHookEventUser", reflect.TypeOf((*MockHookClient)(nil).RetrieveHookEventUser), ctx, req)
}

// VCSConfiguration mocks base method.
func (m *MockHookClient) VCSConfiguration() (map[string]sdk.VCSConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VCSConfiguration")
	ret0, _ := ret[0].(map[string]sdk.VCSConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VCSConfiguration indicates an expected call of VCSConfiguration.
func (mr *MockHookClientMockRecorder) VCSConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VCSConfiguration", reflect.TypeOf((*MockHookClient)(nil).VCSConfiguration))
}

// VCSGerritConfiguration mocks base method.
func (m *MockHookClient) VCSGerritConfiguration() (map[string]sdk.VCSGerritConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VCSGerritConfiguration")
	ret0, _ := ret[0].(map[string]sdk.VCSGerritConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VCSGerritConfiguration indicates an expected call of VCSGerritConfiguration.
func (mr *MockHookClientMockRecorder) VCSGerritConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VCSGerritConfiguration", reflect.TypeOf((*MockHookClient)(nil).VCSGerritConfiguration))
}

// MockServiceClient is a mock of ServiceClient interface.
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClientMockRecorder
}

// MockServiceClientMockRecorder is the mock recorder for MockServiceClient.
type MockServiceClientMockRecorder struct {
	mock *MockServiceClient
}

// NewMockServiceClient creates a new mock instance.
func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &MockServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceClient) EXPECT() *MockServiceClientMockRecorder {
	return m.recorder
}

// ServiceConfigurationGet mocks base method.
func (m *MockServiceClient) ServiceConfigurationGet(arg0 context.Context, arg1 string) ([]sdk.ServiceConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceConfigurationGet", arg0, arg1)
	ret0, _ := ret[0].([]sdk.ServiceConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceConfigurationGet indicates an expected call of ServiceConfigurationGet.
func (mr *MockServiceClientMockRecorder) ServiceConfigurationGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceConfigurationGet", reflect.TypeOf((*MockServiceClient)(nil).ServiceConfigurationGet), arg0, arg1)
}

// MockWorkflowV2Client is a mock of WorkflowV2Client interface.
type MockWorkflowV2Client struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowV2ClientMockRecorder
}

// MockWorkflowV2ClientMockRecorder is the mock recorder for MockWorkflowV2Client.
type MockWorkflowV2ClientMockRecorder struct {
	mock *MockWorkflowV2Client
}

// NewMockWorkflowV2Client creates a new mock instance.
func NewMockWorkflowV2Client(ctrl *gomock.Controller) *MockWorkflowV2Client {
	mock := &MockWorkflowV2Client{ctrl: ctrl}
	mock.recorder = &MockWorkflowV2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowV2Client) EXPECT() *MockWorkflowV2ClientMockRecorder {
	return m.recorder
}

// WorkflowV2Run mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2Run(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, payload map[string]interface{}, mods ...cdsclient.RequestModifier) (*sdk.V2WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, payload}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV2Run", varargs...)
	ret0, _ := ret[0].(*sdk.V2WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2Run indicates an expected call of WorkflowV2Run.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2Run(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, payload interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, payload}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2Run", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2Run), varargs...)
}

// WorkflowV2RunFromHook mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2RunFromHook(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, runRequest sdk.V2WorkflowRunHookRequest, mods ...cdsclient.RequestModifier) (*sdk.V2WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runRequest}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV2RunFromHook", varargs...)
	ret0, _ := ret[0].(*sdk.V2WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunFromHook indicates an expected call of WorkflowV2RunFromHook.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2RunFromHook(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runRequest interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runRequest}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunFromHook", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2RunFromHook), varargs...)
}

// WorkflowV2RunInfoList mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2RunInfoList(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, runNumber int64, mods ...cdsclient.RequestModifier) ([]sdk.V2WorkflowRunInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV2RunInfoList", varargs...)
	ret0, _ := ret[0].([]sdk.V2WorkflowRunInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunInfoList indicates an expected call of WorkflowV2RunInfoList.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2RunInfoList(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunInfoList", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2RunInfoList), varargs...)
}

// WorkflowV2RunJob mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2RunJob(ctx context.Context, projKey, vcsId, repoId, wkfName, jobIdentifier string, runNumber int64) (*sdk.V2WorkflowRunJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2RunJob", ctx, projKey, vcsId, repoId, wkfName, jobIdentifier, runNumber)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunJob indicates an expected call of WorkflowV2RunJob.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2RunJob(ctx, projKey, vcsId, repoId, wkfName, jobIdentifier, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunJob", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2RunJob), ctx, projKey, vcsId, repoId, wkfName, jobIdentifier, runNumber)
}

// WorkflowV2RunJobLogLinks mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2RunJobLogLinks(ctx context.Context, projKey, vcsId, repoId, wkfName string, runNumber int64, jobName string) (sdk.CDNLogLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2RunJobLogLinks", ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName)
	ret0, _ := ret[0].(sdk.CDNLogLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunJobLogLinks indicates an expected call of WorkflowV2RunJobLogLinks.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2RunJobLogLinks(ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunJobLogLinks", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2RunJobLogLinks), ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName)
}

// WorkflowV2RunJobs mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2RunJobs(ctx context.Context, projKey, vcsId, repoId, wkfName string, runNumber int64) ([]sdk.V2WorkflowRunJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2RunJobs", ctx, projKey, vcsId, repoId, wkfName, runNumber)
	ret0, _ := ret[0].([]sdk.V2WorkflowRunJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunJobs indicates an expected call of WorkflowV2RunJobs.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2RunJobs(ctx, projKey, vcsId, repoId, wkfName, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunJobs", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2RunJobs), ctx, projKey, vcsId, repoId, wkfName, runNumber)
}

// WorkflowV2RunList mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2RunList(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, mods ...cdsclient.RequestModifier) ([]sdk.V2WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV2RunList", varargs...)
	ret0, _ := ret[0].([]sdk.V2WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunList indicates an expected call of WorkflowV2RunList.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2RunList(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunList", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2RunList), varargs...)
}

// WorkflowV2RunStatus mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2RunStatus(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, runNumber int64) (*sdk.V2WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2RunStatus", ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber)
	ret0, _ := ret[0].(*sdk.V2WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunStatus indicates an expected call of WorkflowV2RunStatus.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2RunStatus(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunStatus", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2RunStatus), ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber)
}

// WorkflowV2Stop mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2Stop(ctx context.Context, projKey, vcsId, repoId, wkfName string, runNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2Stop", ctx, projKey, vcsId, repoId, wkfName, runNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowV2Stop indicates an expected call of WorkflowV2Stop.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2Stop(ctx, projKey, vcsId, repoId, wkfName, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2Stop", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2Stop), ctx, projKey, vcsId, repoId, wkfName, runNumber)
}

// WorkflowV2StopJob mocks base method.
func (m *MockWorkflowV2Client) WorkflowV2StopJob(ctx context.Context, projKey, vcsId, repoId, wkfName string, runNumber int64, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2StopJob", ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowV2StopJob indicates an expected call of WorkflowV2StopJob.
func (mr *MockWorkflowV2ClientMockRecorder) WorkflowV2StopJob(ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2StopJob", reflect.TypeOf((*MockWorkflowV2Client)(nil).WorkflowV2StopJob), ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName)
}

// MockWorkflowClient is a mock of WorkflowClient interface.
type MockWorkflowClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowClientMockRecorder
}

// MockWorkflowClientMockRecorder is the mock recorder for MockWorkflowClient.
type MockWorkflowClientMockRecorder struct {
	mock *MockWorkflowClient
}

// NewMockWorkflowClient creates a new mock instance.
func NewMockWorkflowClient(ctrl *gomock.Controller) *MockWorkflowClient {
	mock := &MockWorkflowClient{ctrl: ctrl}
	mock.recorder = &MockWorkflowClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowClient) EXPECT() *MockWorkflowClientMockRecorder {
	return m.recorder
}

// WorkflowAccess mocks base method.
func (m *MockWorkflowClient) WorkflowAccess(ctx context.Context, projectKey string, workflowID int64, sessionID string, itemType sdk.CDNItemType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAccess", ctx, projectKey, workflowID, sessionID, itemType)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowAccess indicates an expected call of WorkflowAccess.
func (mr *MockWorkflowClientMockRecorder) WorkflowAccess(ctx, projectKey, workflowID, sessionID, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAccess", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowAccess), ctx, projectKey, workflowID, sessionID, itemType)
}

// WorkflowAllHooksExecutions mocks base method.
func (m *MockWorkflowClient) WorkflowAllHooksExecutions() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAllHooksExecutions")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAllHooksExecutions indicates an expected call of WorkflowAllHooksExecutions.
func (mr *MockWorkflowClientMockRecorder) WorkflowAllHooksExecutions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAllHooksExecutions", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowAllHooksExecutions))
}

// WorkflowAllHooksList mocks base method.
func (m *MockWorkflowClient) WorkflowAllHooksList() ([]sdk.NodeHook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAllHooksList")
	ret0, _ := ret[0].([]sdk.NodeHook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAllHooksList indicates an expected call of WorkflowAllHooksList.
func (mr *MockWorkflowClientMockRecorder) WorkflowAllHooksList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAllHooksList", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowAllHooksList))
}

// WorkflowDelete mocks base method.
func (m *MockWorkflowClient) WorkflowDelete(projectKey, workflowName string, opts ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, workflowName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowDelete indicates an expected call of WorkflowDelete.
func (mr *MockWorkflowClientMockRecorder) WorkflowDelete(projectKey, workflowName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, workflowName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowDelete", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowDelete), varargs...)
}

// WorkflowGet mocks base method.
func (m *MockWorkflowClient) WorkflowGet(projectKey, name string, opts ...cdsclient.RequestModifier) (*sdk.Workflow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowGet", varargs...)
	ret0, _ := ret[0].(*sdk.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowGet indicates an expected call of WorkflowGet.
func (mr *MockWorkflowClientMockRecorder) WorkflowGet(projectKey, name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowGet", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowGet), varargs...)
}

// WorkflowGroupAdd mocks base method.
func (m *MockWorkflowClient) WorkflowGroupAdd(projectKey, name, groupName string, permission int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowGroupAdd", projectKey, name, groupName, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowGroupAdd indicates an expected call of WorkflowGroupAdd.
func (mr *MockWorkflowClientMockRecorder) WorkflowGroupAdd(projectKey, name, groupName, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowGroupAdd", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowGroupAdd), projectKey, name, groupName, permission)
}

// WorkflowGroupDelete mocks base method.
func (m *MockWorkflowClient) WorkflowGroupDelete(projectKey, name, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowGroupDelete", projectKey, name, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowGroupDelete indicates an expected call of WorkflowGroupDelete.
func (mr *MockWorkflowClientMockRecorder) WorkflowGroupDelete(projectKey, name, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowGroupDelete", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowGroupDelete), projectKey, name, groupName)
}

// WorkflowLabelAdd mocks base method.
func (m *MockWorkflowClient) WorkflowLabelAdd(projectKey, name, labelName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowLabelAdd", projectKey, name, labelName)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowLabelAdd indicates an expected call of WorkflowLabelAdd.
func (mr *MockWorkflowClientMockRecorder) WorkflowLabelAdd(projectKey, name, labelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowLabelAdd", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowLabelAdd), projectKey, name, labelName)
}

// WorkflowLabelDelete mocks base method.
func (m *MockWorkflowClient) WorkflowLabelDelete(projectKey, name string, labelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowLabelDelete", projectKey, name, labelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowLabelDelete indicates an expected call of WorkflowLabelDelete.
func (mr *MockWorkflowClientMockRecorder) WorkflowLabelDelete(projectKey, name, labelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowLabelDelete", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowLabelDelete), projectKey, name, labelID)
}

// WorkflowList mocks base method.
func (m *MockWorkflowClient) WorkflowList(projectKey string, opts ...cdsclient.RequestModifier) ([]sdk.Workflow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowList", varargs...)
	ret0, _ := ret[0].([]sdk.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowList indicates an expected call of WorkflowList.
func (mr *MockWorkflowClientMockRecorder) WorkflowList(projectKey interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowList", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowList), varargs...)
}

// WorkflowLogDownload mocks base method.
func (m *MockWorkflowClient) WorkflowLogDownload(ctx context.Context, link sdk.CDNLogLink) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowLogDownload", ctx, link)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowLogDownload indicates an expected call of WorkflowLogDownload.
func (mr *MockWorkflowClientMockRecorder) WorkflowLogDownload(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowLogDownload", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowLogDownload), ctx, link)
}

// WorkflowNodeRun mocks base method.
func (m *MockWorkflowClient) WorkflowNodeRun(projectKey, name string, number, nodeRunID int64) (*sdk.WorkflowNodeRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRun", projectKey, name, number, nodeRunID)
	ret0, _ := ret[0].(*sdk.WorkflowNodeRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeRun indicates an expected call of WorkflowNodeRun.
func (mr *MockWorkflowClientMockRecorder) WorkflowNodeRun(projectKey, name, number, nodeRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRun", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowNodeRun), projectKey, name, number, nodeRunID)
}

// WorkflowNodeRunJobServiceLink mocks base method.
func (m *MockWorkflowClient) WorkflowNodeRunJobServiceLink(ctx context.Context, projectKey, workflowName string, nodeRunID, job int64, serviceName string) (*sdk.CDNLogLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRunJobServiceLink", ctx, projectKey, workflowName, nodeRunID, job, serviceName)
	ret0, _ := ret[0].(*sdk.CDNLogLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeRunJobServiceLink indicates an expected call of WorkflowNodeRunJobServiceLink.
func (mr *MockWorkflowClientMockRecorder) WorkflowNodeRunJobServiceLink(ctx, projectKey, workflowName, nodeRunID, job, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRunJobServiceLink", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowNodeRunJobServiceLink), ctx, projectKey, workflowName, nodeRunID, job, serviceName)
}

// WorkflowNodeRunJobStepLink mocks base method.
func (m *MockWorkflowClient) WorkflowNodeRunJobStepLink(ctx context.Context, projectKey, workflowName string, nodeRunID, job, step int64) (*sdk.CDNLogLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRunJobStepLink", ctx, projectKey, workflowName, nodeRunID, job, step)
	ret0, _ := ret[0].(*sdk.CDNLogLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeRunJobStepLink indicates an expected call of WorkflowNodeRunJobStepLink.
func (mr *MockWorkflowClientMockRecorder) WorkflowNodeRunJobStepLink(ctx, projectKey, workflowName, nodeRunID, job, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRunJobStepLink", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowNodeRunJobStepLink), ctx, projectKey, workflowName, nodeRunID, job, step)
}

// WorkflowNodeRunJobStepLinks mocks base method.
func (m *MockWorkflowClient) WorkflowNodeRunJobStepLinks(ctx context.Context, projectKey, workflowName string, nodeRunID, job int64) (*sdk.CDNLogLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRunJobStepLinks", ctx, projectKey, workflowName, nodeRunID, job)
	ret0, _ := ret[0].(*sdk.CDNLogLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeRunJobStepLinks indicates an expected call of WorkflowNodeRunJobStepLinks.
func (mr *MockWorkflowClientMockRecorder) WorkflowNodeRunJobStepLinks(ctx, projectKey, workflowName, nodeRunID, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRunJobStepLinks", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowNodeRunJobStepLinks), ctx, projectKey, workflowName, nodeRunID, job)
}

// WorkflowNodeRunRelease mocks base method.
func (m *MockWorkflowClient) WorkflowNodeRunRelease(projectKey, workflowName string, runNumber, nodeRunID int64, release sdk.WorkflowNodeRunRelease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRunRelease", projectKey, workflowName, runNumber, nodeRunID, release)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowNodeRunRelease indicates an expected call of WorkflowNodeRunRelease.
func (mr *MockWorkflowClientMockRecorder) WorkflowNodeRunRelease(projectKey, workflowName, runNumber, nodeRunID, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRunRelease", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowNodeRunRelease), projectKey, workflowName, runNumber, nodeRunID, release)
}

// WorkflowNodeStop mocks base method.
func (m *MockWorkflowClient) WorkflowNodeStop(projectKey, workflowName string, number, fromNodeID int64) (*sdk.WorkflowNodeRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeStop", projectKey, workflowName, number, fromNodeID)
	ret0, _ := ret[0].(*sdk.WorkflowNodeRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeStop indicates an expected call of WorkflowNodeStop.
func (mr *MockWorkflowClientMockRecorder) WorkflowNodeStop(projectKey, workflowName, number, fromNodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeStop", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowNodeStop), projectKey, workflowName, number, fromNodeID)
}

// WorkflowRunArtifactsLinks mocks base method.
func (m *MockWorkflowClient) WorkflowRunArtifactsLinks(projectKey, name string, number int64) (sdk.CDNItemLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunArtifactsLinks", projectKey, name, number)
	ret0, _ := ret[0].(sdk.CDNItemLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunArtifactsLinks indicates an expected call of WorkflowRunArtifactsLinks.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunArtifactsLinks(projectKey, name, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunArtifactsLinks", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunArtifactsLinks), projectKey, name, number)
}

// WorkflowRunDelete mocks base method.
func (m *MockWorkflowClient) WorkflowRunDelete(projectKey, workflowName string, runNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunDelete", projectKey, workflowName, runNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowRunDelete indicates an expected call of WorkflowRunDelete.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunDelete(projectKey, workflowName, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunDelete", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunDelete), projectKey, workflowName, runNumber)
}

// WorkflowRunFromHook mocks base method.
func (m *MockWorkflowClient) WorkflowRunFromHook(projectKey, workflowName string, hook sdk.WorkflowNodeRunHookEvent) (*sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunFromHook", projectKey, workflowName, hook)
	ret0, _ := ret[0].(*sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunFromHook indicates an expected call of WorkflowRunFromHook.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunFromHook(projectKey, workflowName, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunFromHook", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunFromHook), projectKey, workflowName, hook)
}

// WorkflowRunFromManual mocks base method.
func (m *MockWorkflowClient) WorkflowRunFromManual(projectKey, workflowName string, manual sdk.WorkflowNodeRunManual, number, fromNodeID int64) (*sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunFromManual", projectKey, workflowName, manual, number, fromNodeID)
	ret0, _ := ret[0].(*sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunFromManual indicates an expected call of WorkflowRunFromManual.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunFromManual(projectKey, workflowName, manual, number, fromNodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunFromManual", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunFromManual), projectKey, workflowName, manual, number, fromNodeID)
}

// WorkflowRunGet mocks base method.
func (m *MockWorkflowClient) WorkflowRunGet(projectKey, workflowName string, number int64) (*sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunGet", projectKey, workflowName, number)
	ret0, _ := ret[0].(*sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunGet indicates an expected call of WorkflowRunGet.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunGet(projectKey, workflowName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunGet", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunGet), projectKey, workflowName, number)
}

// WorkflowRunList mocks base method.
func (m *MockWorkflowClient) WorkflowRunList(projectKey, workflowName string, offset, limit int64) ([]sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunList", projectKey, workflowName, offset, limit)
	ret0, _ := ret[0].([]sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunList indicates an expected call of WorkflowRunList.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunList(projectKey, workflowName, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunList", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunList), projectKey, workflowName, offset, limit)
}

// WorkflowRunNumberGet mocks base method.
func (m *MockWorkflowClient) WorkflowRunNumberGet(projectKey, workflowName string) (*sdk.WorkflowRunNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunNumberGet", projectKey, workflowName)
	ret0, _ := ret[0].(*sdk.WorkflowRunNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunNumberGet indicates an expected call of WorkflowRunNumberGet.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunNumberGet(projectKey, workflowName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunNumberGet", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunNumberGet), projectKey, workflowName)
}

// WorkflowRunNumberSet mocks base method.
func (m *MockWorkflowClient) WorkflowRunNumberSet(projectKey, workflowName string, number int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunNumberSet", projectKey, workflowName, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowRunNumberSet indicates an expected call of WorkflowRunNumberSet.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunNumberSet(projectKey, workflowName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunNumberSet", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunNumberSet), projectKey, workflowName, number)
}

// WorkflowRunResultsList mocks base method.
func (m *MockWorkflowClient) WorkflowRunResultsList(ctx context.Context, projectKey, name string, number int64) ([]sdk.WorkflowRunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunResultsList", ctx, projectKey, name, number)
	ret0, _ := ret[0].([]sdk.WorkflowRunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunResultsList indicates an expected call of WorkflowRunResultsList.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunResultsList(ctx, projectKey, name, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunResultsList", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunResultsList), ctx, projectKey, name, number)
}

// WorkflowRunSearch mocks base method.
func (m *MockWorkflowClient) WorkflowRunSearch(projectKey string, offset, limit int64, filter ...cdsclient.Filter) ([]sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, offset, limit}
	for _, a := range filter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowRunSearch", varargs...)
	ret0, _ := ret[0].([]sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunSearch indicates an expected call of WorkflowRunSearch.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunSearch(projectKey, offset, limit interface{}, filter ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, offset, limit}, filter...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunSearch", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunSearch), varargs...)
}

// WorkflowRunsDeleteByBranch mocks base method.
func (m *MockWorkflowClient) WorkflowRunsDeleteByBranch(projectKey, workflowName, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunsDeleteByBranch", projectKey, workflowName, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowRunsDeleteByBranch indicates an expected call of WorkflowRunsDeleteByBranch.
func (mr *MockWorkflowClientMockRecorder) WorkflowRunsDeleteByBranch(projectKey, workflowName, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunsDeleteByBranch", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowRunsDeleteByBranch), projectKey, workflowName, branch)
}

// WorkflowSearch mocks base method.
func (m *MockWorkflowClient) WorkflowSearch(opts ...cdsclient.RequestModifier) ([]sdk.Workflow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowSearch", varargs...)
	ret0, _ := ret[0].([]sdk.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowSearch indicates an expected call of WorkflowSearch.
func (mr *MockWorkflowClientMockRecorder) WorkflowSearch(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowSearch", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowSearch), opts...)
}

// WorkflowStop mocks base method.
func (m *MockWorkflowClient) WorkflowStop(projectKey, workflowName string, number int64) (*sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowStop", projectKey, workflowName, number)
	ret0, _ := ret[0].(*sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowStop indicates an expected call of WorkflowStop.
func (mr *MockWorkflowClientMockRecorder) WorkflowStop(projectKey, workflowName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowStop", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowStop), projectKey, workflowName, number)
}

// WorkflowTransformAsCode mocks base method.
func (m *MockWorkflowClient) WorkflowTransformAsCode(projectKey, workflowName, branch, message string) (*sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowTransformAsCode", projectKey, workflowName, branch, message)
	ret0, _ := ret[0].(*sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowTransformAsCode indicates an expected call of WorkflowTransformAsCode.
func (mr *MockWorkflowClientMockRecorder) WorkflowTransformAsCode(projectKey, workflowName, branch, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowTransformAsCode", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowTransformAsCode), projectKey, workflowName, branch, message)
}

// WorkflowUpdate mocks base method.
func (m *MockWorkflowClient) WorkflowUpdate(projectKey, name string, wf *sdk.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowUpdate", projectKey, name, wf)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowUpdate indicates an expected call of WorkflowUpdate.
func (mr *MockWorkflowClientMockRecorder) WorkflowUpdate(projectKey, name, wf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowUpdate", reflect.TypeOf((*MockWorkflowClient)(nil).WorkflowUpdate), projectKey, name, wf)
}

// MockWorkflowV3Client is a mock of WorkflowV3Client interface.
type MockWorkflowV3Client struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowV3ClientMockRecorder
}

// MockWorkflowV3ClientMockRecorder is the mock recorder for MockWorkflowV3Client.
type MockWorkflowV3ClientMockRecorder struct {
	mock *MockWorkflowV3Client
}

// NewMockWorkflowV3Client creates a new mock instance.
func NewMockWorkflowV3Client(ctrl *gomock.Controller) *MockWorkflowV3Client {
	mock := &MockWorkflowV3Client{ctrl: ctrl}
	mock.recorder = &MockWorkflowV3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowV3Client) EXPECT() *MockWorkflowV3ClientMockRecorder {
	return m.recorder
}

// WorkflowV3Get mocks base method.
func (m *MockWorkflowV3Client) WorkflowV3Get(projectKey, workflowName string, opts ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, workflowName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV3Get", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV3Get indicates an expected call of WorkflowV3Get.
func (mr *MockWorkflowV3ClientMockRecorder) WorkflowV3Get(projectKey, workflowName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, workflowName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV3Get", reflect.TypeOf((*MockWorkflowV3Client)(nil).WorkflowV3Get), varargs...)
}

// MockMonitoringClient is a mock of MonitoringClient interface.
type MockMonitoringClient struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringClientMockRecorder
}

// MockMonitoringClientMockRecorder is the mock recorder for MockMonitoringClient.
type MockMonitoringClientMockRecorder struct {
	mock *MockMonitoringClient
}

// NewMockMonitoringClient creates a new mock instance.
func NewMockMonitoringClient(ctrl *gomock.Controller) *MockMonitoringClient {
	mock := &MockMonitoringClient{ctrl: ctrl}
	mock.recorder = &MockMonitoringClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitoringClient) EXPECT() *MockMonitoringClientMockRecorder {
	return m.recorder
}

// MonDBMigrate mocks base method.
func (m *MockMonitoringClient) MonDBMigrate() ([]sdk.MonDBMigrate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonDBMigrate")
	ret0, _ := ret[0].([]sdk.MonDBMigrate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonDBMigrate indicates an expected call of MonDBMigrate.
func (mr *MockMonitoringClientMockRecorder) MonDBMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonDBMigrate", reflect.TypeOf((*MockMonitoringClient)(nil).MonDBMigrate))
}

// MonStatus mocks base method.
func (m *MockMonitoringClient) MonStatus() (*sdk.MonitoringStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonStatus")
	ret0, _ := ret[0].(*sdk.MonitoringStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonStatus indicates an expected call of MonStatus.
func (mr *MockMonitoringClientMockRecorder) MonStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonStatus", reflect.TypeOf((*MockMonitoringClient)(nil).MonStatus))
}

// MonVersion mocks base method.
func (m *MockMonitoringClient) MonVersion() (*sdk.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonVersion")
	ret0, _ := ret[0].(*sdk.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonVersion indicates an expected call of MonVersion.
func (mr *MockMonitoringClientMockRecorder) MonVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonVersion", reflect.TypeOf((*MockMonitoringClient)(nil).MonVersion))
}

// MockIntegrationClient is a mock of IntegrationClient interface.
type MockIntegrationClient struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationClientMockRecorder
}

// MockIntegrationClientMockRecorder is the mock recorder for MockIntegrationClient.
type MockIntegrationClientMockRecorder struct {
	mock *MockIntegrationClient
}

// NewMockIntegrationClient creates a new mock instance.
func NewMockIntegrationClient(ctrl *gomock.Controller) *MockIntegrationClient {
	mock := &MockIntegrationClient{ctrl: ctrl}
	mock.recorder = &MockIntegrationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegrationClient) EXPECT() *MockIntegrationClientMockRecorder {
	return m.recorder
}

// IntegrationModelAdd mocks base method.
func (m_2 *MockIntegrationClient) IntegrationModelAdd(m *sdk.IntegrationModel) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "IntegrationModelAdd", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// IntegrationModelAdd indicates an expected call of IntegrationModelAdd.
func (mr *MockIntegrationClientMockRecorder) IntegrationModelAdd(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelAdd", reflect.TypeOf((*MockIntegrationClient)(nil).IntegrationModelAdd), m)
}

// IntegrationModelDelete mocks base method.
func (m *MockIntegrationClient) IntegrationModelDelete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntegrationModelDelete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// IntegrationModelDelete indicates an expected call of IntegrationModelDelete.
func (mr *MockIntegrationClientMockRecorder) IntegrationModelDelete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelDelete", reflect.TypeOf((*MockIntegrationClient)(nil).IntegrationModelDelete), name)
}

// IntegrationModelGet mocks base method.
func (m *MockIntegrationClient) IntegrationModelGet(name string) (sdk.IntegrationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntegrationModelGet", name)
	ret0, _ := ret[0].(sdk.IntegrationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntegrationModelGet indicates an expected call of IntegrationModelGet.
func (mr *MockIntegrationClientMockRecorder) IntegrationModelGet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelGet", reflect.TypeOf((*MockIntegrationClient)(nil).IntegrationModelGet), name)
}

// IntegrationModelList mocks base method.
func (m *MockIntegrationClient) IntegrationModelList() ([]sdk.IntegrationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntegrationModelList")
	ret0, _ := ret[0].([]sdk.IntegrationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntegrationModelList indicates an expected call of IntegrationModelList.
func (mr *MockIntegrationClientMockRecorder) IntegrationModelList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelList", reflect.TypeOf((*MockIntegrationClient)(nil).IntegrationModelList))
}

// IntegrationModelUpdate mocks base method.
func (m_2 *MockIntegrationClient) IntegrationModelUpdate(m *sdk.IntegrationModel) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "IntegrationModelUpdate", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// IntegrationModelUpdate indicates an expected call of IntegrationModelUpdate.
func (mr *MockIntegrationClientMockRecorder) IntegrationModelUpdate(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelUpdate", reflect.TypeOf((*MockIntegrationClient)(nil).IntegrationModelUpdate), m)
}

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// APIURL mocks base method.
func (m *MockInterface) APIURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// APIURL indicates an expected call of APIURL.
func (mr *MockInterfaceMockRecorder) APIURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIURL", reflect.TypeOf((*MockInterface)(nil).APIURL))
}

// ActionBuiltinGet mocks base method.
func (m *MockInterface) ActionBuiltinGet(name string, mods ...cdsclient.RequestModifier) (*sdk.Action, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionBuiltinGet", varargs...)
	ret0, _ := ret[0].(*sdk.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionBuiltinGet indicates an expected call of ActionBuiltinGet.
func (mr *MockInterfaceMockRecorder) ActionBuiltinGet(name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionBuiltinGet", reflect.TypeOf((*MockInterface)(nil).ActionBuiltinGet), varargs...)
}

// ActionBuiltinList mocks base method.
func (m *MockInterface) ActionBuiltinList() ([]sdk.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionBuiltinList")
	ret0, _ := ret[0].([]sdk.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionBuiltinList indicates an expected call of ActionBuiltinList.
func (mr *MockInterfaceMockRecorder) ActionBuiltinList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionBuiltinList", reflect.TypeOf((*MockInterface)(nil).ActionBuiltinList))
}

// ActionDelete mocks base method.
func (m *MockInterface) ActionDelete(groupName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionDelete", groupName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionDelete indicates an expected call of ActionDelete.
func (mr *MockInterfaceMockRecorder) ActionDelete(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionDelete", reflect.TypeOf((*MockInterface)(nil).ActionDelete), groupName, name)
}

// ActionExport mocks base method.
func (m *MockInterface) ActionExport(groupName, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionExport indicates an expected call of ActionExport.
func (mr *MockInterfaceMockRecorder) ActionExport(groupName, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionExport", reflect.TypeOf((*MockInterface)(nil).ActionExport), varargs...)
}

// ActionGet mocks base method.
func (m *MockInterface) ActionGet(groupName, name string, mods ...cdsclient.RequestModifier) (*sdk.Action, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionGet", varargs...)
	ret0, _ := ret[0].(*sdk.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionGet indicates an expected call of ActionGet.
func (mr *MockInterfaceMockRecorder) ActionGet(groupName, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionGet", reflect.TypeOf((*MockInterface)(nil).ActionGet), varargs...)
}

// ActionImport mocks base method.
func (m *MockInterface) ActionImport(content io.Reader, mods ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionImport", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionImport indicates an expected call of ActionImport.
func (mr *MockInterfaceMockRecorder) ActionImport(content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionImport", reflect.TypeOf((*MockInterface)(nil).ActionImport), varargs...)
}

// ActionList mocks base method.
func (m *MockInterface) ActionList() ([]sdk.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionList")
	ret0, _ := ret[0].([]sdk.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionList indicates an expected call of ActionList.
func (mr *MockInterfaceMockRecorder) ActionList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionList", reflect.TypeOf((*MockInterface)(nil).ActionList))
}

// ActionUsage mocks base method.
func (m *MockInterface) ActionUsage(groupName, name string, mods ...cdsclient.RequestModifier) (*sdk.ActionUsages, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionUsage", varargs...)
	ret0, _ := ret[0].(*sdk.ActionUsages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionUsage indicates an expected call of ActionUsage.
func (mr *MockInterfaceMockRecorder) ActionUsage(groupName, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionUsage", reflect.TypeOf((*MockInterface)(nil).ActionUsage), varargs...)
}

// AdminCDSMigrationCancel mocks base method.
func (m *MockInterface) AdminCDSMigrationCancel(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCDSMigrationCancel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminCDSMigrationCancel indicates an expected call of AdminCDSMigrationCancel.
func (mr *MockInterfaceMockRecorder) AdminCDSMigrationCancel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCDSMigrationCancel", reflect.TypeOf((*MockInterface)(nil).AdminCDSMigrationCancel), id)
}

// AdminCDSMigrationList mocks base method.
func (m *MockInterface) AdminCDSMigrationList() ([]sdk.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCDSMigrationList")
	ret0, _ := ret[0].([]sdk.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCDSMigrationList indicates an expected call of AdminCDSMigrationList.
func (mr *MockInterfaceMockRecorder) AdminCDSMigrationList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCDSMigrationList", reflect.TypeOf((*MockInterface)(nil).AdminCDSMigrationList))
}

// AdminCDSMigrationReset mocks base method.
func (m *MockInterface) AdminCDSMigrationReset(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminCDSMigrationReset", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminCDSMigrationReset indicates an expected call of AdminCDSMigrationReset.
func (mr *MockInterfaceMockRecorder) AdminCDSMigrationReset(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCDSMigrationReset", reflect.TypeOf((*MockInterface)(nil).AdminCDSMigrationReset), id)
}

// AdminDatabaseListEncryptedEntities mocks base method.
func (m *MockInterface) AdminDatabaseListEncryptedEntities(service string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseListEncryptedEntities", service)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDatabaseListEncryptedEntities indicates an expected call of AdminDatabaseListEncryptedEntities.
func (mr *MockInterfaceMockRecorder) AdminDatabaseListEncryptedEntities(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseListEncryptedEntities", reflect.TypeOf((*MockInterface)(nil).AdminDatabaseListEncryptedEntities), service)
}

// AdminDatabaseMigrationDelete mocks base method.
func (m *MockInterface) AdminDatabaseMigrationDelete(service, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseMigrationDelete", service, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseMigrationDelete indicates an expected call of AdminDatabaseMigrationDelete.
func (mr *MockInterfaceMockRecorder) AdminDatabaseMigrationDelete(service, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseMigrationDelete", reflect.TypeOf((*MockInterface)(nil).AdminDatabaseMigrationDelete), service, id)
}

// AdminDatabaseMigrationUnlock mocks base method.
func (m *MockInterface) AdminDatabaseMigrationUnlock(service, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseMigrationUnlock", service, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseMigrationUnlock indicates an expected call of AdminDatabaseMigrationUnlock.
func (mr *MockInterfaceMockRecorder) AdminDatabaseMigrationUnlock(service, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseMigrationUnlock", reflect.TypeOf((*MockInterface)(nil).AdminDatabaseMigrationUnlock), service, id)
}

// AdminDatabaseMigrationsList mocks base method.
func (m *MockInterface) AdminDatabaseMigrationsList(service string) ([]sdk.DatabaseMigrationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseMigrationsList", service)
	ret0, _ := ret[0].([]sdk.DatabaseMigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDatabaseMigrationsList indicates an expected call of AdminDatabaseMigrationsList.
func (mr *MockInterfaceMockRecorder) AdminDatabaseMigrationsList(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseMigrationsList", reflect.TypeOf((*MockInterface)(nil).AdminDatabaseMigrationsList), service)
}

// AdminDatabaseRollAllEncryptedEntities mocks base method.
func (m *MockInterface) AdminDatabaseRollAllEncryptedEntities(service string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseRollAllEncryptedEntities", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseRollAllEncryptedEntities indicates an expected call of AdminDatabaseRollAllEncryptedEntities.
func (mr *MockInterfaceMockRecorder) AdminDatabaseRollAllEncryptedEntities(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseRollAllEncryptedEntities", reflect.TypeOf((*MockInterface)(nil).AdminDatabaseRollAllEncryptedEntities), service)
}

// AdminDatabaseRollEncryptedEntity mocks base method.
func (m *MockInterface) AdminDatabaseRollEncryptedEntity(service, e string, idx *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseRollEncryptedEntity", service, e, idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseRollEncryptedEntity indicates an expected call of AdminDatabaseRollEncryptedEntity.
func (mr *MockInterfaceMockRecorder) AdminDatabaseRollEncryptedEntity(service, e, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseRollEncryptedEntity", reflect.TypeOf((*MockInterface)(nil).AdminDatabaseRollEncryptedEntity), service, e, idx)
}

// AdminDatabaseSignaturesResume mocks base method.
func (m *MockInterface) AdminDatabaseSignaturesResume(service string) (sdk.CanonicalFormUsageResume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseSignaturesResume", service)
	ret0, _ := ret[0].(sdk.CanonicalFormUsageResume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDatabaseSignaturesResume indicates an expected call of AdminDatabaseSignaturesResume.
func (mr *MockInterfaceMockRecorder) AdminDatabaseSignaturesResume(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseSignaturesResume", reflect.TypeOf((*MockInterface)(nil).AdminDatabaseSignaturesResume), service)
}

// AdminDatabaseSignaturesRollAllEntities mocks base method.
func (m *MockInterface) AdminDatabaseSignaturesRollAllEntities(service string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseSignaturesRollAllEntities", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseSignaturesRollAllEntities indicates an expected call of AdminDatabaseSignaturesRollAllEntities.
func (mr *MockInterfaceMockRecorder) AdminDatabaseSignaturesRollAllEntities(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseSignaturesRollAllEntities", reflect.TypeOf((*MockInterface)(nil).AdminDatabaseSignaturesRollAllEntities), service)
}

// AdminDatabaseSignaturesRollEntity mocks base method.
func (m *MockInterface) AdminDatabaseSignaturesRollEntity(service, e string, idx *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDatabaseSignaturesRollEntity", service, e, idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDatabaseSignaturesRollEntity indicates an expected call of AdminDatabaseSignaturesRollEntity.
func (mr *MockInterfaceMockRecorder) AdminDatabaseSignaturesRollEntity(service, e, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDatabaseSignaturesRollEntity", reflect.TypeOf((*MockInterface)(nil).AdminDatabaseSignaturesRollEntity), service, e, idx)
}

// AdminOrganizationCreate mocks base method.
func (m *MockInterface) AdminOrganizationCreate(ctx context.Context, orga sdk.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrganizationCreate", ctx, orga)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminOrganizationCreate indicates an expected call of AdminOrganizationCreate.
func (mr *MockInterfaceMockRecorder) AdminOrganizationCreate(ctx, orga interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrganizationCreate", reflect.TypeOf((*MockInterface)(nil).AdminOrganizationCreate), ctx, orga)
}

// AdminOrganizationDelete mocks base method.
func (m *MockInterface) AdminOrganizationDelete(ctx context.Context, orgaIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrganizationDelete", ctx, orgaIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminOrganizationDelete indicates an expected call of AdminOrganizationDelete.
func (mr *MockInterfaceMockRecorder) AdminOrganizationDelete(ctx, orgaIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrganizationDelete", reflect.TypeOf((*MockInterface)(nil).AdminOrganizationDelete), ctx, orgaIdentifier)
}

// AdminOrganizationList mocks base method.
func (m *MockInterface) AdminOrganizationList(ctx context.Context) ([]sdk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrganizationList", ctx)
	ret0, _ := ret[0].([]sdk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminOrganizationList indicates an expected call of AdminOrganizationList.
func (mr *MockInterfaceMockRecorder) AdminOrganizationList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrganizationList", reflect.TypeOf((*MockInterface)(nil).AdminOrganizationList), ctx)
}

// AdminOrganizationMigrateUser mocks base method.
func (m *MockInterface) AdminOrganizationMigrateUser(ctx context.Context, orgaIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrganizationMigrateUser", ctx, orgaIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminOrganizationMigrateUser indicates an expected call of AdminOrganizationMigrateUser.
func (mr *MockInterfaceMockRecorder) AdminOrganizationMigrateUser(ctx, orgaIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrganizationMigrateUser", reflect.TypeOf((*MockInterface)(nil).AdminOrganizationMigrateUser), ctx, orgaIdentifier)
}

// AdminWorkflowUpdateMaxRuns mocks base method.
func (m *MockInterface) AdminWorkflowUpdateMaxRuns(projectKey, workflowName string, maxRuns int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminWorkflowUpdateMaxRuns", projectKey, workflowName, maxRuns)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminWorkflowUpdateMaxRuns indicates an expected call of AdminWorkflowUpdateMaxRuns.
func (mr *MockInterfaceMockRecorder) AdminWorkflowUpdateMaxRuns(projectKey, workflowName, maxRuns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminWorkflowUpdateMaxRuns", reflect.TypeOf((*MockInterface)(nil).AdminWorkflowUpdateMaxRuns), projectKey, workflowName, maxRuns)
}

// ApplicationAttachToReposistoriesManager mocks base method.
func (m *MockInterface) ApplicationAttachToReposistoriesManager(projectKey, appName, reposManager, repoFullname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationAttachToReposistoriesManager", projectKey, appName, reposManager, repoFullname)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationAttachToReposistoriesManager indicates an expected call of ApplicationAttachToReposistoriesManager.
func (mr *MockInterfaceMockRecorder) ApplicationAttachToReposistoriesManager(projectKey, appName, reposManager, repoFullname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationAttachToReposistoriesManager", reflect.TypeOf((*MockInterface)(nil).ApplicationAttachToReposistoriesManager), projectKey, appName, reposManager, repoFullname)
}

// ApplicationCreate mocks base method.
func (m *MockInterface) ApplicationCreate(projectKey string, app *sdk.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCreate", projectKey, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCreate indicates an expected call of ApplicationCreate.
func (mr *MockInterfaceMockRecorder) ApplicationCreate(projectKey, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCreate", reflect.TypeOf((*MockInterface)(nil).ApplicationCreate), projectKey, app)
}

// ApplicationDelete mocks base method.
func (m *MockInterface) ApplicationDelete(projectKey, appName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationDelete", projectKey, appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationDelete indicates an expected call of ApplicationDelete.
func (mr *MockInterfaceMockRecorder) ApplicationDelete(projectKey, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationDelete", reflect.TypeOf((*MockInterface)(nil).ApplicationDelete), projectKey, appName)
}

// ApplicationExport mocks base method.
func (m *MockInterface) ApplicationExport(projectKey, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationExport indicates an expected call of ApplicationExport.
func (mr *MockInterfaceMockRecorder) ApplicationExport(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationExport", reflect.TypeOf((*MockInterface)(nil).ApplicationExport), varargs...)
}

// ApplicationGet mocks base method.
func (m *MockInterface) ApplicationGet(projectKey, appName string, opts ...cdsclient.RequestModifier) (*sdk.Application, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, appName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationGet", varargs...)
	ret0, _ := ret[0].(*sdk.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationGet indicates an expected call of ApplicationGet.
func (mr *MockInterfaceMockRecorder) ApplicationGet(projectKey, appName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, appName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGet", reflect.TypeOf((*MockInterface)(nil).ApplicationGet), varargs...)
}

// ApplicationImport mocks base method.
func (m *MockInterface) ApplicationImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationImport", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationImport indicates an expected call of ApplicationImport.
func (mr *MockInterfaceMockRecorder) ApplicationImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationImport", reflect.TypeOf((*MockInterface)(nil).ApplicationImport), varargs...)
}

// ApplicationKeyCreate mocks base method.
func (m *MockInterface) ApplicationKeyCreate(projectKey, appName string, keyApp *sdk.ApplicationKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationKeyCreate", projectKey, appName, keyApp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationKeyCreate indicates an expected call of ApplicationKeyCreate.
func (mr *MockInterfaceMockRecorder) ApplicationKeyCreate(projectKey, appName, keyApp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationKeyCreate", reflect.TypeOf((*MockInterface)(nil).ApplicationKeyCreate), projectKey, appName, keyApp)
}

// ApplicationKeysDelete mocks base method.
func (m *MockInterface) ApplicationKeysDelete(projectKey, appName, KeyAppName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationKeysDelete", projectKey, appName, KeyAppName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationKeysDelete indicates an expected call of ApplicationKeysDelete.
func (mr *MockInterfaceMockRecorder) ApplicationKeysDelete(projectKey, appName, KeyAppName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationKeysDelete", reflect.TypeOf((*MockInterface)(nil).ApplicationKeysDelete), projectKey, appName, KeyAppName)
}

// ApplicationKeysList mocks base method.
func (m *MockInterface) ApplicationKeysList(projectKey, appName string) ([]sdk.ApplicationKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationKeysList", projectKey, appName)
	ret0, _ := ret[0].([]sdk.ApplicationKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationKeysList indicates an expected call of ApplicationKeysList.
func (mr *MockInterfaceMockRecorder) ApplicationKeysList(projectKey, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationKeysList", reflect.TypeOf((*MockInterface)(nil).ApplicationKeysList), projectKey, appName)
}

// ApplicationList mocks base method.
func (m *MockInterface) ApplicationList(projectKey string) ([]sdk.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationList", projectKey)
	ret0, _ := ret[0].([]sdk.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationList indicates an expected call of ApplicationList.
func (mr *MockInterfaceMockRecorder) ApplicationList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationList", reflect.TypeOf((*MockInterface)(nil).ApplicationList), projectKey)
}

// ApplicationUpdate mocks base method.
func (m *MockInterface) ApplicationUpdate(projectKey, appName string, app *sdk.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationUpdate", projectKey, appName, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationUpdate indicates an expected call of ApplicationUpdate.
func (mr *MockInterfaceMockRecorder) ApplicationUpdate(projectKey, appName, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationUpdate", reflect.TypeOf((*MockInterface)(nil).ApplicationUpdate), projectKey, appName, app)
}

// ApplicationVariableCreate mocks base method.
func (m *MockInterface) ApplicationVariableCreate(projectKey, appName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableCreate", projectKey, appName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationVariableCreate indicates an expected call of ApplicationVariableCreate.
func (mr *MockInterfaceMockRecorder) ApplicationVariableCreate(projectKey, appName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableCreate", reflect.TypeOf((*MockInterface)(nil).ApplicationVariableCreate), projectKey, appName, variable)
}

// ApplicationVariableDelete mocks base method.
func (m *MockInterface) ApplicationVariableDelete(projectKey, appName, varName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableDelete", projectKey, appName, varName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationVariableDelete indicates an expected call of ApplicationVariableDelete.
func (mr *MockInterfaceMockRecorder) ApplicationVariableDelete(projectKey, appName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableDelete", reflect.TypeOf((*MockInterface)(nil).ApplicationVariableDelete), projectKey, appName, varName)
}

// ApplicationVariableGet mocks base method.
func (m *MockInterface) ApplicationVariableGet(projectKey, appName, varName string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableGet", projectKey, appName, varName)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationVariableGet indicates an expected call of ApplicationVariableGet.
func (mr *MockInterfaceMockRecorder) ApplicationVariableGet(projectKey, appName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableGet", reflect.TypeOf((*MockInterface)(nil).ApplicationVariableGet), projectKey, appName, varName)
}

// ApplicationVariableUpdate mocks base method.
func (m *MockInterface) ApplicationVariableUpdate(projectKey, appName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariableUpdate", projectKey, appName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationVariableUpdate indicates an expected call of ApplicationVariableUpdate.
func (mr *MockInterfaceMockRecorder) ApplicationVariableUpdate(projectKey, appName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariableUpdate", reflect.TypeOf((*MockInterface)(nil).ApplicationVariableUpdate), projectKey, appName, variable)
}

// ApplicationVariablesList mocks base method.
func (m *MockInterface) ApplicationVariablesList(projectKey, appName string) ([]sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationVariablesList", projectKey, appName)
	ret0, _ := ret[0].([]sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationVariablesList indicates an expected call of ApplicationVariablesList.
func (mr *MockInterfaceMockRecorder) ApplicationVariablesList(projectKey, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVariablesList", reflect.TypeOf((*MockInterface)(nil).ApplicationVariablesList), projectKey, appName)
}

// AuthConsumerCreateForUser mocks base method.
func (m *MockInterface) AuthConsumerCreateForUser(username string, request sdk.AuthUserConsumer) (sdk.AuthConsumerCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerCreateForUser", username, request)
	ret0, _ := ret[0].(sdk.AuthConsumerCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerCreateForUser indicates an expected call of AuthConsumerCreateForUser.
func (mr *MockInterfaceMockRecorder) AuthConsumerCreateForUser(username, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerCreateForUser", reflect.TypeOf((*MockInterface)(nil).AuthConsumerCreateForUser), username, request)
}

// AuthConsumerDelete mocks base method.
func (m *MockInterface) AuthConsumerDelete(username, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerDelete", username, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthConsumerDelete indicates an expected call of AuthConsumerDelete.
func (mr *MockInterfaceMockRecorder) AuthConsumerDelete(username, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerDelete", reflect.TypeOf((*MockInterface)(nil).AuthConsumerDelete), username, id)
}

// AuthConsumerHatcherySigninV2 mocks base method.
func (m *MockInterface) AuthConsumerHatcherySigninV2(request interface{}) (sdk.AuthConsumerHatcherySigninResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerHatcherySigninV2", request)
	ret0, _ := ret[0].(sdk.AuthConsumerHatcherySigninResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerHatcherySigninV2 indicates an expected call of AuthConsumerHatcherySigninV2.
func (mr *MockInterfaceMockRecorder) AuthConsumerHatcherySigninV2(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerHatcherySigninV2", reflect.TypeOf((*MockInterface)(nil).AuthConsumerHatcherySigninV2), request)
}

// AuthConsumerListByUser mocks base method.
func (m *MockInterface) AuthConsumerListByUser(username string) (sdk.AuthUserConsumers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerListByUser", username)
	ret0, _ := ret[0].(sdk.AuthUserConsumers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerListByUser indicates an expected call of AuthConsumerListByUser.
func (mr *MockInterfaceMockRecorder) AuthConsumerListByUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerListByUser", reflect.TypeOf((*MockInterface)(nil).AuthConsumerListByUser), username)
}

// AuthConsumerLocalAskResetPassword mocks base method.
func (m *MockInterface) AuthConsumerLocalAskResetPassword(arg0 sdk.AuthConsumerSigninRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerLocalAskResetPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthConsumerLocalAskResetPassword indicates an expected call of AuthConsumerLocalAskResetPassword.
func (mr *MockInterfaceMockRecorder) AuthConsumerLocalAskResetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerLocalAskResetPassword", reflect.TypeOf((*MockInterface)(nil).AuthConsumerLocalAskResetPassword), arg0)
}

// AuthConsumerLocalResetPassword mocks base method.
func (m *MockInterface) AuthConsumerLocalResetPassword(token, newPassword string) (sdk.AuthConsumerSigninResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerLocalResetPassword", token, newPassword)
	ret0, _ := ret[0].(sdk.AuthConsumerSigninResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerLocalResetPassword indicates an expected call of AuthConsumerLocalResetPassword.
func (mr *MockInterfaceMockRecorder) AuthConsumerLocalResetPassword(token, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerLocalResetPassword", reflect.TypeOf((*MockInterface)(nil).AuthConsumerLocalResetPassword), token, newPassword)
}

// AuthConsumerLocalSignup mocks base method.
func (m *MockInterface) AuthConsumerLocalSignup(arg0 sdk.AuthConsumerSigninRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerLocalSignup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthConsumerLocalSignup indicates an expected call of AuthConsumerLocalSignup.
func (mr *MockInterfaceMockRecorder) AuthConsumerLocalSignup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerLocalSignup", reflect.TypeOf((*MockInterface)(nil).AuthConsumerLocalSignup), arg0)
}

// AuthConsumerLocalSignupVerify mocks base method.
func (m *MockInterface) AuthConsumerLocalSignupVerify(token, initToken string) (sdk.AuthConsumerSigninResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerLocalSignupVerify", token, initToken)
	ret0, _ := ret[0].(sdk.AuthConsumerSigninResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerLocalSignupVerify indicates an expected call of AuthConsumerLocalSignupVerify.
func (mr *MockInterfaceMockRecorder) AuthConsumerLocalSignupVerify(token, initToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerLocalSignupVerify", reflect.TypeOf((*MockInterface)(nil).AuthConsumerLocalSignupVerify), token, initToken)
}

// AuthConsumerRegen mocks base method.
func (m *MockInterface) AuthConsumerRegen(username, id string, newDuration int64, overlapDuration string) (sdk.AuthConsumerCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerRegen", username, id, newDuration, overlapDuration)
	ret0, _ := ret[0].(sdk.AuthConsumerCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerRegen indicates an expected call of AuthConsumerRegen.
func (mr *MockInterfaceMockRecorder) AuthConsumerRegen(username, id, newDuration, overlapDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerRegen", reflect.TypeOf((*MockInterface)(nil).AuthConsumerRegen), username, id, newDuration, overlapDuration)
}

// AuthConsumerSignin mocks base method.
func (m *MockInterface) AuthConsumerSignin(arg0 sdk.AuthConsumerType, arg1 interface{}) (sdk.AuthConsumerSigninResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerSignin", arg0, arg1)
	ret0, _ := ret[0].(sdk.AuthConsumerSigninResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerSignin indicates an expected call of AuthConsumerSignin.
func (mr *MockInterfaceMockRecorder) AuthConsumerSignin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerSignin", reflect.TypeOf((*MockInterface)(nil).AuthConsumerSignin), arg0, arg1)
}

// AuthConsumerSignout mocks base method.
func (m *MockInterface) AuthConsumerSignout() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerSignout")
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthConsumerSignout indicates an expected call of AuthConsumerSignout.
func (mr *MockInterfaceMockRecorder) AuthConsumerSignout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerSignout", reflect.TypeOf((*MockInterface)(nil).AuthConsumerSignout))
}

// AuthDriverList mocks base method.
func (m *MockInterface) AuthDriverList() (sdk.AuthDriverResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthDriverList")
	ret0, _ := ret[0].(sdk.AuthDriverResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthDriverList indicates an expected call of AuthDriverList.
func (mr *MockInterfaceMockRecorder) AuthDriverList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthDriverList", reflect.TypeOf((*MockInterface)(nil).AuthDriverList))
}

// AuthMe mocks base method.
func (m *MockInterface) AuthMe() (sdk.AuthCurrentConsumerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthMe")
	ret0, _ := ret[0].(sdk.AuthCurrentConsumerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthMe indicates an expected call of AuthMe.
func (mr *MockInterfaceMockRecorder) AuthMe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthMe", reflect.TypeOf((*MockInterface)(nil).AuthMe))
}

// AuthSessionDelete mocks base method.
func (m *MockInterface) AuthSessionDelete(username, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSessionDelete", username, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthSessionDelete indicates an expected call of AuthSessionDelete.
func (mr *MockInterfaceMockRecorder) AuthSessionDelete(username, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSessionDelete", reflect.TypeOf((*MockInterface)(nil).AuthSessionDelete), username, id)
}

// AuthSessionGet mocks base method.
func (m *MockInterface) AuthSessionGet(id string) (sdk.AuthCurrentConsumerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSessionGet", id)
	ret0, _ := ret[0].(sdk.AuthCurrentConsumerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthSessionGet indicates an expected call of AuthSessionGet.
func (mr *MockInterfaceMockRecorder) AuthSessionGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSessionGet", reflect.TypeOf((*MockInterface)(nil).AuthSessionGet), id)
}

// AuthSessionListByUser mocks base method.
func (m *MockInterface) AuthSessionListByUser(username string) (sdk.AuthSessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSessionListByUser", username)
	ret0, _ := ret[0].(sdk.AuthSessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthSessionListByUser indicates an expected call of AuthSessionListByUser.
func (mr *MockInterfaceMockRecorder) AuthSessionListByUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSessionListByUser", reflect.TypeOf((*MockInterface)(nil).AuthSessionListByUser), username)
}

// CDNItemDownload mocks base method.
func (m *MockInterface) CDNItemDownload(ctx context.Context, cdnAddr, hash string, itemType sdk.CDNItemType, md5 string, writer io.WriteSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemDownload", ctx, cdnAddr, hash, itemType, md5, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CDNItemDownload indicates an expected call of CDNItemDownload.
func (mr *MockInterfaceMockRecorder) CDNItemDownload(ctx, cdnAddr, hash, itemType, md5, writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemDownload", reflect.TypeOf((*MockInterface)(nil).CDNItemDownload), ctx, cdnAddr, hash, itemType, md5, writer)
}

// CDNItemStream mocks base method.
func (m *MockInterface) CDNItemStream(ctx context.Context, cdnAddr, hash string, itemType sdk.CDNItemType) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemStream", ctx, cdnAddr, hash, itemType)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CDNItemStream indicates an expected call of CDNItemStream.
func (mr *MockInterfaceMockRecorder) CDNItemStream(ctx, cdnAddr, hash, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemStream", reflect.TypeOf((*MockInterface)(nil).CDNItemStream), ctx, cdnAddr, hash, itemType)
}

// CDNItemUpload mocks base method.
func (m *MockInterface) CDNItemUpload(ctx context.Context, cdnAddr, signature string, fs afero.Fs, path string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemUpload", ctx, cdnAddr, signature, fs, path)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CDNItemUpload indicates an expected call of CDNItemUpload.
func (mr *MockInterfaceMockRecorder) CDNItemUpload(ctx, cdnAddr, signature, fs, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemUpload", reflect.TypeOf((*MockInterface)(nil).CDNItemUpload), ctx, cdnAddr, signature, fs, path)
}

// CDNURL mocks base method.
func (m *MockInterface) CDNURL() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNURL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CDNURL indicates an expected call of CDNURL.
func (mr *MockInterfaceMockRecorder) CDNURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNURL", reflect.TypeOf((*MockInterface)(nil).CDNURL))
}

// ConfigCDN mocks base method.
func (m *MockInterface) ConfigCDN() (sdk.CDNConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigCDN")
	ret0, _ := ret[0].(sdk.CDNConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigCDN indicates an expected call of ConfigCDN.
func (mr *MockInterfaceMockRecorder) ConfigCDN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigCDN", reflect.TypeOf((*MockInterface)(nil).ConfigCDN))
}

// ConfigUser mocks base method.
func (m *MockInterface) ConfigUser() (sdk.ConfigUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigUser")
	ret0, _ := ret[0].(sdk.ConfigUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigUser indicates an expected call of ConfigUser.
func (mr *MockInterfaceMockRecorder) ConfigUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigUser", reflect.TypeOf((*MockInterface)(nil).ConfigUser))
}

// ConfigVCSGPGKeys mocks base method.
func (m *MockInterface) ConfigVCSGPGKeys() (map[string][]sdk.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigVCSGPGKeys")
	ret0, _ := ret[0].(map[string][]sdk.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigVCSGPGKeys indicates an expected call of ConfigVCSGPGKeys.
func (mr *MockInterfaceMockRecorder) ConfigVCSGPGKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigVCSGPGKeys", reflect.TypeOf((*MockInterface)(nil).ConfigVCSGPGKeys))
}

// DeleteJSON mocks base method.
func (m *MockInterface) DeleteJSON(ctx context.Context, path string, out interface{}, mods ...cdsclient.RequestModifier) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJSON", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJSON indicates an expected call of DeleteJSON.
func (mr *MockInterfaceMockRecorder) DeleteJSON(ctx, path, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJSON", reflect.TypeOf((*MockInterface)(nil).DeleteJSON), varargs...)
}

// Download mocks base method.
func (m *MockInterface) Download() ([]sdk.DownloadableResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download")
	ret0, _ := ret[0].([]sdk.DownloadableResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockInterfaceMockRecorder) Download() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockInterface)(nil).Download))
}

// DownloadURLFromAPI mocks base method.
func (m *MockInterface) DownloadURLFromAPI(name, os, arch, variant string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadURLFromAPI", name, os, arch, variant)
	ret0, _ := ret[0].(string)
	return ret0
}

// DownloadURLFromAPI indicates an expected call of DownloadURLFromAPI.
func (mr *MockInterfaceMockRecorder) DownloadURLFromAPI(name, os, arch, variant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadURLFromAPI", reflect.TypeOf((*MockInterface)(nil).DownloadURLFromAPI), name, os, arch, variant)
}

// EntityLint mocks base method.
func (m *MockInterface) EntityLint(ctx context.Context, entityType string, data interface{}) (*sdk.EntityCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntityLint", ctx, entityType, data)
	ret0, _ := ret[0].(*sdk.EntityCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntityLint indicates an expected call of EntityLint.
func (mr *MockInterfaceMockRecorder) EntityLint(ctx, entityType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntityLint", reflect.TypeOf((*MockInterface)(nil).EntityLint), ctx, entityType, data)
}

// EnvironmentCreate mocks base method.
func (m *MockInterface) EnvironmentCreate(projectKey string, env *sdk.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentCreate", projectKey, env)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentCreate indicates an expected call of EnvironmentCreate.
func (mr *MockInterfaceMockRecorder) EnvironmentCreate(projectKey, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentCreate", reflect.TypeOf((*MockInterface)(nil).EnvironmentCreate), projectKey, env)
}

// EnvironmentDelete mocks base method.
func (m *MockInterface) EnvironmentDelete(projectKey, envName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentDelete", projectKey, envName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentDelete indicates an expected call of EnvironmentDelete.
func (mr *MockInterfaceMockRecorder) EnvironmentDelete(projectKey, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentDelete", reflect.TypeOf((*MockInterface)(nil).EnvironmentDelete), projectKey, envName)
}

// EnvironmentExport mocks base method.
func (m *MockInterface) EnvironmentExport(projectKey, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnvironmentExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentExport indicates an expected call of EnvironmentExport.
func (mr *MockInterfaceMockRecorder) EnvironmentExport(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentExport", reflect.TypeOf((*MockInterface)(nil).EnvironmentExport), varargs...)
}

// EnvironmentGet mocks base method.
func (m *MockInterface) EnvironmentGet(projectKey, envName string, opts ...cdsclient.RequestModifier) (*sdk.Environment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, envName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnvironmentGet", varargs...)
	ret0, _ := ret[0].(*sdk.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentGet indicates an expected call of EnvironmentGet.
func (mr *MockInterfaceMockRecorder) EnvironmentGet(projectKey, envName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, envName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentGet", reflect.TypeOf((*MockInterface)(nil).EnvironmentGet), varargs...)
}

// EnvironmentImport mocks base method.
func (m *MockInterface) EnvironmentImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnvironmentImport", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentImport indicates an expected call of EnvironmentImport.
func (mr *MockInterfaceMockRecorder) EnvironmentImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentImport", reflect.TypeOf((*MockInterface)(nil).EnvironmentImport), varargs...)
}

// EnvironmentKeyCreate mocks base method.
func (m *MockInterface) EnvironmentKeyCreate(projectKey, envName string, keyEnv *sdk.EnvironmentKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentKeyCreate", projectKey, envName, keyEnv)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentKeyCreate indicates an expected call of EnvironmentKeyCreate.
func (mr *MockInterfaceMockRecorder) EnvironmentKeyCreate(projectKey, envName, keyEnv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentKeyCreate", reflect.TypeOf((*MockInterface)(nil).EnvironmentKeyCreate), projectKey, envName, keyEnv)
}

// EnvironmentKeysDelete mocks base method.
func (m *MockInterface) EnvironmentKeysDelete(projectKey, envName, keyEnvName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentKeysDelete", projectKey, envName, keyEnvName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentKeysDelete indicates an expected call of EnvironmentKeysDelete.
func (mr *MockInterfaceMockRecorder) EnvironmentKeysDelete(projectKey, envName, keyEnvName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentKeysDelete", reflect.TypeOf((*MockInterface)(nil).EnvironmentKeysDelete), projectKey, envName, keyEnvName)
}

// EnvironmentKeysList mocks base method.
func (m *MockInterface) EnvironmentKeysList(projectKey, envName string) ([]sdk.EnvironmentKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentKeysList", projectKey, envName)
	ret0, _ := ret[0].([]sdk.EnvironmentKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentKeysList indicates an expected call of EnvironmentKeysList.
func (mr *MockInterfaceMockRecorder) EnvironmentKeysList(projectKey, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentKeysList", reflect.TypeOf((*MockInterface)(nil).EnvironmentKeysList), projectKey, envName)
}

// EnvironmentList mocks base method.
func (m *MockInterface) EnvironmentList(projectKey string) ([]sdk.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentList", projectKey)
	ret0, _ := ret[0].([]sdk.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentList indicates an expected call of EnvironmentList.
func (mr *MockInterfaceMockRecorder) EnvironmentList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentList", reflect.TypeOf((*MockInterface)(nil).EnvironmentList), projectKey)
}

// EnvironmentVariableCreate mocks base method.
func (m *MockInterface) EnvironmentVariableCreate(projectKey, envName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableCreate", projectKey, envName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentVariableCreate indicates an expected call of EnvironmentVariableCreate.
func (mr *MockInterfaceMockRecorder) EnvironmentVariableCreate(projectKey, envName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableCreate", reflect.TypeOf((*MockInterface)(nil).EnvironmentVariableCreate), projectKey, envName, variable)
}

// EnvironmentVariableDelete mocks base method.
func (m *MockInterface) EnvironmentVariableDelete(projectKey, envName, varName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableDelete", projectKey, envName, varName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentVariableDelete indicates an expected call of EnvironmentVariableDelete.
func (mr *MockInterfaceMockRecorder) EnvironmentVariableDelete(projectKey, envName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableDelete", reflect.TypeOf((*MockInterface)(nil).EnvironmentVariableDelete), projectKey, envName, varName)
}

// EnvironmentVariableGet mocks base method.
func (m *MockInterface) EnvironmentVariableGet(projectKey, envName, varName string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableGet", projectKey, envName, varName)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentVariableGet indicates an expected call of EnvironmentVariableGet.
func (mr *MockInterfaceMockRecorder) EnvironmentVariableGet(projectKey, envName, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableGet", reflect.TypeOf((*MockInterface)(nil).EnvironmentVariableGet), projectKey, envName, varName)
}

// EnvironmentVariableUpdate mocks base method.
func (m *MockInterface) EnvironmentVariableUpdate(projectKey, envName string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariableUpdate", projectKey, envName, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentVariableUpdate indicates an expected call of EnvironmentVariableUpdate.
func (mr *MockInterfaceMockRecorder) EnvironmentVariableUpdate(projectKey, envName, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariableUpdate", reflect.TypeOf((*MockInterface)(nil).EnvironmentVariableUpdate), projectKey, envName, variable)
}

// EnvironmentVariablesList mocks base method.
func (m *MockInterface) EnvironmentVariablesList(key, envName string) ([]sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentVariablesList", key, envName)
	ret0, _ := ret[0].([]sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentVariablesList indicates an expected call of EnvironmentVariablesList.
func (mr *MockInterfaceMockRecorder) EnvironmentVariablesList(key, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentVariablesList", reflect.TypeOf((*MockInterface)(nil).EnvironmentVariablesList), key, envName)
}

// FeatureCreate mocks base method.
func (m *MockInterface) FeatureCreate(f sdk.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureCreate", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeatureCreate indicates an expected call of FeatureCreate.
func (mr *MockInterfaceMockRecorder) FeatureCreate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureCreate", reflect.TypeOf((*MockInterface)(nil).FeatureCreate), f)
}

// FeatureDelete mocks base method.
func (m *MockInterface) FeatureDelete(name sdk.FeatureName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureDelete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeatureDelete indicates an expected call of FeatureDelete.
func (mr *MockInterfaceMockRecorder) FeatureDelete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureDelete", reflect.TypeOf((*MockInterface)(nil).FeatureDelete), name)
}

// FeatureEnabled mocks base method.
func (m *MockInterface) FeatureEnabled(name sdk.FeatureName, params map[string]string) (sdk.FeatureEnabledResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureEnabled", name, params)
	ret0, _ := ret[0].(sdk.FeatureEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeatureEnabled indicates an expected call of FeatureEnabled.
func (mr *MockInterfaceMockRecorder) FeatureEnabled(name, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureEnabled", reflect.TypeOf((*MockInterface)(nil).FeatureEnabled), name, params)
}

// FeatureGet mocks base method.
func (m *MockInterface) FeatureGet(name sdk.FeatureName) (sdk.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureGet", name)
	ret0, _ := ret[0].(sdk.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeatureGet indicates an expected call of FeatureGet.
func (mr *MockInterfaceMockRecorder) FeatureGet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureGet", reflect.TypeOf((*MockInterface)(nil).FeatureGet), name)
}

// FeatureUpdate mocks base method.
func (m *MockInterface) FeatureUpdate(f sdk.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureUpdate", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeatureUpdate indicates an expected call of FeatureUpdate.
func (mr *MockInterfaceMockRecorder) FeatureUpdate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureUpdate", reflect.TypeOf((*MockInterface)(nil).FeatureUpdate), f)
}

// Features mocks base method.
func (m *MockInterface) Features() ([]sdk.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].([]sdk.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockInterfaceMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockInterface)(nil).Features))
}

// GetJSON mocks base method.
func (m *MockInterface) GetJSON(ctx context.Context, path string, out interface{}, mods ...cdsclient.RequestModifier) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJSON", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJSON indicates an expected call of GetJSON.
func (mr *MockInterfaceMockRecorder) GetJSON(ctx, path, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJSON", reflect.TypeOf((*MockInterface)(nil).GetJSON), varargs...)
}

// GroupCreate mocks base method.
func (m *MockInterface) GroupCreate(group *sdk.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCreate", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupCreate indicates an expected call of GroupCreate.
func (mr *MockInterfaceMockRecorder) GroupCreate(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreate", reflect.TypeOf((*MockInterface)(nil).GroupCreate), group)
}

// GroupDelete mocks base method.
func (m *MockInterface) GroupDelete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupDelete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupDelete indicates an expected call of GroupDelete.
func (mr *MockInterfaceMockRecorder) GroupDelete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupDelete", reflect.TypeOf((*MockInterface)(nil).GroupDelete), name)
}

// GroupGet mocks base method.
func (m *MockInterface) GroupGet(name string, mods ...cdsclient.RequestModifier) (*sdk.Group, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupGet", varargs...)
	ret0, _ := ret[0].(*sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupGet indicates an expected call of GroupGet.
func (mr *MockInterfaceMockRecorder) GroupGet(name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupGet", reflect.TypeOf((*MockInterface)(nil).GroupGet), varargs...)
}

// GroupList mocks base method.
func (m *MockInterface) GroupList() ([]sdk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupList")
	ret0, _ := ret[0].([]sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupList indicates an expected call of GroupList.
func (mr *MockInterfaceMockRecorder) GroupList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupList", reflect.TypeOf((*MockInterface)(nil).GroupList))
}

// GroupMemberAdd mocks base method.
func (m *MockInterface) GroupMemberAdd(groupName string, member *sdk.GroupMember) (sdk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMemberAdd", groupName, member)
	ret0, _ := ret[0].(sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupMemberAdd indicates an expected call of GroupMemberAdd.
func (mr *MockInterfaceMockRecorder) GroupMemberAdd(groupName, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMemberAdd", reflect.TypeOf((*MockInterface)(nil).GroupMemberAdd), groupName, member)
}

// GroupMemberEdit mocks base method.
func (m *MockInterface) GroupMemberEdit(groupName string, member *sdk.GroupMember) (sdk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMemberEdit", groupName, member)
	ret0, _ := ret[0].(sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupMemberEdit indicates an expected call of GroupMemberEdit.
func (mr *MockInterfaceMockRecorder) GroupMemberEdit(groupName, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMemberEdit", reflect.TypeOf((*MockInterface)(nil).GroupMemberEdit), groupName, member)
}

// GroupMemberRemove mocks base method.
func (m *MockInterface) GroupMemberRemove(groupName, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMemberRemove", groupName, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupMemberRemove indicates an expected call of GroupMemberRemove.
func (mr *MockInterfaceMockRecorder) GroupMemberRemove(groupName, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMemberRemove", reflect.TypeOf((*MockInterface)(nil).GroupMemberRemove), groupName, username)
}

// GroupRename mocks base method.
func (m *MockInterface) GroupRename(oldName, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRename", oldName, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupRename indicates an expected call of GroupRename.
func (mr *MockInterfaceMockRecorder) GroupRename(oldName, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRename", reflect.TypeOf((*MockInterface)(nil).GroupRename), oldName, newName)
}

// HTTPClient mocks base method.
func (m *MockInterface) HTTPClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// HTTPClient indicates an expected call of HTTPClient.
func (mr *MockInterfaceMockRecorder) HTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockInterface)(nil).HTTPClient))
}

// HTTPNoTimeoutClient mocks base method.
func (m *MockInterface) HTTPNoTimeoutClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPNoTimeoutClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// HTTPNoTimeoutClient indicates an expected call of HTTPNoTimeoutClient.
func (mr *MockInterfaceMockRecorder) HTTPNoTimeoutClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPNoTimeoutClient", reflect.TypeOf((*MockInterface)(nil).HTTPNoTimeoutClient))
}

// HTTPWebsocketClient mocks base method.
func (m *MockInterface) HTTPWebsocketClient() *websocket.Dialer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPWebsocketClient")
	ret0, _ := ret[0].(*websocket.Dialer)
	return ret0
}

// HTTPWebsocketClient indicates an expected call of HTTPWebsocketClient.
func (mr *MockInterfaceMockRecorder) HTTPWebsocketClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPWebsocketClient", reflect.TypeOf((*MockInterface)(nil).HTTPWebsocketClient))
}

// HasProjectRole mocks base method.
func (m *MockInterface) HasProjectRole(ctx context.Context, projectKey, sessionID, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProjectRole", ctx, projectKey, sessionID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasProjectRole indicates an expected call of HasProjectRole.
func (mr *MockInterfaceMockRecorder) HasProjectRole(ctx, projectKey, sessionID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProjectRole", reflect.TypeOf((*MockInterface)(nil).HasProjectRole), ctx, projectKey, sessionID, role)
}

// HatcheryAdd mocks base method.
func (m *MockInterface) HatcheryAdd(ctx context.Context, h *sdk.Hatchery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HatcheryAdd", ctx, h)
	ret0, _ := ret[0].(error)
	return ret0
}

// HatcheryAdd indicates an expected call of HatcheryAdd.
func (mr *MockInterfaceMockRecorder) HatcheryAdd(ctx, h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HatcheryAdd", reflect.TypeOf((*MockInterface)(nil).HatcheryAdd), ctx, h)
}

// HatcheryDelete mocks base method.
func (m *MockInterface) HatcheryDelete(ctx context.Context, hatcheryIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HatcheryDelete", ctx, hatcheryIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// HatcheryDelete indicates an expected call of HatcheryDelete.
func (mr *MockInterfaceMockRecorder) HatcheryDelete(ctx, hatcheryIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HatcheryDelete", reflect.TypeOf((*MockInterface)(nil).HatcheryDelete), ctx, hatcheryIdentifier)
}

// HatcheryGet mocks base method.
func (m *MockInterface) HatcheryGet(ctx context.Context, hatcheryIdentifier string) (sdk.Hatchery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HatcheryGet", ctx, hatcheryIdentifier)
	ret0, _ := ret[0].(sdk.Hatchery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HatcheryGet indicates an expected call of HatcheryGet.
func (mr *MockInterfaceMockRecorder) HatcheryGet(ctx, hatcheryIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HatcheryGet", reflect.TypeOf((*MockInterface)(nil).HatcheryGet), ctx, hatcheryIdentifier)
}

// HatcheryList mocks base method.
func (m *MockInterface) HatcheryList(ctx context.Context) ([]sdk.Hatchery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HatcheryList", ctx)
	ret0, _ := ret[0].([]sdk.Hatchery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HatcheryList indicates an expected call of HatcheryList.
func (mr *MockInterfaceMockRecorder) HatcheryList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HatcheryList", reflect.TypeOf((*MockInterface)(nil).HatcheryList), ctx)
}

// HookRepositoriesList mocks base method.
func (m *MockInterface) HookRepositoriesList(ctx context.Context, vcsServer, repoName string) ([]sdk.ProjectRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HookRepositoriesList", ctx, vcsServer, repoName)
	ret0, _ := ret[0].([]sdk.ProjectRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HookRepositoriesList indicates an expected call of HookRepositoriesList.
func (mr *MockInterfaceMockRecorder) HookRepositoriesList(ctx, vcsServer, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HookRepositoriesList", reflect.TypeOf((*MockInterface)(nil).HookRepositoriesList), ctx, vcsServer, repoName)
}

// IntegrationModelAdd mocks base method.
func (m_2 *MockInterface) IntegrationModelAdd(m *sdk.IntegrationModel) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "IntegrationModelAdd", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// IntegrationModelAdd indicates an expected call of IntegrationModelAdd.
func (mr *MockInterfaceMockRecorder) IntegrationModelAdd(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelAdd", reflect.TypeOf((*MockInterface)(nil).IntegrationModelAdd), m)
}

// IntegrationModelDelete mocks base method.
func (m *MockInterface) IntegrationModelDelete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntegrationModelDelete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// IntegrationModelDelete indicates an expected call of IntegrationModelDelete.
func (mr *MockInterfaceMockRecorder) IntegrationModelDelete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelDelete", reflect.TypeOf((*MockInterface)(nil).IntegrationModelDelete), name)
}

// IntegrationModelGet mocks base method.
func (m *MockInterface) IntegrationModelGet(name string) (sdk.IntegrationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntegrationModelGet", name)
	ret0, _ := ret[0].(sdk.IntegrationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntegrationModelGet indicates an expected call of IntegrationModelGet.
func (mr *MockInterfaceMockRecorder) IntegrationModelGet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelGet", reflect.TypeOf((*MockInterface)(nil).IntegrationModelGet), name)
}

// IntegrationModelList mocks base method.
func (m *MockInterface) IntegrationModelList() ([]sdk.IntegrationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntegrationModelList")
	ret0, _ := ret[0].([]sdk.IntegrationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntegrationModelList indicates an expected call of IntegrationModelList.
func (mr *MockInterfaceMockRecorder) IntegrationModelList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelList", reflect.TypeOf((*MockInterface)(nil).IntegrationModelList))
}

// IntegrationModelUpdate mocks base method.
func (m_2 *MockInterface) IntegrationModelUpdate(m *sdk.IntegrationModel) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "IntegrationModelUpdate", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// IntegrationModelUpdate indicates an expected call of IntegrationModelUpdate.
func (mr *MockInterfaceMockRecorder) IntegrationModelUpdate(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntegrationModelUpdate", reflect.TypeOf((*MockInterface)(nil).IntegrationModelUpdate), m)
}

// ListWorkflowToTrigger mocks base method.
func (m *MockInterface) ListWorkflowToTrigger(ctx context.Context, req sdk.HookListWorkflowRequest) ([]sdk.V2WorkflowHook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowToTrigger", ctx, req)
	ret0, _ := ret[0].([]sdk.V2WorkflowHook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowToTrigger indicates an expected call of ListWorkflowToTrigger.
func (mr *MockInterfaceMockRecorder) ListWorkflowToTrigger(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowToTrigger", reflect.TypeOf((*MockInterface)(nil).ListWorkflowToTrigger), ctx, req)
}

// Maintenance mocks base method.
func (m *MockInterface) Maintenance(enable, hooks bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Maintenance", enable, hooks)
	ret0, _ := ret[0].(error)
	return ret0
}

// Maintenance indicates an expected call of Maintenance.
func (mr *MockInterfaceMockRecorder) Maintenance(enable, hooks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Maintenance", reflect.TypeOf((*MockInterface)(nil).Maintenance), enable, hooks)
}

// MonDBMigrate mocks base method.
func (m *MockInterface) MonDBMigrate() ([]sdk.MonDBMigrate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonDBMigrate")
	ret0, _ := ret[0].([]sdk.MonDBMigrate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonDBMigrate indicates an expected call of MonDBMigrate.
func (mr *MockInterfaceMockRecorder) MonDBMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonDBMigrate", reflect.TypeOf((*MockInterface)(nil).MonDBMigrate))
}

// MonStatus mocks base method.
func (m *MockInterface) MonStatus() (*sdk.MonitoringStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonStatus")
	ret0, _ := ret[0].(*sdk.MonitoringStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonStatus indicates an expected call of MonStatus.
func (mr *MockInterfaceMockRecorder) MonStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonStatus", reflect.TypeOf((*MockInterface)(nil).MonStatus))
}

// MonVersion mocks base method.
func (m *MockInterface) MonVersion() (*sdk.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonVersion")
	ret0, _ := ret[0].(*sdk.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonVersion indicates an expected call of MonVersion.
func (mr *MockInterfaceMockRecorder) MonVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonVersion", reflect.TypeOf((*MockInterface)(nil).MonVersion))
}

// Navbar mocks base method.
func (m *MockInterface) Navbar() ([]sdk.NavbarProjectData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Navbar")
	ret0, _ := ret[0].([]sdk.NavbarProjectData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Navbar indicates an expected call of Navbar.
func (mr *MockInterfaceMockRecorder) Navbar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Navbar", reflect.TypeOf((*MockInterface)(nil).Navbar))
}

// OrganizationAdd mocks base method.
func (m *MockInterface) OrganizationAdd(ctx context.Context, organization sdk.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationAdd", ctx, organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrganizationAdd indicates an expected call of OrganizationAdd.
func (mr *MockInterfaceMockRecorder) OrganizationAdd(ctx, organization interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationAdd", reflect.TypeOf((*MockInterface)(nil).OrganizationAdd), ctx, organization)
}

// OrganizationDelete mocks base method.
func (m *MockInterface) OrganizationDelete(ctx context.Context, organizationIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationDelete", ctx, organizationIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrganizationDelete indicates an expected call of OrganizationDelete.
func (mr *MockInterfaceMockRecorder) OrganizationDelete(ctx, organizationIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationDelete", reflect.TypeOf((*MockInterface)(nil).OrganizationDelete), ctx, organizationIdentifier)
}

// OrganizationGet mocks base method.
func (m *MockInterface) OrganizationGet(ctx context.Context, organizationIdentifier string) (sdk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationGet", ctx, organizationIdentifier)
	ret0, _ := ret[0].(sdk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationGet indicates an expected call of OrganizationGet.
func (mr *MockInterfaceMockRecorder) OrganizationGet(ctx, organizationIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationGet", reflect.TypeOf((*MockInterface)(nil).OrganizationGet), ctx, organizationIdentifier)
}

// OrganizationList mocks base method.
func (m *MockInterface) OrganizationList(ctx context.Context) ([]sdk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationList", ctx)
	ret0, _ := ret[0].([]sdk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationList indicates an expected call of OrganizationList.
func (mr *MockInterfaceMockRecorder) OrganizationList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationList", reflect.TypeOf((*MockInterface)(nil).OrganizationList), ctx)
}

// PipelineCreate mocks base method.
func (m *MockInterface) PipelineCreate(projectKey string, pip *sdk.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineCreate", projectKey, pip)
	ret0, _ := ret[0].(error)
	return ret0
}

// PipelineCreate indicates an expected call of PipelineCreate.
func (mr *MockInterfaceMockRecorder) PipelineCreate(projectKey, pip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCreate", reflect.TypeOf((*MockInterface)(nil).PipelineCreate), projectKey, pip)
}

// PipelineDelete mocks base method.
func (m *MockInterface) PipelineDelete(projectKey, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineDelete", projectKey, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// PipelineDelete indicates an expected call of PipelineDelete.
func (mr *MockInterfaceMockRecorder) PipelineDelete(projectKey, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineDelete", reflect.TypeOf((*MockInterface)(nil).PipelineDelete), projectKey, name)
}

// PipelineExport mocks base method.
func (m *MockInterface) PipelineExport(projectKey, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineExport indicates an expected call of PipelineExport.
func (mr *MockInterfaceMockRecorder) PipelineExport(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineExport", reflect.TypeOf((*MockInterface)(nil).PipelineExport), varargs...)
}

// PipelineGet mocks base method.
func (m *MockInterface) PipelineGet(projectKey, name string, mods ...cdsclient.RequestModifier) (*sdk.Pipeline, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineGet", varargs...)
	ret0, _ := ret[0].(*sdk.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineGet indicates an expected call of PipelineGet.
func (mr *MockInterfaceMockRecorder) PipelineGet(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineGet", reflect.TypeOf((*MockInterface)(nil).PipelineGet), varargs...)
}

// PipelineImport mocks base method.
func (m *MockInterface) PipelineImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineImport", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineImport indicates an expected call of PipelineImport.
func (mr *MockInterfaceMockRecorder) PipelineImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineImport", reflect.TypeOf((*MockInterface)(nil).PipelineImport), varargs...)
}

// PipelineList mocks base method.
func (m *MockInterface) PipelineList(projectKey string) ([]sdk.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineList", projectKey)
	ret0, _ := ret[0].([]sdk.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineList indicates an expected call of PipelineList.
func (mr *MockInterfaceMockRecorder) PipelineList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineList", reflect.TypeOf((*MockInterface)(nil).PipelineList), projectKey)
}

// PluginAdd mocks base method.
func (m *MockInterface) PluginAdd(arg0 *sdk.GRPCPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginAdd", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginAdd indicates an expected call of PluginAdd.
func (mr *MockInterfaceMockRecorder) PluginAdd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginAdd", reflect.TypeOf((*MockInterface)(nil).PluginAdd), arg0)
}

// PluginAddBinary mocks base method.
func (m *MockInterface) PluginAddBinary(arg0 *sdk.GRPCPlugin, arg1 *sdk.GRPCPluginBinary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginAddBinary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginAddBinary indicates an expected call of PluginAddBinary.
func (mr *MockInterfaceMockRecorder) PluginAddBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginAddBinary", reflect.TypeOf((*MockInterface)(nil).PluginAddBinary), arg0, arg1)
}

// PluginDelete mocks base method.
func (m *MockInterface) PluginDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginDelete indicates an expected call of PluginDelete.
func (mr *MockInterfaceMockRecorder) PluginDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginDelete", reflect.TypeOf((*MockInterface)(nil).PluginDelete), arg0)
}

// PluginDeleteBinary mocks base method.
func (m *MockInterface) PluginDeleteBinary(name, os, arch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginDeleteBinary", name, os, arch)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginDeleteBinary indicates an expected call of PluginDeleteBinary.
func (mr *MockInterfaceMockRecorder) PluginDeleteBinary(name, os, arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginDeleteBinary", reflect.TypeOf((*MockInterface)(nil).PluginDeleteBinary), name, os, arch)
}

// PluginGetBinary mocks base method.
func (m *MockInterface) PluginGetBinary(name, os, arch string, w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGetBinary", name, os, arch, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginGetBinary indicates an expected call of PluginGetBinary.
func (mr *MockInterfaceMockRecorder) PluginGetBinary(name, os, arch, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGetBinary", reflect.TypeOf((*MockInterface)(nil).PluginGetBinary), name, os, arch, w)
}

// PluginGetBinaryInfos mocks base method.
func (m *MockInterface) PluginGetBinaryInfos(name, os, arch string) (*sdk.GRPCPluginBinary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGetBinaryInfos", name, os, arch)
	ret0, _ := ret[0].(*sdk.GRPCPluginBinary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginGetBinaryInfos indicates an expected call of PluginGetBinaryInfos.
func (mr *MockInterfaceMockRecorder) PluginGetBinaryInfos(name, os, arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGetBinaryInfos", reflect.TypeOf((*MockInterface)(nil).PluginGetBinaryInfos), name, os, arch)
}

// PluginImport mocks base method.
func (m *MockInterface) PluginImport(arg0 *sdk.GRPCPlugin, arg1 ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PluginImport", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginImport indicates an expected call of PluginImport.
func (mr *MockInterfaceMockRecorder) PluginImport(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginImport", reflect.TypeOf((*MockInterface)(nil).PluginImport), varargs...)
}

// PluginUpdate mocks base method.
func (m *MockInterface) PluginUpdate(arg0 *sdk.GRPCPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginUpdate indicates an expected call of PluginUpdate.
func (mr *MockInterfaceMockRecorder) PluginUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginUpdate", reflect.TypeOf((*MockInterface)(nil).PluginUpdate), arg0)
}

// PluginsGet mocks base method.
func (m *MockInterface) PluginsGet(arg0 string) (*sdk.GRPCPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginsGet", arg0)
	ret0, _ := ret[0].(*sdk.GRPCPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginsGet indicates an expected call of PluginsGet.
func (mr *MockInterfaceMockRecorder) PluginsGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginsGet", reflect.TypeOf((*MockInterface)(nil).PluginsGet), arg0)
}

// PluginsList mocks base method.
func (m *MockInterface) PluginsList() ([]sdk.GRPCPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginsList")
	ret0, _ := ret[0].([]sdk.GRPCPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginsList indicates an expected call of PluginsList.
func (mr *MockInterfaceMockRecorder) PluginsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginsList", reflect.TypeOf((*MockInterface)(nil).PluginsList))
}

// PollVCSEvents mocks base method.
func (m *MockInterface) PollVCSEvents(uuid string, workflowID int64, vcsServer string, timestamp int64) (sdk.RepositoryEvents, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollVCSEvents", uuid, workflowID, vcsServer, timestamp)
	ret0, _ := ret[0].(sdk.RepositoryEvents)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PollVCSEvents indicates an expected call of PollVCSEvents.
func (mr *MockInterfaceMockRecorder) PollVCSEvents(uuid, workflowID, vcsServer, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollVCSEvents", reflect.TypeOf((*MockInterface)(nil).PollVCSEvents), uuid, workflowID, vcsServer, timestamp)
}

// PostJSON mocks base method.
func (m *MockInterface) PostJSON(ctx context.Context, path string, in, out interface{}, mods ...cdsclient.RequestModifier) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, in, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostJSON", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostJSON indicates an expected call of PostJSON.
func (mr *MockInterfaceMockRecorder) PostJSON(ctx, path, in, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, in, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostJSON", reflect.TypeOf((*MockInterface)(nil).PostJSON), varargs...)
}

// ProjectAccess mocks base method.
func (m *MockInterface) ProjectAccess(ctx context.Context, projectKey, sessionID string, itemType sdk.CDNItemType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectAccess", ctx, projectKey, sessionID, itemType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectAccess indicates an expected call of ProjectAccess.
func (mr *MockInterfaceMockRecorder) ProjectAccess(ctx, projectKey, sessionID, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectAccess", reflect.TypeOf((*MockInterface)(nil).ProjectAccess), ctx, projectKey, sessionID, itemType)
}

// ProjectCreate mocks base method.
func (m *MockInterface) ProjectCreate(proj *sdk.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectCreate", proj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectCreate indicates an expected call of ProjectCreate.
func (mr *MockInterfaceMockRecorder) ProjectCreate(proj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectCreate", reflect.TypeOf((*MockInterface)(nil).ProjectCreate), proj)
}

// ProjectDelete mocks base method.
func (m *MockInterface) ProjectDelete(projectKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectDelete", projectKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectDelete indicates an expected call of ProjectDelete.
func (mr *MockInterfaceMockRecorder) ProjectDelete(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectDelete", reflect.TypeOf((*MockInterface)(nil).ProjectDelete), projectKey)
}

// ProjectGet mocks base method.
func (m *MockInterface) ProjectGet(projectKey string, opts ...cdsclient.RequestModifier) (*sdk.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectGet", varargs...)
	ret0, _ := ret[0].(*sdk.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectGet indicates an expected call of ProjectGet.
func (mr *MockInterfaceMockRecorder) ProjectGet(projectKey interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectGet", reflect.TypeOf((*MockInterface)(nil).ProjectGet), varargs...)
}

// ProjectGroupAdd mocks base method.
func (m *MockInterface) ProjectGroupAdd(projectKey, groupName string, permission int, projectOnly bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectGroupAdd", projectKey, groupName, permission, projectOnly)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectGroupAdd indicates an expected call of ProjectGroupAdd.
func (mr *MockInterfaceMockRecorder) ProjectGroupAdd(projectKey, groupName, permission, projectOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectGroupAdd", reflect.TypeOf((*MockInterface)(nil).ProjectGroupAdd), projectKey, groupName, permission, projectOnly)
}

// ProjectGroupDelete mocks base method.
func (m *MockInterface) ProjectGroupDelete(projectKey, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectGroupDelete", projectKey, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectGroupDelete indicates an expected call of ProjectGroupDelete.
func (mr *MockInterfaceMockRecorder) ProjectGroupDelete(projectKey, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectGroupDelete", reflect.TypeOf((*MockInterface)(nil).ProjectGroupDelete), projectKey, groupName)
}

// ProjectIntegrationDelete mocks base method.
func (m *MockInterface) ProjectIntegrationDelete(projectKey, integrationName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationDelete", projectKey, integrationName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectIntegrationDelete indicates an expected call of ProjectIntegrationDelete.
func (mr *MockInterfaceMockRecorder) ProjectIntegrationDelete(projectKey, integrationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationDelete", reflect.TypeOf((*MockInterface)(nil).ProjectIntegrationDelete), projectKey, integrationName)
}

// ProjectIntegrationGet mocks base method.
func (m *MockInterface) ProjectIntegrationGet(projectKey, integrationName string, clearPassword bool) (sdk.ProjectIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationGet", projectKey, integrationName, clearPassword)
	ret0, _ := ret[0].(sdk.ProjectIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationGet indicates an expected call of ProjectIntegrationGet.
func (mr *MockInterfaceMockRecorder) ProjectIntegrationGet(projectKey, integrationName, clearPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationGet", reflect.TypeOf((*MockInterface)(nil).ProjectIntegrationGet), projectKey, integrationName, clearPassword)
}

// ProjectIntegrationImport mocks base method.
func (m *MockInterface) ProjectIntegrationImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) (sdk.ProjectIntegration, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectIntegrationImport", varargs...)
	ret0, _ := ret[0].(sdk.ProjectIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationImport indicates an expected call of ProjectIntegrationImport.
func (mr *MockInterfaceMockRecorder) ProjectIntegrationImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationImport", reflect.TypeOf((*MockInterface)(nil).ProjectIntegrationImport), varargs...)
}

// ProjectIntegrationList mocks base method.
func (m *MockInterface) ProjectIntegrationList(projectKey string) ([]sdk.ProjectIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationList", projectKey)
	ret0, _ := ret[0].([]sdk.ProjectIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationList indicates an expected call of ProjectIntegrationList.
func (mr *MockInterfaceMockRecorder) ProjectIntegrationList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationList", reflect.TypeOf((*MockInterface)(nil).ProjectIntegrationList), projectKey)
}

// ProjectIntegrationWorkerHookGet mocks base method.
func (m *MockInterface) ProjectIntegrationWorkerHookGet(projectKey, integrationName string) (*sdk.WorkerHookProjectIntegrationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationWorkerHookGet", projectKey, integrationName)
	ret0, _ := ret[0].(*sdk.WorkerHookProjectIntegrationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationWorkerHookGet indicates an expected call of ProjectIntegrationWorkerHookGet.
func (mr *MockInterfaceMockRecorder) ProjectIntegrationWorkerHookGet(projectKey, integrationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationWorkerHookGet", reflect.TypeOf((*MockInterface)(nil).ProjectIntegrationWorkerHookGet), projectKey, integrationName)
}

// ProjectIntegrationWorkerHooksImport mocks base method.
func (m *MockInterface) ProjectIntegrationWorkerHooksImport(projectKey, integrationName string, hook sdk.WorkerHookProjectIntegrationModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationWorkerHooksImport", projectKey, integrationName, hook)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectIntegrationWorkerHooksImport indicates an expected call of ProjectIntegrationWorkerHooksImport.
func (mr *MockInterfaceMockRecorder) ProjectIntegrationWorkerHooksImport(projectKey, integrationName, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationWorkerHooksImport", reflect.TypeOf((*MockInterface)(nil).ProjectIntegrationWorkerHooksImport), projectKey, integrationName, hook)
}

// ProjectKeyCreate mocks base method.
func (m *MockInterface) ProjectKeyCreate(projectKey string, key *sdk.ProjectKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeyCreate", projectKey, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeyCreate indicates an expected call of ProjectKeyCreate.
func (mr *MockInterfaceMockRecorder) ProjectKeyCreate(projectKey, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeyCreate", reflect.TypeOf((*MockInterface)(nil).ProjectKeyCreate), projectKey, key)
}

// ProjectKeysDelete mocks base method.
func (m *MockInterface) ProjectKeysDelete(projectKey, keyProjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysDelete", projectKey, keyProjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeysDelete indicates an expected call of ProjectKeysDelete.
func (mr *MockInterfaceMockRecorder) ProjectKeysDelete(projectKey, keyProjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysDelete", reflect.TypeOf((*MockInterface)(nil).ProjectKeysDelete), projectKey, keyProjectName)
}

// ProjectKeysDisable mocks base method.
func (m *MockInterface) ProjectKeysDisable(projectKey, keyProjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysDisable", projectKey, keyProjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeysDisable indicates an expected call of ProjectKeysDisable.
func (mr *MockInterfaceMockRecorder) ProjectKeysDisable(projectKey, keyProjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysDisable", reflect.TypeOf((*MockInterface)(nil).ProjectKeysDisable), projectKey, keyProjectName)
}

// ProjectKeysEnable mocks base method.
func (m *MockInterface) ProjectKeysEnable(projectKey, keyProjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysEnable", projectKey, keyProjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectKeysEnable indicates an expected call of ProjectKeysEnable.
func (mr *MockInterfaceMockRecorder) ProjectKeysEnable(projectKey, keyProjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysEnable", reflect.TypeOf((*MockInterface)(nil).ProjectKeysEnable), projectKey, keyProjectName)
}

// ProjectKeysList mocks base method.
func (m *MockInterface) ProjectKeysList(projectKey string) ([]sdk.ProjectKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectKeysList", projectKey)
	ret0, _ := ret[0].([]sdk.ProjectKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectKeysList indicates an expected call of ProjectKeysList.
func (mr *MockInterfaceMockRecorder) ProjectKeysList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectKeysList", reflect.TypeOf((*MockInterface)(nil).ProjectKeysList), projectKey)
}

// ProjectList mocks base method.
func (m *MockInterface) ProjectList(withApplications, withWorkflow bool, filters ...cdsclient.Filter) ([]sdk.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{withApplications, withWorkflow}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectList", varargs...)
	ret0, _ := ret[0].([]sdk.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectList indicates an expected call of ProjectList.
func (mr *MockInterfaceMockRecorder) ProjectList(withApplications, withWorkflow interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{withApplications, withWorkflow}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectList", reflect.TypeOf((*MockInterface)(nil).ProjectList), varargs...)
}

// ProjectRepositoryAnalysis mocks base method.
func (m *MockInterface) ProjectRepositoryAnalysis(ctx context.Context, analysis sdk.AnalysisRequest) (sdk.AnalysisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryAnalysis", ctx, analysis)
	ret0, _ := ret[0].(sdk.AnalysisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryAnalysis indicates an expected call of ProjectRepositoryAnalysis.
func (mr *MockInterfaceMockRecorder) ProjectRepositoryAnalysis(ctx, analysis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryAnalysis", reflect.TypeOf((*MockInterface)(nil).ProjectRepositoryAnalysis), ctx, analysis)
}

// ProjectRepositoryAnalysisGet mocks base method.
func (m *MockInterface) ProjectRepositoryAnalysisGet(ctx context.Context, projectKey, vcsIdentifier, repositoryIdentifier, analysisID string) (sdk.ProjectRepositoryAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryAnalysisGet", ctx, projectKey, vcsIdentifier, repositoryIdentifier, analysisID)
	ret0, _ := ret[0].(sdk.ProjectRepositoryAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryAnalysisGet indicates an expected call of ProjectRepositoryAnalysisGet.
func (mr *MockInterfaceMockRecorder) ProjectRepositoryAnalysisGet(ctx, projectKey, vcsIdentifier, repositoryIdentifier, analysisID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryAnalysisGet", reflect.TypeOf((*MockInterface)(nil).ProjectRepositoryAnalysisGet), ctx, projectKey, vcsIdentifier, repositoryIdentifier, analysisID)
}

// ProjectRepositoryAnalysisList mocks base method.
func (m *MockInterface) ProjectRepositoryAnalysisList(ctx context.Context, projectKey, vcsIdentifier, repositoryIdentifier string) ([]sdk.ProjectRepositoryAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryAnalysisList", ctx, projectKey, vcsIdentifier, repositoryIdentifier)
	ret0, _ := ret[0].([]sdk.ProjectRepositoryAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryAnalysisList indicates an expected call of ProjectRepositoryAnalysisList.
func (mr *MockInterfaceMockRecorder) ProjectRepositoryAnalysisList(ctx, projectKey, vcsIdentifier, repositoryIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryAnalysisList", reflect.TypeOf((*MockInterface)(nil).ProjectRepositoryAnalysisList), ctx, projectKey, vcsIdentifier, repositoryIdentifier)
}

// ProjectRepositoryDelete mocks base method.
func (m *MockInterface) ProjectRepositoryDelete(ctx context.Context, projectKey, vcsName, repositoryName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryDelete", ctx, projectKey, vcsName, repositoryName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectRepositoryDelete indicates an expected call of ProjectRepositoryDelete.
func (mr *MockInterfaceMockRecorder) ProjectRepositoryDelete(ctx, projectKey, vcsName, repositoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryDelete", reflect.TypeOf((*MockInterface)(nil).ProjectRepositoryDelete), ctx, projectKey, vcsName, repositoryName)
}

// ProjectRepositoryHookSecret mocks base method.
func (m *MockInterface) ProjectRepositoryHookSecret(ctx context.Context, projectKey, vcsType, vcsName, repoName string) (sdk.HookAccessData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryHookSecret", ctx, projectKey, vcsType, vcsName, repoName)
	ret0, _ := ret[0].(sdk.HookAccessData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryHookSecret indicates an expected call of ProjectRepositoryHookSecret.
func (mr *MockInterfaceMockRecorder) ProjectRepositoryHookSecret(ctx, projectKey, vcsType, vcsName, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryHookSecret", reflect.TypeOf((*MockInterface)(nil).ProjectRepositoryHookSecret), ctx, projectKey, vcsType, vcsName, repoName)
}

// ProjectRepositoryManagerDelete mocks base method.
func (m *MockInterface) ProjectRepositoryManagerDelete(projectKey, repoManagerName string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryManagerDelete", projectKey, repoManagerName, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectRepositoryManagerDelete indicates an expected call of ProjectRepositoryManagerDelete.
func (mr *MockInterfaceMockRecorder) ProjectRepositoryManagerDelete(projectKey, repoManagerName, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryManagerDelete", reflect.TypeOf((*MockInterface)(nil).ProjectRepositoryManagerDelete), projectKey, repoManagerName, force)
}

// ProjectRepositoryManagerList mocks base method.
func (m *MockInterface) ProjectRepositoryManagerList(projectKey string) ([]sdk.ProjectVCSServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectRepositoryManagerList", projectKey)
	ret0, _ := ret[0].([]sdk.ProjectVCSServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectRepositoryManagerList indicates an expected call of ProjectRepositoryManagerList.
func (mr *MockInterfaceMockRecorder) ProjectRepositoryManagerList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectRepositoryManagerList", reflect.TypeOf((*MockInterface)(nil).ProjectRepositoryManagerList), projectKey)
}

// ProjectUpdate mocks base method.
func (m *MockInterface) ProjectUpdate(key string, project *sdk.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectUpdate", key, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectUpdate indicates an expected call of ProjectUpdate.
func (mr *MockInterfaceMockRecorder) ProjectUpdate(key, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUpdate", reflect.TypeOf((*MockInterface)(nil).ProjectUpdate), key, project)
}

// ProjectVCSDelete mocks base method.
func (m *MockInterface) ProjectVCSDelete(ctx context.Context, projectKey, vcsName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSDelete", ctx, projectKey, vcsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVCSDelete indicates an expected call of ProjectVCSDelete.
func (mr *MockInterfaceMockRecorder) ProjectVCSDelete(ctx, projectKey, vcsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSDelete", reflect.TypeOf((*MockInterface)(nil).ProjectVCSDelete), ctx, projectKey, vcsName)
}

// ProjectVCSGet mocks base method.
func (m *MockInterface) ProjectVCSGet(ctx context.Context, projectKey, integrationName string) (sdk.VCSProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSGet", ctx, projectKey, integrationName)
	ret0, _ := ret[0].(sdk.VCSProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVCSGet indicates an expected call of ProjectVCSGet.
func (mr *MockInterfaceMockRecorder) ProjectVCSGet(ctx, projectKey, integrationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSGet", reflect.TypeOf((*MockInterface)(nil).ProjectVCSGet), ctx, projectKey, integrationName)
}

// ProjectVCSImport mocks base method.
func (m *MockInterface) ProjectVCSImport(ctx context.Context, projectKey string, vcs sdk.VCSProject, mods ...cdsclient.RequestModifier) (sdk.VCSProject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcs}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectVCSImport", varargs...)
	ret0, _ := ret[0].(sdk.VCSProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVCSImport indicates an expected call of ProjectVCSImport.
func (mr *MockInterfaceMockRecorder) ProjectVCSImport(ctx, projectKey, vcs interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcs}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSImport", reflect.TypeOf((*MockInterface)(nil).ProjectVCSImport), varargs...)
}

// ProjectVCSList mocks base method.
func (m *MockInterface) ProjectVCSList(ctx context.Context, projectKey string) ([]sdk.VCSProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSList", ctx, projectKey)
	ret0, _ := ret[0].([]sdk.VCSProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVCSList indicates an expected call of ProjectVCSList.
func (mr *MockInterfaceMockRecorder) ProjectVCSList(ctx, projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSList", reflect.TypeOf((*MockInterface)(nil).ProjectVCSList), ctx, projectKey)
}

// ProjectVCSRepositoryAdd mocks base method.
func (m *MockInterface) ProjectVCSRepositoryAdd(ctx context.Context, projectKey, vcsName string, repo sdk.ProjectRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSRepositoryAdd", ctx, projectKey, vcsName, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVCSRepositoryAdd indicates an expected call of ProjectVCSRepositoryAdd.
func (mr *MockInterfaceMockRecorder) ProjectVCSRepositoryAdd(ctx, projectKey, vcsName, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSRepositoryAdd", reflect.TypeOf((*MockInterface)(nil).ProjectVCSRepositoryAdd), ctx, projectKey, vcsName, repo)
}

// ProjectVCSRepositoryList mocks base method.
func (m *MockInterface) ProjectVCSRepositoryList(ctx context.Context, projectKey, vcsName string) ([]sdk.ProjectRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVCSRepositoryList", ctx, projectKey, vcsName)
	ret0, _ := ret[0].([]sdk.ProjectRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVCSRepositoryList indicates an expected call of ProjectVCSRepositoryList.
func (mr *MockInterfaceMockRecorder) ProjectVCSRepositoryList(ctx, projectKey, vcsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVCSRepositoryList", reflect.TypeOf((*MockInterface)(nil).ProjectVCSRepositoryList), ctx, projectKey, vcsName)
}

// ProjectVariableCreate mocks base method.
func (m *MockInterface) ProjectVariableCreate(projectKey string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableCreate", projectKey, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVariableCreate indicates an expected call of ProjectVariableCreate.
func (mr *MockInterfaceMockRecorder) ProjectVariableCreate(projectKey, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableCreate", reflect.TypeOf((*MockInterface)(nil).ProjectVariableCreate), projectKey, variable)
}

// ProjectVariableDelete mocks base method.
func (m *MockInterface) ProjectVariableDelete(projectKey, varName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableDelete", projectKey, varName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVariableDelete indicates an expected call of ProjectVariableDelete.
func (mr *MockInterfaceMockRecorder) ProjectVariableDelete(projectKey, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableDelete", reflect.TypeOf((*MockInterface)(nil).ProjectVariableDelete), projectKey, varName)
}

// ProjectVariableGet mocks base method.
func (m *MockInterface) ProjectVariableGet(projectKey, varName string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableGet", projectKey, varName)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVariableGet indicates an expected call of ProjectVariableGet.
func (mr *MockInterfaceMockRecorder) ProjectVariableGet(projectKey, varName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableGet", reflect.TypeOf((*MockInterface)(nil).ProjectVariableGet), projectKey, varName)
}

// ProjectVariableUpdate mocks base method.
func (m *MockInterface) ProjectVariableUpdate(projectKey string, variable *sdk.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariableUpdate", projectKey, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectVariableUpdate indicates an expected call of ProjectVariableUpdate.
func (mr *MockInterfaceMockRecorder) ProjectVariableUpdate(projectKey, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariableUpdate", reflect.TypeOf((*MockInterface)(nil).ProjectVariableUpdate), projectKey, variable)
}

// ProjectVariablesList mocks base method.
func (m *MockInterface) ProjectVariablesList(key string) ([]sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectVariablesList", key)
	ret0, _ := ret[0].([]sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectVariablesList indicates an expected call of ProjectVariablesList.
func (mr *MockInterfaceMockRecorder) ProjectVariablesList(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectVariablesList", reflect.TypeOf((*MockInterface)(nil).ProjectVariablesList), key)
}

// PutJSON mocks base method.
func (m *MockInterface) PutJSON(ctx context.Context, path string, in, out interface{}, mods ...cdsclient.RequestModifier) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, in, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutJSON", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutJSON indicates an expected call of PutJSON.
func (mr *MockInterfaceMockRecorder) PutJSON(ctx, path, in, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, in, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutJSON", reflect.TypeOf((*MockInterface)(nil).PutJSON), varargs...)
}

// QueueCountWorkflowNodeJobRun mocks base method.
func (m *MockInterface) QueueCountWorkflowNodeJobRun(since, until *time.Time, modelType string) (sdk.WorkflowNodeJobRunCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCountWorkflowNodeJobRun", since, until, modelType)
	ret0, _ := ret[0].(sdk.WorkflowNodeJobRunCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueCountWorkflowNodeJobRun indicates an expected call of QueueCountWorkflowNodeJobRun.
func (mr *MockInterfaceMockRecorder) QueueCountWorkflowNodeJobRun(since, until, modelType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCountWorkflowNodeJobRun", reflect.TypeOf((*MockInterface)(nil).QueueCountWorkflowNodeJobRun), since, until, modelType)
}

// QueueJobBook mocks base method.
func (m *MockInterface) QueueJobBook(ctx context.Context, id string) (sdk.WorkflowNodeJobRunBooked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobBook", ctx, id)
	ret0, _ := ret[0].(sdk.WorkflowNodeJobRunBooked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueJobBook indicates an expected call of QueueJobBook.
func (mr *MockInterfaceMockRecorder) QueueJobBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobBook", reflect.TypeOf((*MockInterface)(nil).QueueJobBook), ctx, id)
}

// QueueJobInfo mocks base method.
func (m *MockInterface) QueueJobInfo(ctx context.Context, id string) (*sdk.WorkflowNodeJobRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobInfo", ctx, id)
	ret0, _ := ret[0].(*sdk.WorkflowNodeJobRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueJobInfo indicates an expected call of QueueJobInfo.
func (mr *MockInterfaceMockRecorder) QueueJobInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobInfo", reflect.TypeOf((*MockInterface)(nil).QueueJobInfo), ctx, id)
}

// QueueJobRelease mocks base method.
func (m *MockInterface) QueueJobRelease(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobRelease", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobRelease indicates an expected call of QueueJobRelease.
func (mr *MockInterfaceMockRecorder) QueueJobRelease(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobRelease", reflect.TypeOf((*MockInterface)(nil).QueueJobRelease), ctx, id)
}

// QueueJobSendSpawnInfo mocks base method.
func (m *MockInterface) QueueJobSendSpawnInfo(ctx context.Context, id string, in []sdk.SpawnInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobSendSpawnInfo", ctx, id, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobSendSpawnInfo indicates an expected call of QueueJobSendSpawnInfo.
func (mr *MockInterfaceMockRecorder) QueueJobSendSpawnInfo(ctx, id, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobSendSpawnInfo", reflect.TypeOf((*MockInterface)(nil).QueueJobSendSpawnInfo), ctx, id, in)
}

// QueueJobSetVersion mocks base method.
func (m *MockInterface) QueueJobSetVersion(ctx context.Context, jobID int64, version sdk.WorkflowRunVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobSetVersion", ctx, jobID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobSetVersion indicates an expected call of QueueJobSetVersion.
func (mr *MockInterfaceMockRecorder) QueueJobSetVersion(ctx, jobID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobSetVersion", reflect.TypeOf((*MockInterface)(nil).QueueJobSetVersion), ctx, jobID, version)
}

// QueueJobTag mocks base method.
func (m *MockInterface) QueueJobTag(ctx context.Context, jobID int64, tags []sdk.WorkflowRunTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobTag", ctx, jobID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobTag indicates an expected call of QueueJobTag.
func (mr *MockInterfaceMockRecorder) QueueJobTag(ctx, jobID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobTag", reflect.TypeOf((*MockInterface)(nil).QueueJobTag), ctx, jobID, tags)
}

// QueuePolling mocks base method.
func (m *MockInterface) QueuePolling(ctx context.Context, goRoutines *sdk.GoRoutines, jobs chan<- sdk.WorkflowNodeJobRun, errs chan<- error, delay time.Duration, ms ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, goRoutines, jobs, errs, delay}
	for _, a := range ms {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueuePolling", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuePolling indicates an expected call of QueuePolling.
func (mr *MockInterfaceMockRecorder) QueuePolling(ctx, goRoutines, jobs, errs, delay interface{}, ms ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, goRoutines, jobs, errs, delay}, ms...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuePolling", reflect.TypeOf((*MockInterface)(nil).QueuePolling), varargs...)
}

// QueueSendResult mocks base method.
func (m *MockInterface) QueueSendResult(ctx context.Context, id int64, res sdk.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSendResult", ctx, id, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSendResult indicates an expected call of QueueSendResult.
func (mr *MockInterfaceMockRecorder) QueueSendResult(ctx, id, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSendResult", reflect.TypeOf((*MockInterface)(nil).QueueSendResult), ctx, id, res)
}

// QueueSendStepResult mocks base method.
func (m *MockInterface) QueueSendStepResult(ctx context.Context, id int64, res sdk.StepStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSendStepResult", ctx, id, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSendStepResult indicates an expected call of QueueSendStepResult.
func (mr *MockInterfaceMockRecorder) QueueSendStepResult(ctx, id, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSendStepResult", reflect.TypeOf((*MockInterface)(nil).QueueSendStepResult), ctx, id, res)
}

// QueueSendUnitTests mocks base method.
func (m *MockInterface) QueueSendUnitTests(ctx context.Context, id int64, report sdk.JUnitTestsSuites) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSendUnitTests", ctx, id, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSendUnitTests indicates an expected call of QueueSendUnitTests.
func (mr *MockInterfaceMockRecorder) QueueSendUnitTests(ctx, id, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSendUnitTests", reflect.TypeOf((*MockInterface)(nil).QueueSendUnitTests), ctx, id, report)
}

// QueueTakeJob mocks base method.
func (m *MockInterface) QueueTakeJob(ctx context.Context, job sdk.WorkflowNodeJobRun) (*sdk.WorkflowNodeJobRunData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueTakeJob", ctx, job)
	ret0, _ := ret[0].(*sdk.WorkflowNodeJobRunData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueTakeJob indicates an expected call of QueueTakeJob.
func (mr *MockInterfaceMockRecorder) QueueTakeJob(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueTakeJob", reflect.TypeOf((*MockInterface)(nil).QueueTakeJob), ctx, job)
}

// QueueWorkerCacheLink mocks base method.
func (m *MockInterface) QueueWorkerCacheLink(ctx context.Context, jobID int64, tag string) (sdk.CDNItemLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkerCacheLink", ctx, jobID, tag)
	ret0, _ := ret[0].(sdk.CDNItemLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueWorkerCacheLink indicates an expected call of QueueWorkerCacheLink.
func (mr *MockInterfaceMockRecorder) QueueWorkerCacheLink(ctx, jobID, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkerCacheLink", reflect.TypeOf((*MockInterface)(nil).QueueWorkerCacheLink), ctx, jobID, tag)
}

// QueueWorkflowNodeJobRun mocks base method.
func (m *MockInterface) QueueWorkflowNodeJobRun(mods ...cdsclient.RequestModifier) ([]sdk.WorkflowNodeJobRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueueWorkflowNodeJobRun", varargs...)
	ret0, _ := ret[0].([]sdk.WorkflowNodeJobRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueWorkflowNodeJobRun indicates an expected call of QueueWorkflowNodeJobRun.
func (mr *MockInterfaceMockRecorder) QueueWorkflowNodeJobRun(mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowNodeJobRun", reflect.TypeOf((*MockInterface)(nil).QueueWorkflowNodeJobRun), mods...)
}

// QueueWorkflowRunResultCheck mocks base method.
func (m *MockInterface) QueueWorkflowRunResultCheck(ctx context.Context, jobID int64, runResultCheck sdk.WorkflowRunResultCheck) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultCheck", ctx, jobID, runResultCheck)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueWorkflowRunResultCheck indicates an expected call of QueueWorkflowRunResultCheck.
func (mr *MockInterfaceMockRecorder) QueueWorkflowRunResultCheck(ctx, jobID, runResultCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultCheck", reflect.TypeOf((*MockInterface)(nil).QueueWorkflowRunResultCheck), ctx, jobID, runResultCheck)
}

// QueueWorkflowRunResultsAdd mocks base method.
func (m *MockInterface) QueueWorkflowRunResultsAdd(ctx context.Context, jobID int64, addRequest sdk.WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultsAdd", ctx, jobID, addRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWorkflowRunResultsAdd indicates an expected call of QueueWorkflowRunResultsAdd.
func (mr *MockInterfaceMockRecorder) QueueWorkflowRunResultsAdd(ctx, jobID, addRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultsAdd", reflect.TypeOf((*MockInterface)(nil).QueueWorkflowRunResultsAdd), ctx, jobID, addRequest)
}

// QueueWorkflowRunResultsPromote mocks base method.
func (m *MockInterface) QueueWorkflowRunResultsPromote(ctx context.Context, permJobID int64, runResultIDs []string, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultsPromote", ctx, permJobID, runResultIDs, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWorkflowRunResultsPromote indicates an expected call of QueueWorkflowRunResultsPromote.
func (mr *MockInterfaceMockRecorder) QueueWorkflowRunResultsPromote(ctx, permJobID, runResultIDs, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultsPromote", reflect.TypeOf((*MockInterface)(nil).QueueWorkflowRunResultsPromote), ctx, permJobID, runResultIDs, to)
}

// QueueWorkflowRunResultsRelease mocks base method.
func (m *MockInterface) QueueWorkflowRunResultsRelease(ctx context.Context, permJobID int64, runResultIDs []string, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultsRelease", ctx, permJobID, runResultIDs, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWorkflowRunResultsRelease indicates an expected call of QueueWorkflowRunResultsRelease.
func (mr *MockInterfaceMockRecorder) QueueWorkflowRunResultsRelease(ctx, permJobID, runResultIDs, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultsRelease", reflect.TypeOf((*MockInterface)(nil).QueueWorkflowRunResultsRelease), ctx, permJobID, runResultIDs, to)
}

// RBACDelete mocks base method.
func (m *MockInterface) RBACDelete(ctx context.Context, permissionIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RBACDelete", ctx, permissionIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// RBACDelete indicates an expected call of RBACDelete.
func (mr *MockInterfaceMockRecorder) RBACDelete(ctx, permissionIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RBACDelete", reflect.TypeOf((*MockInterface)(nil).RBACDelete), ctx, permissionIdentifier)
}

// RBACGet mocks base method.
func (m *MockInterface) RBACGet(ctx context.Context, permissionIdentifier string) (sdk.RBAC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RBACGet", ctx, permissionIdentifier)
	ret0, _ := ret[0].(sdk.RBAC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RBACGet indicates an expected call of RBACGet.
func (mr *MockInterfaceMockRecorder) RBACGet(ctx, permissionIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RBACGet", reflect.TypeOf((*MockInterface)(nil).RBACGet), ctx, permissionIdentifier)
}

// RBACImport mocks base method.
func (m *MockInterface) RBACImport(ctx context.Context, rbacRule sdk.RBAC, mods ...cdsclient.RequestModifier) (sdk.RBAC, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rbacRule}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RBACImport", varargs...)
	ret0, _ := ret[0].(sdk.RBAC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RBACImport indicates an expected call of RBACImport.
func (mr *MockInterfaceMockRecorder) RBACImport(ctx, rbacRule interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rbacRule}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RBACImport", reflect.TypeOf((*MockInterface)(nil).RBACImport), varargs...)
}

// RegionAdd mocks base method.
func (m *MockInterface) RegionAdd(ctx context.Context, region sdk.Region) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionAdd", ctx, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegionAdd indicates an expected call of RegionAdd.
func (mr *MockInterfaceMockRecorder) RegionAdd(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionAdd", reflect.TypeOf((*MockInterface)(nil).RegionAdd), ctx, region)
}

// RegionDelete mocks base method.
func (m *MockInterface) RegionDelete(ctx context.Context, regionIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionDelete", ctx, regionIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegionDelete indicates an expected call of RegionDelete.
func (mr *MockInterfaceMockRecorder) RegionDelete(ctx, regionIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionDelete", reflect.TypeOf((*MockInterface)(nil).RegionDelete), ctx, regionIdentifier)
}

// RegionGet mocks base method.
func (m *MockInterface) RegionGet(ctx context.Context, regionIdentifier string) (sdk.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionGet", ctx, regionIdentifier)
	ret0, _ := ret[0].(sdk.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionGet indicates an expected call of RegionGet.
func (mr *MockInterfaceMockRecorder) RegionGet(ctx, regionIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionGet", reflect.TypeOf((*MockInterface)(nil).RegionGet), ctx, regionIdentifier)
}

// RegionList mocks base method.
func (m *MockInterface) RegionList(ctx context.Context) ([]sdk.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionList", ctx)
	ret0, _ := ret[0].([]sdk.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionList indicates an expected call of RegionList.
func (mr *MockInterfaceMockRecorder) RegionList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionList", reflect.TypeOf((*MockInterface)(nil).RegionList), ctx)
}

// RepositoriesList mocks base method.
func (m *MockInterface) RepositoriesList(projectKey, repoManager string, resync bool) ([]sdk.VCSRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoriesList", projectKey, repoManager, resync)
	ret0, _ := ret[0].([]sdk.VCSRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoriesList indicates an expected call of RepositoriesList.
func (mr *MockInterfaceMockRecorder) RepositoriesList(projectKey, repoManager, resync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoriesList", reflect.TypeOf((*MockInterface)(nil).RepositoriesList), projectKey, repoManager, resync)
}

// Request mocks base method.
func (m *MockInterface) Request(ctx context.Context, method, path string, body io.Reader, mods ...cdsclient.RequestModifier) ([]byte, http.Header, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method, path, body}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Request", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(http.Header)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Request indicates an expected call of Request.
func (mr *MockInterfaceMockRecorder) Request(ctx, method, path, body interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method, path, body}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockInterface)(nil).Request), varargs...)
}

// RequestJSON mocks base method.
func (m *MockInterface) RequestJSON(ctx context.Context, method, path string, in, out interface{}, mods ...cdsclient.RequestModifier) ([]byte, http.Header, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method, path, in, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestJSON", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(http.Header)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// RequestJSON indicates an expected call of RequestJSON.
func (mr *MockInterfaceMockRecorder) RequestJSON(ctx, method, path, in, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method, path, in, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestJSON", reflect.TypeOf((*MockInterface)(nil).RequestJSON), varargs...)
}

// RequestWebsocket mocks base method.
func (m *MockInterface) RequestWebsocket(ctx context.Context, goRoutines *sdk.GoRoutines, path string, msgToSend <-chan json.RawMessage, msgReceived chan<- json.RawMessage, errorReceived chan<- error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWebsocket", ctx, goRoutines, path, msgToSend, msgReceived, errorReceived)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWebsocket indicates an expected call of RequestWebsocket.
func (mr *MockInterfaceMockRecorder) RequestWebsocket(ctx, goRoutines, path, msgToSend, msgReceived, errorReceived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWebsocket", reflect.TypeOf((*MockInterface)(nil).RequestWebsocket), ctx, goRoutines, path, msgToSend, msgReceived, errorReceived)
}

// Requirements mocks base method.
func (m *MockInterface) Requirements() ([]sdk.Requirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Requirements")
	ret0, _ := ret[0].([]sdk.Requirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Requirements indicates an expected call of Requirements.
func (mr *MockInterfaceMockRecorder) Requirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requirements", reflect.TypeOf((*MockInterface)(nil).Requirements))
}

// RetrieveHookEventSigningKey mocks base method.
func (m *MockInterface) RetrieveHookEventSigningKey(ctx context.Context, req sdk.HookRetrieveSignKeyRequest) (sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveHookEventSigningKey", ctx, req)
	ret0, _ := ret[0].(sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHookEventSigningKey indicates an expected call of RetrieveHookEventSigningKey.
func (mr *MockInterfaceMockRecorder) RetrieveHookEventSigningKey(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHookEventSigningKey", reflect.TypeOf((*MockInterface)(nil).RetrieveHookEventSigningKey), ctx, req)
}

// RetrieveHookEventSigningKeyOperation mocks base method.
func (m *MockInterface) RetrieveHookEventSigningKeyOperation(ctx context.Context, operationUUID string) (sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveHookEventSigningKeyOperation", ctx, operationUUID)
	ret0, _ := ret[0].(sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHookEventSigningKeyOperation indicates an expected call of RetrieveHookEventSigningKeyOperation.
func (mr *MockInterfaceMockRecorder) RetrieveHookEventSigningKeyOperation(ctx, operationUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHookEventSigningKeyOperation", reflect.TypeOf((*MockInterface)(nil).RetrieveHookEventSigningKeyOperation), ctx, operationUUID)
}

// RetrieveHookEventUser mocks base method.
func (m *MockInterface) RetrieveHookEventUser(ctx context.Context, req sdk.HookRetrieveUserRequest) (sdk.HookRetrieveUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveHookEventUser", ctx, req)
	ret0, _ := ret[0].(sdk.HookRetrieveUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHookEventUser indicates an expected call of RetrieveHookEventUser.
func (mr *MockInterfaceMockRecorder) RetrieveHookEventUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHookEventUser", reflect.TypeOf((*MockInterface)(nil).RetrieveHookEventUser), ctx, req)
}

// ServiceCallDELETE mocks base method.
func (m *MockInterface) ServiceCallDELETE(stype, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCallDELETE", stype, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceCallDELETE indicates an expected call of ServiceCallDELETE.
func (mr *MockInterfaceMockRecorder) ServiceCallDELETE(stype, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCallDELETE", reflect.TypeOf((*MockInterface)(nil).ServiceCallDELETE), stype, url)
}

// ServiceCallGET mocks base method.
func (m *MockInterface) ServiceCallGET(stype, url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCallGET", stype, url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceCallGET indicates an expected call of ServiceCallGET.
func (mr *MockInterfaceMockRecorder) ServiceCallGET(stype, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCallGET", reflect.TypeOf((*MockInterface)(nil).ServiceCallGET), stype, url)
}

// ServiceCallPOST mocks base method.
func (m *MockInterface) ServiceCallPOST(stype, url string, body []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCallPOST", stype, url, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceCallPOST indicates an expected call of ServiceCallPOST.
func (mr *MockInterfaceMockRecorder) ServiceCallPOST(stype, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCallPOST", reflect.TypeOf((*MockInterface)(nil).ServiceCallPOST), stype, url, body)
}

// ServiceCallPUT mocks base method.
func (m *MockInterface) ServiceCallPUT(stype, url string, body []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCallPUT", stype, url, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceCallPUT indicates an expected call of ServiceCallPUT.
func (mr *MockInterfaceMockRecorder) ServiceCallPUT(stype, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCallPUT", reflect.TypeOf((*MockInterface)(nil).ServiceCallPUT), stype, url, body)
}

// ServiceConfigurationGet mocks base method.
func (m *MockInterface) ServiceConfigurationGet(arg0 context.Context, arg1 string) ([]sdk.ServiceConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceConfigurationGet", arg0, arg1)
	ret0, _ := ret[0].([]sdk.ServiceConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceConfigurationGet indicates an expected call of ServiceConfigurationGet.
func (mr *MockInterfaceMockRecorder) ServiceConfigurationGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceConfigurationGet", reflect.TypeOf((*MockInterface)(nil).ServiceConfigurationGet), arg0, arg1)
}

// ServiceDelete mocks base method.
func (m *MockInterface) ServiceDelete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceDelete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceDelete indicates an expected call of ServiceDelete.
func (mr *MockInterfaceMockRecorder) ServiceDelete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDelete", reflect.TypeOf((*MockInterface)(nil).ServiceDelete), name)
}

// ServiceHeartbeat mocks base method.
func (m *MockInterface) ServiceHeartbeat(arg0 *sdk.MonitoringStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceHeartbeat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceHeartbeat indicates an expected call of ServiceHeartbeat.
func (mr *MockInterfaceMockRecorder) ServiceHeartbeat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceHeartbeat", reflect.TypeOf((*MockInterface)(nil).ServiceHeartbeat), arg0)
}

// ServiceNameCallGET mocks base method.
func (m *MockInterface) ServiceNameCallGET(name, url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNameCallGET", name, url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceNameCallGET indicates an expected call of ServiceNameCallGET.
func (mr *MockInterfaceMockRecorder) ServiceNameCallGET(name, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNameCallGET", reflect.TypeOf((*MockInterface)(nil).ServiceNameCallGET), name, url)
}

// Services mocks base method.
func (m *MockInterface) Services() ([]sdk.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services")
	ret0, _ := ret[0].([]sdk.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Services indicates an expected call of Services.
func (mr *MockInterfaceMockRecorder) Services() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockInterface)(nil).Services))
}

// ServicesByName mocks base method.
func (m *MockInterface) ServicesByName(name string) (*sdk.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesByName", name)
	ret0, _ := ret[0].(*sdk.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesByName indicates an expected call of ServicesByName.
func (mr *MockInterfaceMockRecorder) ServicesByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesByName", reflect.TypeOf((*MockInterface)(nil).ServicesByName), name)
}

// ServicesByType mocks base method.
func (m *MockInterface) ServicesByType(stype string) ([]sdk.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesByType", stype)
	ret0, _ := ret[0].([]sdk.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesByType indicates an expected call of ServicesByType.
func (mr *MockInterfaceMockRecorder) ServicesByType(stype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesByType", reflect.TypeOf((*MockInterface)(nil).ServicesByType), stype)
}

// Stream mocks base method.
func (m *MockInterface) Stream(ctx context.Context, httpClient cdsclient.HTTPClient, method, path string, body io.Reader, mods ...cdsclient.RequestModifier) (io.ReadCloser, http.Header, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, httpClient, method, path, body}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stream", varargs...)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(http.Header)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Stream indicates an expected call of Stream.
func (mr *MockInterfaceMockRecorder) Stream(ctx, httpClient, method, path, body interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, httpClient, method, path, body}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockInterface)(nil).Stream), varargs...)
}

// TemplateApply mocks base method.
func (m *MockInterface) TemplateApply(groupName, templateSlug string, req sdk.WorkflowTemplateRequest, mods ...cdsclient.RequestModifier) (*tar.Reader, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, templateSlug, req}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TemplateApply", varargs...)
	ret0, _ := ret[0].(*tar.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateApply indicates an expected call of TemplateApply.
func (mr *MockInterfaceMockRecorder) TemplateApply(groupName, templateSlug, req interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, templateSlug, req}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateApply", reflect.TypeOf((*MockInterface)(nil).TemplateApply), varargs...)
}

// TemplateBulk mocks base method.
func (m *MockInterface) TemplateBulk(groupName, templateSlug string, req sdk.WorkflowTemplateBulk) (*sdk.WorkflowTemplateBulk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateBulk", groupName, templateSlug, req)
	ret0, _ := ret[0].(*sdk.WorkflowTemplateBulk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateBulk indicates an expected call of TemplateBulk.
func (mr *MockInterfaceMockRecorder) TemplateBulk(groupName, templateSlug, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateBulk", reflect.TypeOf((*MockInterface)(nil).TemplateBulk), groupName, templateSlug, req)
}

// TemplateDelete mocks base method.
func (m *MockInterface) TemplateDelete(groupName, templateSlug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateDelete", groupName, templateSlug)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemplateDelete indicates an expected call of TemplateDelete.
func (mr *MockInterfaceMockRecorder) TemplateDelete(groupName, templateSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateDelete", reflect.TypeOf((*MockInterface)(nil).TemplateDelete), groupName, templateSlug)
}

// TemplateDeleteInstance mocks base method.
func (m *MockInterface) TemplateDeleteInstance(groupName, templateSlug string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateDeleteInstance", groupName, templateSlug, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemplateDeleteInstance indicates an expected call of TemplateDeleteInstance.
func (mr *MockInterfaceMockRecorder) TemplateDeleteInstance(groupName, templateSlug, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateDeleteInstance", reflect.TypeOf((*MockInterface)(nil).TemplateDeleteInstance), groupName, templateSlug, id)
}

// TemplateGet mocks base method.
func (m *MockInterface) TemplateGet(groupName, templateSlug string) (*sdk.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateGet", groupName, templateSlug)
	ret0, _ := ret[0].(*sdk.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateGet indicates an expected call of TemplateGet.
func (mr *MockInterfaceMockRecorder) TemplateGet(groupName, templateSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateGet", reflect.TypeOf((*MockInterface)(nil).TemplateGet), groupName, templateSlug)
}

// TemplateGetAll mocks base method.
func (m *MockInterface) TemplateGetAll() ([]sdk.WorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateGetAll")
	ret0, _ := ret[0].([]sdk.WorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateGetAll indicates an expected call of TemplateGetAll.
func (mr *MockInterfaceMockRecorder) TemplateGetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateGetAll", reflect.TypeOf((*MockInterface)(nil).TemplateGetAll))
}

// TemplateGetBulk mocks base method.
func (m *MockInterface) TemplateGetBulk(groupName, templateSlug string, id int64) (*sdk.WorkflowTemplateBulk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateGetBulk", groupName, templateSlug, id)
	ret0, _ := ret[0].(*sdk.WorkflowTemplateBulk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateGetBulk indicates an expected call of TemplateGetBulk.
func (mr *MockInterfaceMockRecorder) TemplateGetBulk(groupName, templateSlug, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateGetBulk", reflect.TypeOf((*MockInterface)(nil).TemplateGetBulk), groupName, templateSlug, id)
}

// TemplateGetInstances mocks base method.
func (m *MockInterface) TemplateGetInstances(groupName, templateSlug string) ([]sdk.WorkflowTemplateInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateGetInstances", groupName, templateSlug)
	ret0, _ := ret[0].([]sdk.WorkflowTemplateInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateGetInstances indicates an expected call of TemplateGetInstances.
func (mr *MockInterfaceMockRecorder) TemplateGetInstances(groupName, templateSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateGetInstances", reflect.TypeOf((*MockInterface)(nil).TemplateGetInstances), groupName, templateSlug)
}

// TemplatePull mocks base method.
func (m *MockInterface) TemplatePull(groupName, templateSlug string) (*tar.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplatePull", groupName, templateSlug)
	ret0, _ := ret[0].(*tar.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplatePull indicates an expected call of TemplatePull.
func (mr *MockInterfaceMockRecorder) TemplatePull(groupName, templateSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplatePull", reflect.TypeOf((*MockInterface)(nil).TemplatePull), groupName, templateSlug)
}

// TemplatePush mocks base method.
func (m *MockInterface) TemplatePush(tarContent io.Reader) ([]string, *tar.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplatePush", tarContent)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*tar.Reader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TemplatePush indicates an expected call of TemplatePush.
func (mr *MockInterfaceMockRecorder) TemplatePush(tarContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplatePush", reflect.TypeOf((*MockInterface)(nil).TemplatePush), tarContent)
}

// UpdateFavorite mocks base method.
func (m *MockInterface) UpdateFavorite(ctx context.Context, params sdk.FavoriteParams) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFavorite", ctx, params)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFavorite indicates an expected call of UpdateFavorite.
func (mr *MockInterfaceMockRecorder) UpdateFavorite(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFavorite", reflect.TypeOf((*MockInterface)(nil).UpdateFavorite), ctx, params)
}

// UserGet mocks base method.
func (m *MockInterface) UserGet(ctx context.Context, username string) (*sdk.AuthentifiedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", ctx, username)
	ret0, _ := ret[0].(*sdk.AuthentifiedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockInterfaceMockRecorder) UserGet(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockInterface)(nil).UserGet), ctx, username)
}

// UserGetGroups mocks base method.
func (m *MockInterface) UserGetGroups(ctx context.Context, username string) (map[string][]sdk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetGroups", ctx, username)
	ret0, _ := ret[0].(map[string][]sdk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetGroups indicates an expected call of UserGetGroups.
func (mr *MockInterfaceMockRecorder) UserGetGroups(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetGroups", reflect.TypeOf((*MockInterface)(nil).UserGetGroups), ctx, username)
}

// UserGetMe mocks base method.
func (m *MockInterface) UserGetMe(ctx context.Context) (*sdk.AuthentifiedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetMe", ctx)
	ret0, _ := ret[0].(*sdk.AuthentifiedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetMe indicates an expected call of UserGetMe.
func (mr *MockInterfaceMockRecorder) UserGetMe(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetMe", reflect.TypeOf((*MockInterface)(nil).UserGetMe), ctx)
}

// UserGetSchema mocks base method.
func (m *MockInterface) UserGetSchema(ctx context.Context) (sdk.SchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetSchema", ctx)
	ret0, _ := ret[0].(sdk.SchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetSchema indicates an expected call of UserGetSchema.
func (mr *MockInterfaceMockRecorder) UserGetSchema(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetSchema", reflect.TypeOf((*MockInterface)(nil).UserGetSchema), ctx)
}

// UserGpgKeyCreate mocks base method.
func (m *MockInterface) UserGpgKeyCreate(ctx context.Context, username, publicKey string) (sdk.UserGPGKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGpgKeyCreate", ctx, username, publicKey)
	ret0, _ := ret[0].(sdk.UserGPGKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGpgKeyCreate indicates an expected call of UserGpgKeyCreate.
func (mr *MockInterfaceMockRecorder) UserGpgKeyCreate(ctx, username, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGpgKeyCreate", reflect.TypeOf((*MockInterface)(nil).UserGpgKeyCreate), ctx, username, publicKey)
}

// UserGpgKeyDelete mocks base method.
func (m *MockInterface) UserGpgKeyDelete(ctx context.Context, username, keyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGpgKeyDelete", ctx, username, keyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserGpgKeyDelete indicates an expected call of UserGpgKeyDelete.
func (mr *MockInterfaceMockRecorder) UserGpgKeyDelete(ctx, username, keyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGpgKeyDelete", reflect.TypeOf((*MockInterface)(nil).UserGpgKeyDelete), ctx, username, keyID)
}

// UserGpgKeyGet mocks base method.
func (m *MockInterface) UserGpgKeyGet(ctx context.Context, keyID string) (sdk.UserGPGKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGpgKeyGet", ctx, keyID)
	ret0, _ := ret[0].(sdk.UserGPGKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGpgKeyGet indicates an expected call of UserGpgKeyGet.
func (mr *MockInterfaceMockRecorder) UserGpgKeyGet(ctx, keyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGpgKeyGet", reflect.TypeOf((*MockInterface)(nil).UserGpgKeyGet), ctx, keyID)
}

// UserGpgKeyList mocks base method.
func (m *MockInterface) UserGpgKeyList(ctx context.Context, username string) ([]sdk.UserGPGKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGpgKeyList", ctx, username)
	ret0, _ := ret[0].([]sdk.UserGPGKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGpgKeyList indicates an expected call of UserGpgKeyList.
func (mr *MockInterfaceMockRecorder) UserGpgKeyList(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGpgKeyList", reflect.TypeOf((*MockInterface)(nil).UserGpgKeyList), ctx, username)
}

// UserList mocks base method.
func (m *MockInterface) UserList(ctx context.Context) ([]sdk.AuthentifiedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", ctx)
	ret0, _ := ret[0].([]sdk.AuthentifiedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockInterfaceMockRecorder) UserList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockInterface)(nil).UserList), ctx)
}

// UserUpdate mocks base method.
func (m *MockInterface) UserUpdate(ctx context.Context, username string, user *sdk.AuthentifiedUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", ctx, username, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockInterfaceMockRecorder) UserUpdate(ctx, username, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockInterface)(nil).UserUpdate), ctx, username, user)
}

// V2QueueGetJobRun mocks base method.
func (m *MockInterface) V2QueueGetJobRun(ctx context.Context, regionName, id string) (*sdk.V2WorkflowRunJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueGetJobRun", ctx, regionName, id)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueGetJobRun indicates an expected call of V2QueueGetJobRun.
func (mr *MockInterfaceMockRecorder) V2QueueGetJobRun(ctx, regionName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueGetJobRun", reflect.TypeOf((*MockInterface)(nil).V2QueueGetJobRun), ctx, regionName, id)
}

// V2QueueJobResult mocks base method.
func (m *MockInterface) V2QueueJobResult(ctx context.Context, region, jobRunID string, result sdk.V2WorkflowRunJobResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobResult", ctx, region, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobResult indicates an expected call of V2QueueJobResult.
func (mr *MockInterfaceMockRecorder) V2QueueJobResult(ctx, region, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobResult", reflect.TypeOf((*MockInterface)(nil).V2QueueJobResult), ctx, region, jobRunID, result)
}

// V2QueueJobRunResultCreate mocks base method.
func (m *MockInterface) V2QueueJobRunResultCreate(ctx context.Context, regionName, jobRunID string, result *sdk.V2WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultCreate", ctx, regionName, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobRunResultCreate indicates an expected call of V2QueueJobRunResultCreate.
func (mr *MockInterfaceMockRecorder) V2QueueJobRunResultCreate(ctx, regionName, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultCreate", reflect.TypeOf((*MockInterface)(nil).V2QueueJobRunResultCreate), ctx, regionName, jobRunID, result)
}

// V2QueueJobRunResultGet mocks base method.
func (m *MockInterface) V2QueueJobRunResultGet(ctx context.Context, regionName, jobRunID, runResultID string) (*sdk.V2WorkflowRunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultGet", ctx, regionName, jobRunID, runResultID)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueJobRunResultGet indicates an expected call of V2QueueJobRunResultGet.
func (mr *MockInterfaceMockRecorder) V2QueueJobRunResultGet(ctx, regionName, jobRunID, runResultID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultGet", reflect.TypeOf((*MockInterface)(nil).V2QueueJobRunResultGet), ctx, regionName, jobRunID, runResultID)
}

// V2QueueJobRunResultUpdate mocks base method.
func (m *MockInterface) V2QueueJobRunResultUpdate(ctx context.Context, regionName, jobRunID string, result *sdk.V2WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultUpdate", ctx, regionName, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobRunResultUpdate indicates an expected call of V2QueueJobRunResultUpdate.
func (mr *MockInterfaceMockRecorder) V2QueueJobRunResultUpdate(ctx, regionName, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultUpdate", reflect.TypeOf((*MockInterface)(nil).V2QueueJobRunResultUpdate), ctx, regionName, jobRunID, result)
}

// V2QueueJobStepUpdate mocks base method.
func (m *MockInterface) V2QueueJobStepUpdate(ctx context.Context, regionName, id string, stepsStatus sdk.JobStepsStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobStepUpdate", ctx, regionName, id, stepsStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobStepUpdate indicates an expected call of V2QueueJobStepUpdate.
func (mr *MockInterfaceMockRecorder) V2QueueJobStepUpdate(ctx, regionName, id, stepsStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobStepUpdate", reflect.TypeOf((*MockInterface)(nil).V2QueueJobStepUpdate), ctx, regionName, id, stepsStatus)
}

// V2QueuePolling mocks base method.
func (m *MockInterface) V2QueuePolling(ctx context.Context, region string, goRoutines *sdk.GoRoutines, jobs chan<- sdk.V2WorkflowRunJob, errs chan<- error, delay time.Duration, ms ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, region, goRoutines, jobs, errs, delay}
	for _, a := range ms {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "V2QueuePolling", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueuePolling indicates an expected call of V2QueuePolling.
func (mr *MockInterfaceMockRecorder) V2QueuePolling(ctx, region, goRoutines, jobs, errs, delay interface{}, ms ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, region, goRoutines, jobs, errs, delay}, ms...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueuePolling", reflect.TypeOf((*MockInterface)(nil).V2QueuePolling), varargs...)
}

// V2QueuePushJobInfo mocks base method.
func (m *MockInterface) V2QueuePushJobInfo(ctx context.Context, regionName, jobRunID string, msg sdk.V2SendJobRunInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueuePushJobInfo", ctx, regionName, jobRunID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueuePushJobInfo indicates an expected call of V2QueuePushJobInfo.
func (mr *MockInterfaceMockRecorder) V2QueuePushJobInfo(ctx, regionName, jobRunID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueuePushJobInfo", reflect.TypeOf((*MockInterface)(nil).V2QueuePushJobInfo), ctx, regionName, jobRunID, msg)
}

// V2QueueWorkerTakeJob mocks base method.
func (m *MockInterface) V2QueueWorkerTakeJob(ctx context.Context, region, runJobID string) (*sdk.V2TakeJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueWorkerTakeJob", ctx, region, runJobID)
	ret0, _ := ret[0].(*sdk.V2TakeJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueWorkerTakeJob indicates an expected call of V2QueueWorkerTakeJob.
func (mr *MockInterfaceMockRecorder) V2QueueWorkerTakeJob(ctx, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueWorkerTakeJob", reflect.TypeOf((*MockInterface)(nil).V2QueueWorkerTakeJob), ctx, region, runJobID)
}

// V2WorkerGet mocks base method.
func (m *MockInterface) V2WorkerGet(ctx context.Context, name string, mods ...cdsclient.RequestModifier) (*sdk.V2Worker, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "V2WorkerGet", varargs...)
	ret0, _ := ret[0].(*sdk.V2Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2WorkerGet indicates an expected call of V2WorkerGet.
func (mr *MockInterfaceMockRecorder) V2WorkerGet(ctx, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerGet", reflect.TypeOf((*MockInterface)(nil).V2WorkerGet), varargs...)
}

// V2WorkerList mocks base method.
func (m *MockInterface) V2WorkerList(ctx context.Context) ([]sdk.V2Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2WorkerList", ctx)
	ret0, _ := ret[0].([]sdk.V2Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2WorkerList indicates an expected call of V2WorkerList.
func (mr *MockInterfaceMockRecorder) V2WorkerList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerList", reflect.TypeOf((*MockInterface)(nil).V2WorkerList), ctx)
}

// VCSConfiguration mocks base method.
func (m *MockInterface) VCSConfiguration() (map[string]sdk.VCSConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VCSConfiguration")
	ret0, _ := ret[0].(map[string]sdk.VCSConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VCSConfiguration indicates an expected call of VCSConfiguration.
func (mr *MockInterfaceMockRecorder) VCSConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VCSConfiguration", reflect.TypeOf((*MockInterface)(nil).VCSConfiguration))
}

// VCSGerritConfiguration mocks base method.
func (m *MockInterface) VCSGerritConfiguration() (map[string]sdk.VCSGerritConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VCSGerritConfiguration")
	ret0, _ := ret[0].(map[string]sdk.VCSGerritConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VCSGerritConfiguration indicates an expected call of VCSGerritConfiguration.
func (mr *MockInterfaceMockRecorder) VCSGerritConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VCSGerritConfiguration", reflect.TypeOf((*MockInterface)(nil).VCSGerritConfiguration))
}

// VariableEncrypt mocks base method.
func (m *MockInterface) VariableEncrypt(projectKey, varName, content string) (*sdk.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableEncrypt", projectKey, varName, content)
	ret0, _ := ret[0].(*sdk.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableEncrypt indicates an expected call of VariableEncrypt.
func (mr *MockInterfaceMockRecorder) VariableEncrypt(projectKey, varName, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableEncrypt", reflect.TypeOf((*MockInterface)(nil).VariableEncrypt), projectKey, varName, content)
}

// VariableEncryptDelete mocks base method.
func (m *MockInterface) VariableEncryptDelete(projectKey, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableEncryptDelete", projectKey, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// VariableEncryptDelete indicates an expected call of VariableEncryptDelete.
func (mr *MockInterfaceMockRecorder) VariableEncryptDelete(projectKey, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableEncryptDelete", reflect.TypeOf((*MockInterface)(nil).VariableEncryptDelete), projectKey, name)
}

// VariableListEncrypt mocks base method.
func (m *MockInterface) VariableListEncrypt(projectKey string) ([]sdk.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableListEncrypt", projectKey)
	ret0, _ := ret[0].([]sdk.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableListEncrypt indicates an expected call of VariableListEncrypt.
func (mr *MockInterfaceMockRecorder) VariableListEncrypt(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableListEncrypt", reflect.TypeOf((*MockInterface)(nil).VariableListEncrypt), projectKey)
}

// Version mocks base method.
func (m *MockInterface) Version() (*sdk.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*sdk.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockInterfaceMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockInterface)(nil).Version))
}

// WebsocketEventsListen mocks base method.
func (m *MockInterface) WebsocketEventsListen(ctx context.Context, goRoutines *sdk.GoRoutines, chanMsgToSend <-chan []sdk.WebsocketFilter, chanMsgReceived chan<- sdk.WebsocketEvent, chanErrorReceived chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WebsocketEventsListen", ctx, goRoutines, chanMsgToSend, chanMsgReceived, chanErrorReceived)
}

// WebsocketEventsListen indicates an expected call of WebsocketEventsListen.
func (mr *MockInterfaceMockRecorder) WebsocketEventsListen(ctx, goRoutines, chanMsgToSend, chanMsgReceived, chanErrorReceived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebsocketEventsListen", reflect.TypeOf((*MockInterface)(nil).WebsocketEventsListen), ctx, goRoutines, chanMsgToSend, chanMsgReceived, chanErrorReceived)
}

// WorkerDisable mocks base method.
func (m *MockInterface) WorkerDisable(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerDisable", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerDisable indicates an expected call of WorkerDisable.
func (mr *MockInterfaceMockRecorder) WorkerDisable(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerDisable", reflect.TypeOf((*MockInterface)(nil).WorkerDisable), ctx, id)
}

// WorkerGet mocks base method.
func (m *MockInterface) WorkerGet(ctx context.Context, name string, mods ...cdsclient.RequestModifier) (*sdk.Worker, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkerGet", varargs...)
	ret0, _ := ret[0].(*sdk.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerGet indicates an expected call of WorkerGet.
func (mr *MockInterfaceMockRecorder) WorkerGet(ctx, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerGet", reflect.TypeOf((*MockInterface)(nil).WorkerGet), varargs...)
}

// WorkerList mocks base method.
func (m *MockInterface) WorkerList(ctx context.Context) ([]sdk.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerList", ctx)
	ret0, _ := ret[0].([]sdk.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerList indicates an expected call of WorkerList.
func (mr *MockInterfaceMockRecorder) WorkerList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerList", reflect.TypeOf((*MockInterface)(nil).WorkerList), ctx)
}

// WorkerModelAdd mocks base method.
func (m *MockInterface) WorkerModelAdd(name, modelType, patternName string, dockerModel *sdk.ModelDocker, vmModel *sdk.ModelVirtualMachine, groupID int64) (sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelAdd", name, modelType, patternName, dockerModel, vmModel, groupID)
	ret0, _ := ret[0].(sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelAdd indicates an expected call of WorkerModelAdd.
func (mr *MockInterfaceMockRecorder) WorkerModelAdd(name, modelType, patternName, dockerModel, vmModel, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelAdd", reflect.TypeOf((*MockInterface)(nil).WorkerModelAdd), name, modelType, patternName, dockerModel, vmModel, groupID)
}

// WorkerModelBook mocks base method.
func (m *MockInterface) WorkerModelBook(groupName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelBook", groupName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerModelBook indicates an expected call of WorkerModelBook.
func (mr *MockInterfaceMockRecorder) WorkerModelBook(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelBook", reflect.TypeOf((*MockInterface)(nil).WorkerModelBook), groupName, name)
}

// WorkerModelDelete mocks base method.
func (m *MockInterface) WorkerModelDelete(groupName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelDelete", groupName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerModelDelete indicates an expected call of WorkerModelDelete.
func (mr *MockInterfaceMockRecorder) WorkerModelDelete(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelDelete", reflect.TypeOf((*MockInterface)(nil).WorkerModelDelete), groupName, name)
}

// WorkerModelEnabledList mocks base method.
func (m *MockInterface) WorkerModelEnabledList() ([]sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelEnabledList")
	ret0, _ := ret[0].([]sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelEnabledList indicates an expected call of WorkerModelEnabledList.
func (mr *MockInterfaceMockRecorder) WorkerModelEnabledList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelEnabledList", reflect.TypeOf((*MockInterface)(nil).WorkerModelEnabledList))
}

// WorkerModelExport mocks base method.
func (m *MockInterface) WorkerModelExport(groupName, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupName, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkerModelExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelExport indicates an expected call of WorkerModelExport.
func (mr *MockInterfaceMockRecorder) WorkerModelExport(groupName, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupName, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelExport", reflect.TypeOf((*MockInterface)(nil).WorkerModelExport), varargs...)
}

// WorkerModelGet mocks base method.
func (m *MockInterface) WorkerModelGet(groupName, name string) (sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelGet", groupName, name)
	ret0, _ := ret[0].(sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelGet indicates an expected call of WorkerModelGet.
func (mr *MockInterfaceMockRecorder) WorkerModelGet(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelGet", reflect.TypeOf((*MockInterface)(nil).WorkerModelGet), groupName, name)
}

// WorkerModelImport mocks base method.
func (m *MockInterface) WorkerModelImport(content io.Reader, mods ...cdsclient.RequestModifier) (*sdk.Model, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkerModelImport", varargs...)
	ret0, _ := ret[0].(*sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelImport indicates an expected call of WorkerModelImport.
func (mr *MockInterfaceMockRecorder) WorkerModelImport(content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelImport", reflect.TypeOf((*MockInterface)(nil).WorkerModelImport), varargs...)
}

// WorkerModelList mocks base method.
func (m *MockInterface) WorkerModelList(arg0 *cdsclient.WorkerModelFilter) ([]sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelList", arg0)
	ret0, _ := ret[0].([]sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelList indicates an expected call of WorkerModelList.
func (mr *MockInterfaceMockRecorder) WorkerModelList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelList", reflect.TypeOf((*MockInterface)(nil).WorkerModelList), arg0)
}

// WorkerModelSecretList mocks base method.
func (m *MockInterface) WorkerModelSecretList(groupName, name string) (sdk.WorkerModelSecrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelSecretList", groupName, name)
	ret0, _ := ret[0].(sdk.WorkerModelSecrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelSecretList indicates an expected call of WorkerModelSecretList.
func (mr *MockInterfaceMockRecorder) WorkerModelSecretList(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelSecretList", reflect.TypeOf((*MockInterface)(nil).WorkerModelSecretList), groupName, name)
}

// WorkerModelSpawnError mocks base method.
func (m *MockInterface) WorkerModelSpawnError(groupName, name string, info sdk.SpawnErrorForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelSpawnError", groupName, name, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerModelSpawnError indicates an expected call of WorkerModelSpawnError.
func (mr *MockInterfaceMockRecorder) WorkerModelSpawnError(groupName, name, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelSpawnError", reflect.TypeOf((*MockInterface)(nil).WorkerModelSpawnError), groupName, name, info)
}

// WorkerModelv2List mocks base method.
func (m *MockInterface) WorkerModelv2List(ctx context.Context, projKey, vcsIdentifier, repoIdentifier string, filter *cdsclient.WorkerModelV2Filter) ([]sdk.V2WorkerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelv2List", ctx, projKey, vcsIdentifier, repoIdentifier, filter)
	ret0, _ := ret[0].([]sdk.V2WorkerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelv2List indicates an expected call of WorkerModelv2List.
func (mr *MockInterfaceMockRecorder) WorkerModelv2List(ctx, projKey, vcsIdentifier, repoIdentifier, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelv2List", reflect.TypeOf((*MockInterface)(nil).WorkerModelv2List), ctx, projKey, vcsIdentifier, repoIdentifier, filter)
}

// WorkerRefresh mocks base method.
func (m *MockInterface) WorkerRefresh(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerRefresh", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerRefresh indicates an expected call of WorkerRefresh.
func (mr *MockInterfaceMockRecorder) WorkerRefresh(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerRefresh", reflect.TypeOf((*MockInterface)(nil).WorkerRefresh), ctx)
}

// WorkerRegister mocks base method.
func (m *MockInterface) WorkerRegister(ctx context.Context, authToken string, form sdk.WorkerRegistrationForm) (*sdk.Worker, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerRegister", ctx, authToken, form)
	ret0, _ := ret[0].(*sdk.Worker)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WorkerRegister indicates an expected call of WorkerRegister.
func (mr *MockInterfaceMockRecorder) WorkerRegister(ctx, authToken, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerRegister", reflect.TypeOf((*MockInterface)(nil).WorkerRegister), ctx, authToken, form)
}

// WorkerSetStatus mocks base method.
func (m *MockInterface) WorkerSetStatus(ctx context.Context, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerSetStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerSetStatus indicates an expected call of WorkerSetStatus.
func (mr *MockInterfaceMockRecorder) WorkerSetStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerSetStatus", reflect.TypeOf((*MockInterface)(nil).WorkerSetStatus), ctx, status)
}

// WorkerUnregister mocks base method.
func (m *MockInterface) WorkerUnregister(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerUnregister", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerUnregister indicates an expected call of WorkerUnregister.
func (mr *MockInterfaceMockRecorder) WorkerUnregister(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerUnregister", reflect.TypeOf((*MockInterface)(nil).WorkerUnregister), ctx)
}

// WorkflowAccess mocks base method.
func (m *MockInterface) WorkflowAccess(ctx context.Context, projectKey string, workflowID int64, sessionID string, itemType sdk.CDNItemType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAccess", ctx, projectKey, workflowID, sessionID, itemType)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowAccess indicates an expected call of WorkflowAccess.
func (mr *MockInterfaceMockRecorder) WorkflowAccess(ctx, projectKey, workflowID, sessionID, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAccess", reflect.TypeOf((*MockInterface)(nil).WorkflowAccess), ctx, projectKey, workflowID, sessionID, itemType)
}

// WorkflowAllHooksExecutions mocks base method.
func (m *MockInterface) WorkflowAllHooksExecutions() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAllHooksExecutions")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAllHooksExecutions indicates an expected call of WorkflowAllHooksExecutions.
func (mr *MockInterfaceMockRecorder) WorkflowAllHooksExecutions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAllHooksExecutions", reflect.TypeOf((*MockInterface)(nil).WorkflowAllHooksExecutions))
}

// WorkflowAllHooksList mocks base method.
func (m *MockInterface) WorkflowAllHooksList() ([]sdk.NodeHook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAllHooksList")
	ret0, _ := ret[0].([]sdk.NodeHook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAllHooksList indicates an expected call of WorkflowAllHooksList.
func (mr *MockInterfaceMockRecorder) WorkflowAllHooksList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAllHooksList", reflect.TypeOf((*MockInterface)(nil).WorkflowAllHooksList))
}

// WorkflowAsCodeInfo mocks base method.
func (m *MockInterface) WorkflowAsCodeInfo(projectKey, operationID string) (*sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsCodeInfo", projectKey, operationID)
	ret0, _ := ret[0].(*sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsCodeInfo indicates an expected call of WorkflowAsCodeInfo.
func (mr *MockInterfaceMockRecorder) WorkflowAsCodeInfo(projectKey, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsCodeInfo", reflect.TypeOf((*MockInterface)(nil).WorkflowAsCodeInfo), projectKey, operationID)
}

// WorkflowAsCodePerform mocks base method.
func (m *MockInterface) WorkflowAsCodePerform(projectKey, operationID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsCodePerform", projectKey, operationID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsCodePerform indicates an expected call of WorkflowAsCodePerform.
func (mr *MockInterfaceMockRecorder) WorkflowAsCodePerform(projectKey, operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsCodePerform", reflect.TypeOf((*MockInterface)(nil).WorkflowAsCodePerform), projectKey, operationID)
}

// WorkflowAsCodeStart mocks base method.
func (m *MockInterface) WorkflowAsCodeStart(projectKey, repoURL string, repoStrategy sdk.RepositoryStrategy) (*sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsCodeStart", projectKey, repoURL, repoStrategy)
	ret0, _ := ret[0].(*sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsCodeStart indicates an expected call of WorkflowAsCodeStart.
func (mr *MockInterfaceMockRecorder) WorkflowAsCodeStart(projectKey, repoURL, repoStrategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsCodeStart", reflect.TypeOf((*MockInterface)(nil).WorkflowAsCodeStart), projectKey, repoURL, repoStrategy)
}

// WorkflowDelete mocks base method.
func (m *MockInterface) WorkflowDelete(projectKey, workflowName string, opts ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, workflowName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowDelete indicates an expected call of WorkflowDelete.
func (mr *MockInterfaceMockRecorder) WorkflowDelete(projectKey, workflowName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, workflowName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowDelete", reflect.TypeOf((*MockInterface)(nil).WorkflowDelete), varargs...)
}

// WorkflowExport mocks base method.
func (m *MockInterface) WorkflowExport(projectKey, name string, mods ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowExport", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowExport indicates an expected call of WorkflowExport.
func (mr *MockInterfaceMockRecorder) WorkflowExport(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowExport", reflect.TypeOf((*MockInterface)(nil).WorkflowExport), varargs...)
}

// WorkflowGet mocks base method.
func (m *MockInterface) WorkflowGet(projectKey, name string, opts ...cdsclient.RequestModifier) (*sdk.Workflow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowGet", varargs...)
	ret0, _ := ret[0].(*sdk.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowGet indicates an expected call of WorkflowGet.
func (mr *MockInterfaceMockRecorder) WorkflowGet(projectKey, name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowGet", reflect.TypeOf((*MockInterface)(nil).WorkflowGet), varargs...)
}

// WorkflowGroupAdd mocks base method.
func (m *MockInterface) WorkflowGroupAdd(projectKey, name, groupName string, permission int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowGroupAdd", projectKey, name, groupName, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowGroupAdd indicates an expected call of WorkflowGroupAdd.
func (mr *MockInterfaceMockRecorder) WorkflowGroupAdd(projectKey, name, groupName, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowGroupAdd", reflect.TypeOf((*MockInterface)(nil).WorkflowGroupAdd), projectKey, name, groupName, permission)
}

// WorkflowGroupDelete mocks base method.
func (m *MockInterface) WorkflowGroupDelete(projectKey, name, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowGroupDelete", projectKey, name, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowGroupDelete indicates an expected call of WorkflowGroupDelete.
func (mr *MockInterfaceMockRecorder) WorkflowGroupDelete(projectKey, name, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowGroupDelete", reflect.TypeOf((*MockInterface)(nil).WorkflowGroupDelete), projectKey, name, groupName)
}

// WorkflowImport mocks base method.
func (m *MockInterface) WorkflowImport(projectKey string, content io.Reader, mods ...cdsclient.RequestModifier) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, content}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowImport", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowImport indicates an expected call of WorkflowImport.
func (mr *MockInterfaceMockRecorder) WorkflowImport(projectKey, content interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, content}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowImport", reflect.TypeOf((*MockInterface)(nil).WorkflowImport), varargs...)
}

// WorkflowLabelAdd mocks base method.
func (m *MockInterface) WorkflowLabelAdd(projectKey, name, labelName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowLabelAdd", projectKey, name, labelName)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowLabelAdd indicates an expected call of WorkflowLabelAdd.
func (mr *MockInterfaceMockRecorder) WorkflowLabelAdd(projectKey, name, labelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowLabelAdd", reflect.TypeOf((*MockInterface)(nil).WorkflowLabelAdd), projectKey, name, labelName)
}

// WorkflowLabelDelete mocks base method.
func (m *MockInterface) WorkflowLabelDelete(projectKey, name string, labelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowLabelDelete", projectKey, name, labelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowLabelDelete indicates an expected call of WorkflowLabelDelete.
func (mr *MockInterfaceMockRecorder) WorkflowLabelDelete(projectKey, name, labelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowLabelDelete", reflect.TypeOf((*MockInterface)(nil).WorkflowLabelDelete), projectKey, name, labelID)
}

// WorkflowList mocks base method.
func (m *MockInterface) WorkflowList(projectKey string, opts ...cdsclient.RequestModifier) ([]sdk.Workflow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowList", varargs...)
	ret0, _ := ret[0].([]sdk.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowList indicates an expected call of WorkflowList.
func (mr *MockInterfaceMockRecorder) WorkflowList(projectKey interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowList", reflect.TypeOf((*MockInterface)(nil).WorkflowList), varargs...)
}

// WorkflowLogDownload mocks base method.
func (m *MockInterface) WorkflowLogDownload(ctx context.Context, link sdk.CDNLogLink) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowLogDownload", ctx, link)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowLogDownload indicates an expected call of WorkflowLogDownload.
func (mr *MockInterfaceMockRecorder) WorkflowLogDownload(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowLogDownload", reflect.TypeOf((*MockInterface)(nil).WorkflowLogDownload), ctx, link)
}

// WorkflowNodeRun mocks base method.
func (m *MockInterface) WorkflowNodeRun(projectKey, name string, number, nodeRunID int64) (*sdk.WorkflowNodeRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRun", projectKey, name, number, nodeRunID)
	ret0, _ := ret[0].(*sdk.WorkflowNodeRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeRun indicates an expected call of WorkflowNodeRun.
func (mr *MockInterfaceMockRecorder) WorkflowNodeRun(projectKey, name, number, nodeRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRun", reflect.TypeOf((*MockInterface)(nil).WorkflowNodeRun), projectKey, name, number, nodeRunID)
}

// WorkflowNodeRunJobServiceLink mocks base method.
func (m *MockInterface) WorkflowNodeRunJobServiceLink(ctx context.Context, projectKey, workflowName string, nodeRunID, job int64, serviceName string) (*sdk.CDNLogLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRunJobServiceLink", ctx, projectKey, workflowName, nodeRunID, job, serviceName)
	ret0, _ := ret[0].(*sdk.CDNLogLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeRunJobServiceLink indicates an expected call of WorkflowNodeRunJobServiceLink.
func (mr *MockInterfaceMockRecorder) WorkflowNodeRunJobServiceLink(ctx, projectKey, workflowName, nodeRunID, job, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRunJobServiceLink", reflect.TypeOf((*MockInterface)(nil).WorkflowNodeRunJobServiceLink), ctx, projectKey, workflowName, nodeRunID, job, serviceName)
}

// WorkflowNodeRunJobStepLink mocks base method.
func (m *MockInterface) WorkflowNodeRunJobStepLink(ctx context.Context, projectKey, workflowName string, nodeRunID, job, step int64) (*sdk.CDNLogLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRunJobStepLink", ctx, projectKey, workflowName, nodeRunID, job, step)
	ret0, _ := ret[0].(*sdk.CDNLogLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeRunJobStepLink indicates an expected call of WorkflowNodeRunJobStepLink.
func (mr *MockInterfaceMockRecorder) WorkflowNodeRunJobStepLink(ctx, projectKey, workflowName, nodeRunID, job, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRunJobStepLink", reflect.TypeOf((*MockInterface)(nil).WorkflowNodeRunJobStepLink), ctx, projectKey, workflowName, nodeRunID, job, step)
}

// WorkflowNodeRunJobStepLinks mocks base method.
func (m *MockInterface) WorkflowNodeRunJobStepLinks(ctx context.Context, projectKey, workflowName string, nodeRunID, job int64) (*sdk.CDNLogLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRunJobStepLinks", ctx, projectKey, workflowName, nodeRunID, job)
	ret0, _ := ret[0].(*sdk.CDNLogLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeRunJobStepLinks indicates an expected call of WorkflowNodeRunJobStepLinks.
func (mr *MockInterfaceMockRecorder) WorkflowNodeRunJobStepLinks(ctx, projectKey, workflowName, nodeRunID, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRunJobStepLinks", reflect.TypeOf((*MockInterface)(nil).WorkflowNodeRunJobStepLinks), ctx, projectKey, workflowName, nodeRunID, job)
}

// WorkflowNodeRunRelease mocks base method.
func (m *MockInterface) WorkflowNodeRunRelease(projectKey, workflowName string, runNumber, nodeRunID int64, release sdk.WorkflowNodeRunRelease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRunRelease", projectKey, workflowName, runNumber, nodeRunID, release)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowNodeRunRelease indicates an expected call of WorkflowNodeRunRelease.
func (mr *MockInterfaceMockRecorder) WorkflowNodeRunRelease(projectKey, workflowName, runNumber, nodeRunID, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRunRelease", reflect.TypeOf((*MockInterface)(nil).WorkflowNodeRunRelease), projectKey, workflowName, runNumber, nodeRunID, release)
}

// WorkflowNodeStop mocks base method.
func (m *MockInterface) WorkflowNodeStop(projectKey, workflowName string, number, fromNodeID int64) (*sdk.WorkflowNodeRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeStop", projectKey, workflowName, number, fromNodeID)
	ret0, _ := ret[0].(*sdk.WorkflowNodeRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowNodeStop indicates an expected call of WorkflowNodeStop.
func (mr *MockInterfaceMockRecorder) WorkflowNodeStop(projectKey, workflowName, number, fromNodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeStop", reflect.TypeOf((*MockInterface)(nil).WorkflowNodeStop), projectKey, workflowName, number, fromNodeID)
}

// WorkflowPull mocks base method.
func (m *MockInterface) WorkflowPull(projectKey, name string, mods ...cdsclient.RequestModifier) (*tar.Reader, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowPull", varargs...)
	ret0, _ := ret[0].(*tar.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowPull indicates an expected call of WorkflowPull.
func (mr *MockInterfaceMockRecorder) WorkflowPull(projectKey, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowPull", reflect.TypeOf((*MockInterface)(nil).WorkflowPull), varargs...)
}

// WorkflowPush mocks base method.
func (m *MockInterface) WorkflowPush(projectKey string, tarContent io.Reader, mods ...cdsclient.RequestModifier) ([]string, *tar.Reader, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, tarContent}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowPush", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*tar.Reader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WorkflowPush indicates an expected call of WorkflowPush.
func (mr *MockInterfaceMockRecorder) WorkflowPush(projectKey, tarContent interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, tarContent}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowPush", reflect.TypeOf((*MockInterface)(nil).WorkflowPush), varargs...)
}

// WorkflowRunArtifactsLinks mocks base method.
func (m *MockInterface) WorkflowRunArtifactsLinks(projectKey, name string, number int64) (sdk.CDNItemLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunArtifactsLinks", projectKey, name, number)
	ret0, _ := ret[0].(sdk.CDNItemLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunArtifactsLinks indicates an expected call of WorkflowRunArtifactsLinks.
func (mr *MockInterfaceMockRecorder) WorkflowRunArtifactsLinks(projectKey, name, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunArtifactsLinks", reflect.TypeOf((*MockInterface)(nil).WorkflowRunArtifactsLinks), projectKey, name, number)
}

// WorkflowRunDelete mocks base method.
func (m *MockInterface) WorkflowRunDelete(projectKey, workflowName string, runNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunDelete", projectKey, workflowName, runNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowRunDelete indicates an expected call of WorkflowRunDelete.
func (mr *MockInterfaceMockRecorder) WorkflowRunDelete(projectKey, workflowName, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunDelete", reflect.TypeOf((*MockInterface)(nil).WorkflowRunDelete), projectKey, workflowName, runNumber)
}

// WorkflowRunFromHook mocks base method.
func (m *MockInterface) WorkflowRunFromHook(projectKey, workflowName string, hook sdk.WorkflowNodeRunHookEvent) (*sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunFromHook", projectKey, workflowName, hook)
	ret0, _ := ret[0].(*sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunFromHook indicates an expected call of WorkflowRunFromHook.
func (mr *MockInterfaceMockRecorder) WorkflowRunFromHook(projectKey, workflowName, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunFromHook", reflect.TypeOf((*MockInterface)(nil).WorkflowRunFromHook), projectKey, workflowName, hook)
}

// WorkflowRunFromManual mocks base method.
func (m *MockInterface) WorkflowRunFromManual(projectKey, workflowName string, manual sdk.WorkflowNodeRunManual, number, fromNodeID int64) (*sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunFromManual", projectKey, workflowName, manual, number, fromNodeID)
	ret0, _ := ret[0].(*sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunFromManual indicates an expected call of WorkflowRunFromManual.
func (mr *MockInterfaceMockRecorder) WorkflowRunFromManual(projectKey, workflowName, manual, number, fromNodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunFromManual", reflect.TypeOf((*MockInterface)(nil).WorkflowRunFromManual), projectKey, workflowName, manual, number, fromNodeID)
}

// WorkflowRunGet mocks base method.
func (m *MockInterface) WorkflowRunGet(projectKey, workflowName string, number int64) (*sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunGet", projectKey, workflowName, number)
	ret0, _ := ret[0].(*sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunGet indicates an expected call of WorkflowRunGet.
func (mr *MockInterfaceMockRecorder) WorkflowRunGet(projectKey, workflowName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunGet", reflect.TypeOf((*MockInterface)(nil).WorkflowRunGet), projectKey, workflowName, number)
}

// WorkflowRunList mocks base method.
func (m *MockInterface) WorkflowRunList(projectKey, workflowName string, offset, limit int64) ([]sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunList", projectKey, workflowName, offset, limit)
	ret0, _ := ret[0].([]sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunList indicates an expected call of WorkflowRunList.
func (mr *MockInterfaceMockRecorder) WorkflowRunList(projectKey, workflowName, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunList", reflect.TypeOf((*MockInterface)(nil).WorkflowRunList), projectKey, workflowName, offset, limit)
}

// WorkflowRunNumberGet mocks base method.
func (m *MockInterface) WorkflowRunNumberGet(projectKey, workflowName string) (*sdk.WorkflowRunNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunNumberGet", projectKey, workflowName)
	ret0, _ := ret[0].(*sdk.WorkflowRunNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunNumberGet indicates an expected call of WorkflowRunNumberGet.
func (mr *MockInterfaceMockRecorder) WorkflowRunNumberGet(projectKey, workflowName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunNumberGet", reflect.TypeOf((*MockInterface)(nil).WorkflowRunNumberGet), projectKey, workflowName)
}

// WorkflowRunNumberSet mocks base method.
func (m *MockInterface) WorkflowRunNumberSet(projectKey, workflowName string, number int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunNumberSet", projectKey, workflowName, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowRunNumberSet indicates an expected call of WorkflowRunNumberSet.
func (mr *MockInterfaceMockRecorder) WorkflowRunNumberSet(projectKey, workflowName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunNumberSet", reflect.TypeOf((*MockInterface)(nil).WorkflowRunNumberSet), projectKey, workflowName, number)
}

// WorkflowRunResultsList mocks base method.
func (m *MockInterface) WorkflowRunResultsList(ctx context.Context, projectKey, name string, number int64) ([]sdk.WorkflowRunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunResultsList", ctx, projectKey, name, number)
	ret0, _ := ret[0].([]sdk.WorkflowRunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunResultsList indicates an expected call of WorkflowRunResultsList.
func (mr *MockInterfaceMockRecorder) WorkflowRunResultsList(ctx, projectKey, name, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunResultsList", reflect.TypeOf((*MockInterface)(nil).WorkflowRunResultsList), ctx, projectKey, name, number)
}

// WorkflowRunSearch mocks base method.
func (m *MockInterface) WorkflowRunSearch(projectKey string, offset, limit int64, filter ...cdsclient.Filter) ([]sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, offset, limit}
	for _, a := range filter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowRunSearch", varargs...)
	ret0, _ := ret[0].([]sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunSearch indicates an expected call of WorkflowRunSearch.
func (mr *MockInterfaceMockRecorder) WorkflowRunSearch(projectKey, offset, limit interface{}, filter ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, offset, limit}, filter...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunSearch", reflect.TypeOf((*MockInterface)(nil).WorkflowRunSearch), varargs...)
}

// WorkflowRunsDeleteByBranch mocks base method.
func (m *MockInterface) WorkflowRunsDeleteByBranch(projectKey, workflowName, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunsDeleteByBranch", projectKey, workflowName, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowRunsDeleteByBranch indicates an expected call of WorkflowRunsDeleteByBranch.
func (mr *MockInterfaceMockRecorder) WorkflowRunsDeleteByBranch(projectKey, workflowName, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunsDeleteByBranch", reflect.TypeOf((*MockInterface)(nil).WorkflowRunsDeleteByBranch), projectKey, workflowName, branch)
}

// WorkflowSearch mocks base method.
func (m *MockInterface) WorkflowSearch(opts ...cdsclient.RequestModifier) ([]sdk.Workflow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowSearch", varargs...)
	ret0, _ := ret[0].([]sdk.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowSearch indicates an expected call of WorkflowSearch.
func (mr *MockInterfaceMockRecorder) WorkflowSearch(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowSearch", reflect.TypeOf((*MockInterface)(nil).WorkflowSearch), opts...)
}

// WorkflowStop mocks base method.
func (m *MockInterface) WorkflowStop(projectKey, workflowName string, number int64) (*sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowStop", projectKey, workflowName, number)
	ret0, _ := ret[0].(*sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowStop indicates an expected call of WorkflowStop.
func (mr *MockInterfaceMockRecorder) WorkflowStop(projectKey, workflowName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowStop", reflect.TypeOf((*MockInterface)(nil).WorkflowStop), projectKey, workflowName, number)
}

// WorkflowTransformAsCode mocks base method.
func (m *MockInterface) WorkflowTransformAsCode(projectKey, workflowName, branch, message string) (*sdk.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowTransformAsCode", projectKey, workflowName, branch, message)
	ret0, _ := ret[0].(*sdk.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowTransformAsCode indicates an expected call of WorkflowTransformAsCode.
func (mr *MockInterfaceMockRecorder) WorkflowTransformAsCode(projectKey, workflowName, branch, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowTransformAsCode", reflect.TypeOf((*MockInterface)(nil).WorkflowTransformAsCode), projectKey, workflowName, branch, message)
}

// WorkflowUpdate mocks base method.
func (m *MockInterface) WorkflowUpdate(projectKey, name string, wf *sdk.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowUpdate", projectKey, name, wf)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowUpdate indicates an expected call of WorkflowUpdate.
func (mr *MockInterfaceMockRecorder) WorkflowUpdate(projectKey, name, wf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowUpdate", reflect.TypeOf((*MockInterface)(nil).WorkflowUpdate), projectKey, name, wf)
}

// WorkflowV2Run mocks base method.
func (m *MockInterface) WorkflowV2Run(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, payload map[string]interface{}, mods ...cdsclient.RequestModifier) (*sdk.V2WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, payload}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV2Run", varargs...)
	ret0, _ := ret[0].(*sdk.V2WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2Run indicates an expected call of WorkflowV2Run.
func (mr *MockInterfaceMockRecorder) WorkflowV2Run(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, payload interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, payload}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2Run", reflect.TypeOf((*MockInterface)(nil).WorkflowV2Run), varargs...)
}

// WorkflowV2RunFromHook mocks base method.
func (m *MockInterface) WorkflowV2RunFromHook(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, runRequest sdk.V2WorkflowRunHookRequest, mods ...cdsclient.RequestModifier) (*sdk.V2WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runRequest}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV2RunFromHook", varargs...)
	ret0, _ := ret[0].(*sdk.V2WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunFromHook indicates an expected call of WorkflowV2RunFromHook.
func (mr *MockInterfaceMockRecorder) WorkflowV2RunFromHook(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runRequest interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runRequest}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunFromHook", reflect.TypeOf((*MockInterface)(nil).WorkflowV2RunFromHook), varargs...)
}

// WorkflowV2RunInfoList mocks base method.
func (m *MockInterface) WorkflowV2RunInfoList(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, runNumber int64, mods ...cdsclient.RequestModifier) ([]sdk.V2WorkflowRunInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV2RunInfoList", varargs...)
	ret0, _ := ret[0].([]sdk.V2WorkflowRunInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunInfoList indicates an expected call of WorkflowV2RunInfoList.
func (mr *MockInterfaceMockRecorder) WorkflowV2RunInfoList(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunInfoList", reflect.TypeOf((*MockInterface)(nil).WorkflowV2RunInfoList), varargs...)
}

// WorkflowV2RunJob mocks base method.
func (m *MockInterface) WorkflowV2RunJob(ctx context.Context, projKey, vcsId, repoId, wkfName, jobIdentifier string, runNumber int64) (*sdk.V2WorkflowRunJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2RunJob", ctx, projKey, vcsId, repoId, wkfName, jobIdentifier, runNumber)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunJob indicates an expected call of WorkflowV2RunJob.
func (mr *MockInterfaceMockRecorder) WorkflowV2RunJob(ctx, projKey, vcsId, repoId, wkfName, jobIdentifier, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunJob", reflect.TypeOf((*MockInterface)(nil).WorkflowV2RunJob), ctx, projKey, vcsId, repoId, wkfName, jobIdentifier, runNumber)
}

// WorkflowV2RunJobLogLinks mocks base method.
func (m *MockInterface) WorkflowV2RunJobLogLinks(ctx context.Context, projKey, vcsId, repoId, wkfName string, runNumber int64, jobName string) (sdk.CDNLogLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2RunJobLogLinks", ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName)
	ret0, _ := ret[0].(sdk.CDNLogLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunJobLogLinks indicates an expected call of WorkflowV2RunJobLogLinks.
func (mr *MockInterfaceMockRecorder) WorkflowV2RunJobLogLinks(ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunJobLogLinks", reflect.TypeOf((*MockInterface)(nil).WorkflowV2RunJobLogLinks), ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName)
}

// WorkflowV2RunJobs mocks base method.
func (m *MockInterface) WorkflowV2RunJobs(ctx context.Context, projKey, vcsId, repoId, wkfName string, runNumber int64) ([]sdk.V2WorkflowRunJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2RunJobs", ctx, projKey, vcsId, repoId, wkfName, runNumber)
	ret0, _ := ret[0].([]sdk.V2WorkflowRunJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunJobs indicates an expected call of WorkflowV2RunJobs.
func (mr *MockInterfaceMockRecorder) WorkflowV2RunJobs(ctx, projKey, vcsId, repoId, wkfName, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunJobs", reflect.TypeOf((*MockInterface)(nil).WorkflowV2RunJobs), ctx, projKey, vcsId, repoId, wkfName, runNumber)
}

// WorkflowV2RunList mocks base method.
func (m *MockInterface) WorkflowV2RunList(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, mods ...cdsclient.RequestModifier) ([]sdk.V2WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV2RunList", varargs...)
	ret0, _ := ret[0].([]sdk.V2WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunList indicates an expected call of WorkflowV2RunList.
func (mr *MockInterfaceMockRecorder) WorkflowV2RunList(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunList", reflect.TypeOf((*MockInterface)(nil).WorkflowV2RunList), varargs...)
}

// WorkflowV2RunStatus mocks base method.
func (m *MockInterface) WorkflowV2RunStatus(ctx context.Context, projectKey, vcsIdentifier, repoIdentifier, wkfName string, runNumber int64) (*sdk.V2WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2RunStatus", ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber)
	ret0, _ := ret[0].(*sdk.V2WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV2RunStatus indicates an expected call of WorkflowV2RunStatus.
func (mr *MockInterfaceMockRecorder) WorkflowV2RunStatus(ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2RunStatus", reflect.TypeOf((*MockInterface)(nil).WorkflowV2RunStatus), ctx, projectKey, vcsIdentifier, repoIdentifier, wkfName, runNumber)
}

// WorkflowV2Stop mocks base method.
func (m *MockInterface) WorkflowV2Stop(ctx context.Context, projKey, vcsId, repoId, wkfName string, runNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2Stop", ctx, projKey, vcsId, repoId, wkfName, runNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowV2Stop indicates an expected call of WorkflowV2Stop.
func (mr *MockInterfaceMockRecorder) WorkflowV2Stop(ctx, projKey, vcsId, repoId, wkfName, runNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2Stop", reflect.TypeOf((*MockInterface)(nil).WorkflowV2Stop), ctx, projKey, vcsId, repoId, wkfName, runNumber)
}

// WorkflowV2StopJob mocks base method.
func (m *MockInterface) WorkflowV2StopJob(ctx context.Context, projKey, vcsId, repoId, wkfName string, runNumber int64, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowV2StopJob", ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowV2StopJob indicates an expected call of WorkflowV2StopJob.
func (mr *MockInterfaceMockRecorder) WorkflowV2StopJob(ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV2StopJob", reflect.TypeOf((*MockInterface)(nil).WorkflowV2StopJob), ctx, projKey, vcsId, repoId, wkfName, runNumber, jobName)
}

// WorkflowV3Get mocks base method.
func (m *MockInterface) WorkflowV3Get(projectKey, workflowName string, opts ...cdsclient.RequestModifier) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey, workflowName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkflowV3Get", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowV3Get indicates an expected call of WorkflowV3Get.
func (mr *MockInterfaceMockRecorder) WorkflowV3Get(projectKey, workflowName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey, workflowName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowV3Get", reflect.TypeOf((*MockInterface)(nil).WorkflowV3Get), varargs...)
}

// MockV2WorkerInterface is a mock of V2WorkerInterface interface.
type MockV2WorkerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockV2WorkerInterfaceMockRecorder
}

// MockV2WorkerInterfaceMockRecorder is the mock recorder for MockV2WorkerInterface.
type MockV2WorkerInterfaceMockRecorder struct {
	mock *MockV2WorkerInterface
}

// NewMockV2WorkerInterface creates a new mock instance.
func NewMockV2WorkerInterface(ctrl *gomock.Controller) *MockV2WorkerInterface {
	mock := &MockV2WorkerInterface{ctrl: ctrl}
	mock.recorder = &MockV2WorkerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockV2WorkerInterface) EXPECT() *MockV2WorkerInterfaceMockRecorder {
	return m.recorder
}

// PluginAdd mocks base method.
func (m *MockV2WorkerInterface) PluginAdd(arg0 *sdk.GRPCPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginAdd", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginAdd indicates an expected call of PluginAdd.
func (mr *MockV2WorkerInterfaceMockRecorder) PluginAdd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginAdd", reflect.TypeOf((*MockV2WorkerInterface)(nil).PluginAdd), arg0)
}

// PluginAddBinary mocks base method.
func (m *MockV2WorkerInterface) PluginAddBinary(arg0 *sdk.GRPCPlugin, arg1 *sdk.GRPCPluginBinary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginAddBinary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginAddBinary indicates an expected call of PluginAddBinary.
func (mr *MockV2WorkerInterfaceMockRecorder) PluginAddBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginAddBinary", reflect.TypeOf((*MockV2WorkerInterface)(nil).PluginAddBinary), arg0, arg1)
}

// PluginDelete mocks base method.
func (m *MockV2WorkerInterface) PluginDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginDelete indicates an expected call of PluginDelete.
func (mr *MockV2WorkerInterfaceMockRecorder) PluginDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginDelete", reflect.TypeOf((*MockV2WorkerInterface)(nil).PluginDelete), arg0)
}

// PluginDeleteBinary mocks base method.
func (m *MockV2WorkerInterface) PluginDeleteBinary(name, os, arch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginDeleteBinary", name, os, arch)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginDeleteBinary indicates an expected call of PluginDeleteBinary.
func (mr *MockV2WorkerInterfaceMockRecorder) PluginDeleteBinary(name, os, arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginDeleteBinary", reflect.TypeOf((*MockV2WorkerInterface)(nil).PluginDeleteBinary), name, os, arch)
}

// PluginGetBinary mocks base method.
func (m *MockV2WorkerInterface) PluginGetBinary(name, os, arch string, w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGetBinary", name, os, arch, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginGetBinary indicates an expected call of PluginGetBinary.
func (mr *MockV2WorkerInterfaceMockRecorder) PluginGetBinary(name, os, arch, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGetBinary", reflect.TypeOf((*MockV2WorkerInterface)(nil).PluginGetBinary), name, os, arch, w)
}

// PluginGetBinaryInfos mocks base method.
func (m *MockV2WorkerInterface) PluginGetBinaryInfos(name, os, arch string) (*sdk.GRPCPluginBinary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGetBinaryInfos", name, os, arch)
	ret0, _ := ret[0].(*sdk.GRPCPluginBinary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginGetBinaryInfos indicates an expected call of PluginGetBinaryInfos.
func (mr *MockV2WorkerInterfaceMockRecorder) PluginGetBinaryInfos(name, os, arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGetBinaryInfos", reflect.TypeOf((*MockV2WorkerInterface)(nil).PluginGetBinaryInfos), name, os, arch)
}

// PluginUpdate mocks base method.
func (m *MockV2WorkerInterface) PluginUpdate(arg0 *sdk.GRPCPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginUpdate indicates an expected call of PluginUpdate.
func (mr *MockV2WorkerInterfaceMockRecorder) PluginUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginUpdate", reflect.TypeOf((*MockV2WorkerInterface)(nil).PluginUpdate), arg0)
}

// PluginsGet mocks base method.
func (m *MockV2WorkerInterface) PluginsGet(arg0 string) (*sdk.GRPCPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginsGet", arg0)
	ret0, _ := ret[0].(*sdk.GRPCPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginsGet indicates an expected call of PluginsGet.
func (mr *MockV2WorkerInterfaceMockRecorder) PluginsGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginsGet", reflect.TypeOf((*MockV2WorkerInterface)(nil).PluginsGet), arg0)
}

// PluginsList mocks base method.
func (m *MockV2WorkerInterface) PluginsList() ([]sdk.GRPCPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginsList")
	ret0, _ := ret[0].([]sdk.GRPCPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginsList indicates an expected call of PluginsList.
func (mr *MockV2WorkerInterfaceMockRecorder) PluginsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginsList", reflect.TypeOf((*MockV2WorkerInterface)(nil).PluginsList))
}

// V2QueueGetJobRun mocks base method.
func (m *MockV2WorkerInterface) V2QueueGetJobRun(ctx context.Context, regionName, id string) (*sdk.V2WorkflowRunJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueGetJobRun", ctx, regionName, id)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueGetJobRun indicates an expected call of V2QueueGetJobRun.
func (mr *MockV2WorkerInterfaceMockRecorder) V2QueueGetJobRun(ctx, regionName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueGetJobRun", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2QueueGetJobRun), ctx, regionName, id)
}

// V2QueueJobResult mocks base method.
func (m *MockV2WorkerInterface) V2QueueJobResult(ctx context.Context, region, jobRunID string, result sdk.V2WorkflowRunJobResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobResult", ctx, region, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobResult indicates an expected call of V2QueueJobResult.
func (mr *MockV2WorkerInterfaceMockRecorder) V2QueueJobResult(ctx, region, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobResult", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2QueueJobResult), ctx, region, jobRunID, result)
}

// V2QueueJobRunResultCreate mocks base method.
func (m *MockV2WorkerInterface) V2QueueJobRunResultCreate(ctx context.Context, regionName, jobRunID string, result *sdk.V2WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultCreate", ctx, regionName, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobRunResultCreate indicates an expected call of V2QueueJobRunResultCreate.
func (mr *MockV2WorkerInterfaceMockRecorder) V2QueueJobRunResultCreate(ctx, regionName, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultCreate", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2QueueJobRunResultCreate), ctx, regionName, jobRunID, result)
}

// V2QueueJobRunResultGet mocks base method.
func (m *MockV2WorkerInterface) V2QueueJobRunResultGet(ctx context.Context, regionName, jobRunID, runResultID string) (*sdk.V2WorkflowRunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultGet", ctx, regionName, jobRunID, runResultID)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueJobRunResultGet indicates an expected call of V2QueueJobRunResultGet.
func (mr *MockV2WorkerInterfaceMockRecorder) V2QueueJobRunResultGet(ctx, regionName, jobRunID, runResultID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultGet", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2QueueJobRunResultGet), ctx, regionName, jobRunID, runResultID)
}

// V2QueueJobRunResultUpdate mocks base method.
func (m *MockV2WorkerInterface) V2QueueJobRunResultUpdate(ctx context.Context, regionName, jobRunID string, result *sdk.V2WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobRunResultUpdate", ctx, regionName, jobRunID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobRunResultUpdate indicates an expected call of V2QueueJobRunResultUpdate.
func (mr *MockV2WorkerInterfaceMockRecorder) V2QueueJobRunResultUpdate(ctx, regionName, jobRunID, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobRunResultUpdate", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2QueueJobRunResultUpdate), ctx, regionName, jobRunID, result)
}

// V2QueueJobStepUpdate mocks base method.
func (m *MockV2WorkerInterface) V2QueueJobStepUpdate(ctx context.Context, regionName, id string, stepsStatus sdk.JobStepsStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueJobStepUpdate", ctx, regionName, id, stepsStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueueJobStepUpdate indicates an expected call of V2QueueJobStepUpdate.
func (mr *MockV2WorkerInterfaceMockRecorder) V2QueueJobStepUpdate(ctx, regionName, id, stepsStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueJobStepUpdate", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2QueueJobStepUpdate), ctx, regionName, id, stepsStatus)
}

// V2QueuePolling mocks base method.
func (m *MockV2WorkerInterface) V2QueuePolling(ctx context.Context, region string, goRoutines *sdk.GoRoutines, jobs chan<- sdk.V2WorkflowRunJob, errs chan<- error, delay time.Duration, ms ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, region, goRoutines, jobs, errs, delay}
	for _, a := range ms {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "V2QueuePolling", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueuePolling indicates an expected call of V2QueuePolling.
func (mr *MockV2WorkerInterfaceMockRecorder) V2QueuePolling(ctx, region, goRoutines, jobs, errs, delay interface{}, ms ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, region, goRoutines, jobs, errs, delay}, ms...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueuePolling", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2QueuePolling), varargs...)
}

// V2QueuePushJobInfo mocks base method.
func (m *MockV2WorkerInterface) V2QueuePushJobInfo(ctx context.Context, regionName, jobRunID string, msg sdk.V2SendJobRunInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueuePushJobInfo", ctx, regionName, jobRunID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2QueuePushJobInfo indicates an expected call of V2QueuePushJobInfo.
func (mr *MockV2WorkerInterfaceMockRecorder) V2QueuePushJobInfo(ctx, regionName, jobRunID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueuePushJobInfo", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2QueuePushJobInfo), ctx, regionName, jobRunID, msg)
}

// V2QueueWorkerTakeJob mocks base method.
func (m *MockV2WorkerInterface) V2QueueWorkerTakeJob(ctx context.Context, region, runJobID string) (*sdk.V2TakeJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2QueueWorkerTakeJob", ctx, region, runJobID)
	ret0, _ := ret[0].(*sdk.V2TakeJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2QueueWorkerTakeJob indicates an expected call of V2QueueWorkerTakeJob.
func (mr *MockV2WorkerInterfaceMockRecorder) V2QueueWorkerTakeJob(ctx, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2QueueWorkerTakeJob", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2QueueWorkerTakeJob), ctx, region, runJobID)
}

// V2WorkerRefresh mocks base method.
func (m *MockV2WorkerInterface) V2WorkerRefresh(ctx context.Context, region, runJobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2WorkerRefresh", ctx, region, runJobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2WorkerRefresh indicates an expected call of V2WorkerRefresh.
func (mr *MockV2WorkerInterfaceMockRecorder) V2WorkerRefresh(ctx, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerRefresh", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2WorkerRefresh), ctx, region, runJobID)
}

// V2WorkerRegister mocks base method.
func (m *MockV2WorkerInterface) V2WorkerRegister(ctx context.Context, authToken string, form sdk.WorkerRegistrationForm, region, runJobID string) (*sdk.V2Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2WorkerRegister", ctx, authToken, form, region, runJobID)
	ret0, _ := ret[0].(*sdk.V2Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2WorkerRegister indicates an expected call of V2WorkerRegister.
func (mr *MockV2WorkerInterfaceMockRecorder) V2WorkerRegister(ctx, authToken, form, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerRegister", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2WorkerRegister), ctx, authToken, form, region, runJobID)
}

// V2WorkerUnregister mocks base method.
func (m *MockV2WorkerInterface) V2WorkerUnregister(ctx context.Context, region, runJobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2WorkerUnregister", ctx, region, runJobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// V2WorkerUnregister indicates an expected call of V2WorkerUnregister.
func (mr *MockV2WorkerInterfaceMockRecorder) V2WorkerUnregister(ctx, region, runJobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerUnregister", reflect.TypeOf((*MockV2WorkerInterface)(nil).V2WorkerUnregister), ctx, region, runJobID)
}

// MockWorkerInterface is a mock of WorkerInterface interface.
type MockWorkerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerInterfaceMockRecorder
}

// MockWorkerInterfaceMockRecorder is the mock recorder for MockWorkerInterface.
type MockWorkerInterfaceMockRecorder struct {
	mock *MockWorkerInterface
}

// NewMockWorkerInterface creates a new mock instance.
func NewMockWorkerInterface(ctrl *gomock.Controller) *MockWorkerInterface {
	mock := &MockWorkerInterface{ctrl: ctrl}
	mock.recorder = &MockWorkerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerInterface) EXPECT() *MockWorkerInterfaceMockRecorder {
	return m.recorder
}

// CDNItemDownload mocks base method.
func (m *MockWorkerInterface) CDNItemDownload(ctx context.Context, cdnAddr, hash string, itemType sdk.CDNItemType, md5 string, writer io.WriteSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemDownload", ctx, cdnAddr, hash, itemType, md5, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CDNItemDownload indicates an expected call of CDNItemDownload.
func (mr *MockWorkerInterfaceMockRecorder) CDNItemDownload(ctx, cdnAddr, hash, itemType, md5, writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemDownload", reflect.TypeOf((*MockWorkerInterface)(nil).CDNItemDownload), ctx, cdnAddr, hash, itemType, md5, writer)
}

// CDNItemStream mocks base method.
func (m *MockWorkerInterface) CDNItemStream(ctx context.Context, cdnAddr, hash string, itemType sdk.CDNItemType) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemStream", ctx, cdnAddr, hash, itemType)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CDNItemStream indicates an expected call of CDNItemStream.
func (mr *MockWorkerInterfaceMockRecorder) CDNItemStream(ctx, cdnAddr, hash, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemStream", reflect.TypeOf((*MockWorkerInterface)(nil).CDNItemStream), ctx, cdnAddr, hash, itemType)
}

// CDNItemUpload mocks base method.
func (m *MockWorkerInterface) CDNItemUpload(ctx context.Context, cdnAddr, signature string, fs afero.Fs, path string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNItemUpload", ctx, cdnAddr, signature, fs, path)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CDNItemUpload indicates an expected call of CDNItemUpload.
func (mr *MockWorkerInterfaceMockRecorder) CDNItemUpload(ctx, cdnAddr, signature, fs, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNItemUpload", reflect.TypeOf((*MockWorkerInterface)(nil).CDNItemUpload), ctx, cdnAddr, signature, fs, path)
}

// PluginAdd mocks base method.
func (m *MockWorkerInterface) PluginAdd(arg0 *sdk.GRPCPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginAdd", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginAdd indicates an expected call of PluginAdd.
func (mr *MockWorkerInterfaceMockRecorder) PluginAdd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginAdd", reflect.TypeOf((*MockWorkerInterface)(nil).PluginAdd), arg0)
}

// PluginAddBinary mocks base method.
func (m *MockWorkerInterface) PluginAddBinary(arg0 *sdk.GRPCPlugin, arg1 *sdk.GRPCPluginBinary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginAddBinary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginAddBinary indicates an expected call of PluginAddBinary.
func (mr *MockWorkerInterfaceMockRecorder) PluginAddBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginAddBinary", reflect.TypeOf((*MockWorkerInterface)(nil).PluginAddBinary), arg0, arg1)
}

// PluginDelete mocks base method.
func (m *MockWorkerInterface) PluginDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginDelete indicates an expected call of PluginDelete.
func (mr *MockWorkerInterfaceMockRecorder) PluginDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginDelete", reflect.TypeOf((*MockWorkerInterface)(nil).PluginDelete), arg0)
}

// PluginDeleteBinary mocks base method.
func (m *MockWorkerInterface) PluginDeleteBinary(name, os, arch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginDeleteBinary", name, os, arch)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginDeleteBinary indicates an expected call of PluginDeleteBinary.
func (mr *MockWorkerInterfaceMockRecorder) PluginDeleteBinary(name, os, arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginDeleteBinary", reflect.TypeOf((*MockWorkerInterface)(nil).PluginDeleteBinary), name, os, arch)
}

// PluginGetBinary mocks base method.
func (m *MockWorkerInterface) PluginGetBinary(name, os, arch string, w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGetBinary", name, os, arch, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginGetBinary indicates an expected call of PluginGetBinary.
func (mr *MockWorkerInterfaceMockRecorder) PluginGetBinary(name, os, arch, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGetBinary", reflect.TypeOf((*MockWorkerInterface)(nil).PluginGetBinary), name, os, arch, w)
}

// PluginGetBinaryInfos mocks base method.
func (m *MockWorkerInterface) PluginGetBinaryInfos(name, os, arch string) (*sdk.GRPCPluginBinary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGetBinaryInfos", name, os, arch)
	ret0, _ := ret[0].(*sdk.GRPCPluginBinary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginGetBinaryInfos indicates an expected call of PluginGetBinaryInfos.
func (mr *MockWorkerInterfaceMockRecorder) PluginGetBinaryInfos(name, os, arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGetBinaryInfos", reflect.TypeOf((*MockWorkerInterface)(nil).PluginGetBinaryInfos), name, os, arch)
}

// PluginUpdate mocks base method.
func (m *MockWorkerInterface) PluginUpdate(arg0 *sdk.GRPCPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginUpdate indicates an expected call of PluginUpdate.
func (mr *MockWorkerInterfaceMockRecorder) PluginUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginUpdate", reflect.TypeOf((*MockWorkerInterface)(nil).PluginUpdate), arg0)
}

// PluginsGet mocks base method.
func (m *MockWorkerInterface) PluginsGet(arg0 string) (*sdk.GRPCPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginsGet", arg0)
	ret0, _ := ret[0].(*sdk.GRPCPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginsGet indicates an expected call of PluginsGet.
func (mr *MockWorkerInterfaceMockRecorder) PluginsGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginsGet", reflect.TypeOf((*MockWorkerInterface)(nil).PluginsGet), arg0)
}

// PluginsList mocks base method.
func (m *MockWorkerInterface) PluginsList() ([]sdk.GRPCPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginsList")
	ret0, _ := ret[0].([]sdk.GRPCPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginsList indicates an expected call of PluginsList.
func (mr *MockWorkerInterfaceMockRecorder) PluginsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginsList", reflect.TypeOf((*MockWorkerInterface)(nil).PluginsList))
}

// ProjectIntegrationGet mocks base method.
func (m *MockWorkerInterface) ProjectIntegrationGet(projectKey, integrationName string, clearPassword bool) (sdk.ProjectIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationGet", projectKey, integrationName, clearPassword)
	ret0, _ := ret[0].(sdk.ProjectIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationGet indicates an expected call of ProjectIntegrationGet.
func (mr *MockWorkerInterfaceMockRecorder) ProjectIntegrationGet(projectKey, integrationName, clearPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationGet", reflect.TypeOf((*MockWorkerInterface)(nil).ProjectIntegrationGet), projectKey, integrationName, clearPassword)
}

// ProjectIntegrationWorkerHookGet mocks base method.
func (m *MockWorkerInterface) ProjectIntegrationWorkerHookGet(projectKey, integrationName string) (*sdk.WorkerHookProjectIntegrationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIntegrationWorkerHookGet", projectKey, integrationName)
	ret0, _ := ret[0].(*sdk.WorkerHookProjectIntegrationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIntegrationWorkerHookGet indicates an expected call of ProjectIntegrationWorkerHookGet.
func (mr *MockWorkerInterfaceMockRecorder) ProjectIntegrationWorkerHookGet(projectKey, integrationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIntegrationWorkerHookGet", reflect.TypeOf((*MockWorkerInterface)(nil).ProjectIntegrationWorkerHookGet), projectKey, integrationName)
}

// QueueCountWorkflowNodeJobRun mocks base method.
func (m *MockWorkerInterface) QueueCountWorkflowNodeJobRun(since, until *time.Time, modelType string) (sdk.WorkflowNodeJobRunCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCountWorkflowNodeJobRun", since, until, modelType)
	ret0, _ := ret[0].(sdk.WorkflowNodeJobRunCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueCountWorkflowNodeJobRun indicates an expected call of QueueCountWorkflowNodeJobRun.
func (mr *MockWorkerInterfaceMockRecorder) QueueCountWorkflowNodeJobRun(since, until, modelType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCountWorkflowNodeJobRun", reflect.TypeOf((*MockWorkerInterface)(nil).QueueCountWorkflowNodeJobRun), since, until, modelType)
}

// QueueJobBook mocks base method.
func (m *MockWorkerInterface) QueueJobBook(ctx context.Context, id string) (sdk.WorkflowNodeJobRunBooked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobBook", ctx, id)
	ret0, _ := ret[0].(sdk.WorkflowNodeJobRunBooked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueJobBook indicates an expected call of QueueJobBook.
func (mr *MockWorkerInterfaceMockRecorder) QueueJobBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobBook", reflect.TypeOf((*MockWorkerInterface)(nil).QueueJobBook), ctx, id)
}

// QueueJobInfo mocks base method.
func (m *MockWorkerInterface) QueueJobInfo(ctx context.Context, id string) (*sdk.WorkflowNodeJobRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobInfo", ctx, id)
	ret0, _ := ret[0].(*sdk.WorkflowNodeJobRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueJobInfo indicates an expected call of QueueJobInfo.
func (mr *MockWorkerInterfaceMockRecorder) QueueJobInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobInfo", reflect.TypeOf((*MockWorkerInterface)(nil).QueueJobInfo), ctx, id)
}

// QueueJobRelease mocks base method.
func (m *MockWorkerInterface) QueueJobRelease(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobRelease", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobRelease indicates an expected call of QueueJobRelease.
func (mr *MockWorkerInterfaceMockRecorder) QueueJobRelease(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobRelease", reflect.TypeOf((*MockWorkerInterface)(nil).QueueJobRelease), ctx, id)
}

// QueueJobSendSpawnInfo mocks base method.
func (m *MockWorkerInterface) QueueJobSendSpawnInfo(ctx context.Context, id string, in []sdk.SpawnInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobSendSpawnInfo", ctx, id, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobSendSpawnInfo indicates an expected call of QueueJobSendSpawnInfo.
func (mr *MockWorkerInterfaceMockRecorder) QueueJobSendSpawnInfo(ctx, id, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobSendSpawnInfo", reflect.TypeOf((*MockWorkerInterface)(nil).QueueJobSendSpawnInfo), ctx, id, in)
}

// QueueJobSetVersion mocks base method.
func (m *MockWorkerInterface) QueueJobSetVersion(ctx context.Context, jobID int64, version sdk.WorkflowRunVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobSetVersion", ctx, jobID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobSetVersion indicates an expected call of QueueJobSetVersion.
func (mr *MockWorkerInterfaceMockRecorder) QueueJobSetVersion(ctx, jobID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobSetVersion", reflect.TypeOf((*MockWorkerInterface)(nil).QueueJobSetVersion), ctx, jobID, version)
}

// QueueJobTag mocks base method.
func (m *MockWorkerInterface) QueueJobTag(ctx context.Context, jobID int64, tags []sdk.WorkflowRunTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueJobTag", ctx, jobID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueJobTag indicates an expected call of QueueJobTag.
func (mr *MockWorkerInterfaceMockRecorder) QueueJobTag(ctx, jobID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueJobTag", reflect.TypeOf((*MockWorkerInterface)(nil).QueueJobTag), ctx, jobID, tags)
}

// QueuePolling mocks base method.
func (m *MockWorkerInterface) QueuePolling(ctx context.Context, goRoutines *sdk.GoRoutines, jobs chan<- sdk.WorkflowNodeJobRun, errs chan<- error, delay time.Duration, ms ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, goRoutines, jobs, errs, delay}
	for _, a := range ms {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueuePolling", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuePolling indicates an expected call of QueuePolling.
func (mr *MockWorkerInterfaceMockRecorder) QueuePolling(ctx, goRoutines, jobs, errs, delay interface{}, ms ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, goRoutines, jobs, errs, delay}, ms...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuePolling", reflect.TypeOf((*MockWorkerInterface)(nil).QueuePolling), varargs...)
}

// QueueSendResult mocks base method.
func (m *MockWorkerInterface) QueueSendResult(ctx context.Context, id int64, res sdk.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSendResult", ctx, id, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSendResult indicates an expected call of QueueSendResult.
func (mr *MockWorkerInterfaceMockRecorder) QueueSendResult(ctx, id, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSendResult", reflect.TypeOf((*MockWorkerInterface)(nil).QueueSendResult), ctx, id, res)
}

// QueueSendStepResult mocks base method.
func (m *MockWorkerInterface) QueueSendStepResult(ctx context.Context, id int64, res sdk.StepStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSendStepResult", ctx, id, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSendStepResult indicates an expected call of QueueSendStepResult.
func (mr *MockWorkerInterfaceMockRecorder) QueueSendStepResult(ctx, id, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSendStepResult", reflect.TypeOf((*MockWorkerInterface)(nil).QueueSendStepResult), ctx, id, res)
}

// QueueSendUnitTests mocks base method.
func (m *MockWorkerInterface) QueueSendUnitTests(ctx context.Context, id int64, report sdk.JUnitTestsSuites) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSendUnitTests", ctx, id, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSendUnitTests indicates an expected call of QueueSendUnitTests.
func (mr *MockWorkerInterfaceMockRecorder) QueueSendUnitTests(ctx, id, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSendUnitTests", reflect.TypeOf((*MockWorkerInterface)(nil).QueueSendUnitTests), ctx, id, report)
}

// QueueTakeJob mocks base method.
func (m *MockWorkerInterface) QueueTakeJob(ctx context.Context, job sdk.WorkflowNodeJobRun) (*sdk.WorkflowNodeJobRunData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueTakeJob", ctx, job)
	ret0, _ := ret[0].(*sdk.WorkflowNodeJobRunData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueTakeJob indicates an expected call of QueueTakeJob.
func (mr *MockWorkerInterfaceMockRecorder) QueueTakeJob(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueTakeJob", reflect.TypeOf((*MockWorkerInterface)(nil).QueueTakeJob), ctx, job)
}

// QueueWorkerCacheLink mocks base method.
func (m *MockWorkerInterface) QueueWorkerCacheLink(ctx context.Context, jobID int64, tag string) (sdk.CDNItemLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkerCacheLink", ctx, jobID, tag)
	ret0, _ := ret[0].(sdk.CDNItemLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueWorkerCacheLink indicates an expected call of QueueWorkerCacheLink.
func (mr *MockWorkerInterfaceMockRecorder) QueueWorkerCacheLink(ctx, jobID, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkerCacheLink", reflect.TypeOf((*MockWorkerInterface)(nil).QueueWorkerCacheLink), ctx, jobID, tag)
}

// QueueWorkflowNodeJobRun mocks base method.
func (m *MockWorkerInterface) QueueWorkflowNodeJobRun(mods ...cdsclient.RequestModifier) ([]sdk.WorkflowNodeJobRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueueWorkflowNodeJobRun", varargs...)
	ret0, _ := ret[0].([]sdk.WorkflowNodeJobRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueWorkflowNodeJobRun indicates an expected call of QueueWorkflowNodeJobRun.
func (mr *MockWorkerInterfaceMockRecorder) QueueWorkflowNodeJobRun(mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowNodeJobRun", reflect.TypeOf((*MockWorkerInterface)(nil).QueueWorkflowNodeJobRun), mods...)
}

// QueueWorkflowRunResultCheck mocks base method.
func (m *MockWorkerInterface) QueueWorkflowRunResultCheck(ctx context.Context, jobID int64, runResultCheck sdk.WorkflowRunResultCheck) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultCheck", ctx, jobID, runResultCheck)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueWorkflowRunResultCheck indicates an expected call of QueueWorkflowRunResultCheck.
func (mr *MockWorkerInterfaceMockRecorder) QueueWorkflowRunResultCheck(ctx, jobID, runResultCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultCheck", reflect.TypeOf((*MockWorkerInterface)(nil).QueueWorkflowRunResultCheck), ctx, jobID, runResultCheck)
}

// QueueWorkflowRunResultsAdd mocks base method.
func (m *MockWorkerInterface) QueueWorkflowRunResultsAdd(ctx context.Context, jobID int64, addRequest sdk.WorkflowRunResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultsAdd", ctx, jobID, addRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWorkflowRunResultsAdd indicates an expected call of QueueWorkflowRunResultsAdd.
func (mr *MockWorkerInterfaceMockRecorder) QueueWorkflowRunResultsAdd(ctx, jobID, addRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultsAdd", reflect.TypeOf((*MockWorkerInterface)(nil).QueueWorkflowRunResultsAdd), ctx, jobID, addRequest)
}

// QueueWorkflowRunResultsPromote mocks base method.
func (m *MockWorkerInterface) QueueWorkflowRunResultsPromote(ctx context.Context, permJobID int64, runResultIDs []string, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultsPromote", ctx, permJobID, runResultIDs, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWorkflowRunResultsPromote indicates an expected call of QueueWorkflowRunResultsPromote.
func (mr *MockWorkerInterfaceMockRecorder) QueueWorkflowRunResultsPromote(ctx, permJobID, runResultIDs, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultsPromote", reflect.TypeOf((*MockWorkerInterface)(nil).QueueWorkflowRunResultsPromote), ctx, permJobID, runResultIDs, to)
}

// QueueWorkflowRunResultsRelease mocks base method.
func (m *MockWorkerInterface) QueueWorkflowRunResultsRelease(ctx context.Context, permJobID int64, runResultIDs []string, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueWorkflowRunResultsRelease", ctx, permJobID, runResultIDs, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueWorkflowRunResultsRelease indicates an expected call of QueueWorkflowRunResultsRelease.
func (mr *MockWorkerInterfaceMockRecorder) QueueWorkflowRunResultsRelease(ctx, permJobID, runResultIDs, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueWorkflowRunResultsRelease", reflect.TypeOf((*MockWorkerInterface)(nil).QueueWorkflowRunResultsRelease), ctx, permJobID, runResultIDs, to)
}

// Requirements mocks base method.
func (m *MockWorkerInterface) Requirements() ([]sdk.Requirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Requirements")
	ret0, _ := ret[0].([]sdk.Requirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Requirements indicates an expected call of Requirements.
func (mr *MockWorkerInterfaceMockRecorder) Requirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requirements", reflect.TypeOf((*MockWorkerInterface)(nil).Requirements))
}

// ServiceConfigurationGet mocks base method.
func (m *MockWorkerInterface) ServiceConfigurationGet(arg0 context.Context, arg1 string) ([]sdk.ServiceConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceConfigurationGet", arg0, arg1)
	ret0, _ := ret[0].([]sdk.ServiceConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceConfigurationGet indicates an expected call of ServiceConfigurationGet.
func (mr *MockWorkerInterfaceMockRecorder) ServiceConfigurationGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceConfigurationGet", reflect.TypeOf((*MockWorkerInterface)(nil).ServiceConfigurationGet), arg0, arg1)
}

// V2WorkerGet mocks base method.
func (m *MockWorkerInterface) V2WorkerGet(ctx context.Context, name string, mods ...cdsclient.RequestModifier) (*sdk.V2Worker, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "V2WorkerGet", varargs...)
	ret0, _ := ret[0].(*sdk.V2Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2WorkerGet indicates an expected call of V2WorkerGet.
func (mr *MockWorkerInterfaceMockRecorder) V2WorkerGet(ctx, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerGet", reflect.TypeOf((*MockWorkerInterface)(nil).V2WorkerGet), varargs...)
}

// V2WorkerList mocks base method.
func (m *MockWorkerInterface) V2WorkerList(ctx context.Context) ([]sdk.V2Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2WorkerList", ctx)
	ret0, _ := ret[0].([]sdk.V2Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2WorkerList indicates an expected call of V2WorkerList.
func (mr *MockWorkerInterfaceMockRecorder) V2WorkerList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2WorkerList", reflect.TypeOf((*MockWorkerInterface)(nil).V2WorkerList), ctx)
}

// WorkerDisable mocks base method.
func (m *MockWorkerInterface) WorkerDisable(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerDisable", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerDisable indicates an expected call of WorkerDisable.
func (mr *MockWorkerInterfaceMockRecorder) WorkerDisable(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerDisable", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerDisable), ctx, id)
}

// WorkerGet mocks base method.
func (m *MockWorkerInterface) WorkerGet(ctx context.Context, name string, mods ...cdsclient.RequestModifier) (*sdk.Worker, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkerGet", varargs...)
	ret0, _ := ret[0].(*sdk.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerGet indicates an expected call of WorkerGet.
func (mr *MockWorkerInterfaceMockRecorder) WorkerGet(ctx, name interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerGet", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerGet), varargs...)
}

// WorkerList mocks base method.
func (m *MockWorkerInterface) WorkerList(ctx context.Context) ([]sdk.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerList", ctx)
	ret0, _ := ret[0].([]sdk.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerList indicates an expected call of WorkerList.
func (mr *MockWorkerInterfaceMockRecorder) WorkerList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerList", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerList), ctx)
}

// WorkerModelAdd mocks base method.
func (m *MockWorkerInterface) WorkerModelAdd(name, modelType, patternName string, dockerModel *sdk.ModelDocker, vmModel *sdk.ModelVirtualMachine, groupID int64) (sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelAdd", name, modelType, patternName, dockerModel, vmModel, groupID)
	ret0, _ := ret[0].(sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelAdd indicates an expected call of WorkerModelAdd.
func (mr *MockWorkerInterfaceMockRecorder) WorkerModelAdd(name, modelType, patternName, dockerModel, vmModel, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelAdd", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerModelAdd), name, modelType, patternName, dockerModel, vmModel, groupID)
}

// WorkerModelBook mocks base method.
func (m *MockWorkerInterface) WorkerModelBook(groupName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelBook", groupName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerModelBook indicates an expected call of WorkerModelBook.
func (mr *MockWorkerInterfaceMockRecorder) WorkerModelBook(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelBook", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerModelBook), groupName, name)
}

// WorkerModelDelete mocks base method.
func (m *MockWorkerInterface) WorkerModelDelete(groupName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelDelete", groupName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerModelDelete indicates an expected call of WorkerModelDelete.
func (mr *MockWorkerInterfaceMockRecorder) WorkerModelDelete(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelDelete", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerModelDelete), groupName, name)
}

// WorkerModelEnabledList mocks base method.
func (m *MockWorkerInterface) WorkerModelEnabledList() ([]sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelEnabledList")
	ret0, _ := ret[0].([]sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelEnabledList indicates an expected call of WorkerModelEnabledList.
func (mr *MockWorkerInterfaceMockRecorder) WorkerModelEnabledList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelEnabledList", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerModelEnabledList))
}

// WorkerModelGet mocks base method.
func (m *MockWorkerInterface) WorkerModelGet(groupName, name string) (sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelGet", groupName, name)
	ret0, _ := ret[0].(sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelGet indicates an expected call of WorkerModelGet.
func (mr *MockWorkerInterfaceMockRecorder) WorkerModelGet(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelGet", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerModelGet), groupName, name)
}

// WorkerModelList mocks base method.
func (m *MockWorkerInterface) WorkerModelList(arg0 *cdsclient.WorkerModelFilter) ([]sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelList", arg0)
	ret0, _ := ret[0].([]sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelList indicates an expected call of WorkerModelList.
func (mr *MockWorkerInterfaceMockRecorder) WorkerModelList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelList", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerModelList), arg0)
}

// WorkerModelSecretList mocks base method.
func (m *MockWorkerInterface) WorkerModelSecretList(groupName, name string) (sdk.WorkerModelSecrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelSecretList", groupName, name)
	ret0, _ := ret[0].(sdk.WorkerModelSecrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelSecretList indicates an expected call of WorkerModelSecretList.
func (mr *MockWorkerInterfaceMockRecorder) WorkerModelSecretList(groupName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelSecretList", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerModelSecretList), groupName, name)
}

// WorkerModelSpawnError mocks base method.
func (m *MockWorkerInterface) WorkerModelSpawnError(groupName, name string, info sdk.SpawnErrorForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelSpawnError", groupName, name, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerModelSpawnError indicates an expected call of WorkerModelSpawnError.
func (mr *MockWorkerInterfaceMockRecorder) WorkerModelSpawnError(groupName, name, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelSpawnError", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerModelSpawnError), groupName, name, info)
}

// WorkerModelv2List mocks base method.
func (m *MockWorkerInterface) WorkerModelv2List(ctx context.Context, projKey, vcsIdentifier, repoIdentifier string, filter *cdsclient.WorkerModelV2Filter) ([]sdk.V2WorkerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelv2List", ctx, projKey, vcsIdentifier, repoIdentifier, filter)
	ret0, _ := ret[0].([]sdk.V2WorkerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelv2List indicates an expected call of WorkerModelv2List.
func (mr *MockWorkerInterfaceMockRecorder) WorkerModelv2List(ctx, projKey, vcsIdentifier, repoIdentifier, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelv2List", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerModelv2List), ctx, projKey, vcsIdentifier, repoIdentifier, filter)
}

// WorkerRefresh mocks base method.
func (m *MockWorkerInterface) WorkerRefresh(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerRefresh", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerRefresh indicates an expected call of WorkerRefresh.
func (mr *MockWorkerInterfaceMockRecorder) WorkerRefresh(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerRefresh", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerRefresh), ctx)
}

// WorkerRegister mocks base method.
func (m *MockWorkerInterface) WorkerRegister(ctx context.Context, authToken string, form sdk.WorkerRegistrationForm) (*sdk.Worker, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerRegister", ctx, authToken, form)
	ret0, _ := ret[0].(*sdk.Worker)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WorkerRegister indicates an expected call of WorkerRegister.
func (mr *MockWorkerInterfaceMockRecorder) WorkerRegister(ctx, authToken, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerRegister", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerRegister), ctx, authToken, form)
}

// WorkerSetStatus mocks base method.
func (m *MockWorkerInterface) WorkerSetStatus(ctx context.Context, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerSetStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerSetStatus indicates an expected call of WorkerSetStatus.
func (mr *MockWorkerInterfaceMockRecorder) WorkerSetStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerSetStatus", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerSetStatus), ctx, status)
}

// WorkerUnregister mocks base method.
func (m *MockWorkerInterface) WorkerUnregister(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerUnregister", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkerUnregister indicates an expected call of WorkerUnregister.
func (mr *MockWorkerInterfaceMockRecorder) WorkerUnregister(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerUnregister", reflect.TypeOf((*MockWorkerInterface)(nil).WorkerUnregister), ctx)
}

// WorkflowNodeRunRelease mocks base method.
func (m *MockWorkerInterface) WorkflowNodeRunRelease(projectKey, workflowName string, runNumber, nodeRunID int64, release sdk.WorkflowNodeRunRelease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowNodeRunRelease", projectKey, workflowName, runNumber, nodeRunID, release)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowNodeRunRelease indicates an expected call of WorkflowNodeRunRelease.
func (mr *MockWorkerInterfaceMockRecorder) WorkflowNodeRunRelease(projectKey, workflowName, runNumber, nodeRunID, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowNodeRunRelease", reflect.TypeOf((*MockWorkerInterface)(nil).WorkflowNodeRunRelease), projectKey, workflowName, runNumber, nodeRunID, release)
}

// WorkflowRunArtifactsLinks mocks base method.
func (m *MockWorkerInterface) WorkflowRunArtifactsLinks(projectKey, name string, number int64) (sdk.CDNItemLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunArtifactsLinks", projectKey, name, number)
	ret0, _ := ret[0].(sdk.CDNItemLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunArtifactsLinks indicates an expected call of WorkflowRunArtifactsLinks.
func (mr *MockWorkerInterfaceMockRecorder) WorkflowRunArtifactsLinks(projectKey, name, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunArtifactsLinks", reflect.TypeOf((*MockWorkerInterface)(nil).WorkflowRunArtifactsLinks), projectKey, name, number)
}

// WorkflowRunGet mocks base method.
func (m *MockWorkerInterface) WorkflowRunGet(projectKey, workflowName string, number int64) (*sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunGet", projectKey, workflowName, number)
	ret0, _ := ret[0].(*sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunGet indicates an expected call of WorkflowRunGet.
func (mr *MockWorkerInterfaceMockRecorder) WorkflowRunGet(projectKey, workflowName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunGet", reflect.TypeOf((*MockWorkerInterface)(nil).WorkflowRunGet), projectKey, workflowName, number)
}

// WorkflowRunList mocks base method.
func (m *MockWorkerInterface) WorkflowRunList(projectKey, workflowName string, offset, limit int64) ([]sdk.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunList", projectKey, workflowName, offset, limit)
	ret0, _ := ret[0].([]sdk.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunList indicates an expected call of WorkflowRunList.
func (mr *MockWorkerInterfaceMockRecorder) WorkflowRunList(projectKey, workflowName, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunList", reflect.TypeOf((*MockWorkerInterface)(nil).WorkflowRunList), projectKey, workflowName, offset, limit)
}

// WorkflowRunResultsList mocks base method.
func (m *MockWorkerInterface) WorkflowRunResultsList(ctx context.Context, projectKey, name string, number int64) ([]sdk.WorkflowRunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowRunResultsList", ctx, projectKey, name, number)
	ret0, _ := ret[0].([]sdk.WorkflowRunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowRunResultsList indicates an expected call of WorkflowRunResultsList.
func (mr *MockWorkerInterfaceMockRecorder) WorkflowRunResultsList(ctx, projectKey, name, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowRunResultsList", reflect.TypeOf((*MockWorkerInterface)(nil).WorkflowRunResultsList), ctx, projectKey, name, number)
}

// MockRaw is a mock of Raw interface.
type MockRaw struct {
	ctrl     *gomock.Controller
	recorder *MockRawMockRecorder
}

// MockRawMockRecorder is the mock recorder for MockRaw.
type MockRawMockRecorder struct {
	mock *MockRaw
}

// NewMockRaw creates a new mock instance.
func NewMockRaw(ctrl *gomock.Controller) *MockRaw {
	mock := &MockRaw{ctrl: ctrl}
	mock.recorder = &MockRawMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaw) EXPECT() *MockRawMockRecorder {
	return m.recorder
}

// DeleteJSON mocks base method.
func (m *MockRaw) DeleteJSON(ctx context.Context, path string, out interface{}, mods ...cdsclient.RequestModifier) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJSON", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJSON indicates an expected call of DeleteJSON.
func (mr *MockRawMockRecorder) DeleteJSON(ctx, path, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJSON", reflect.TypeOf((*MockRaw)(nil).DeleteJSON), varargs...)
}

// GetJSON mocks base method.
func (m *MockRaw) GetJSON(ctx context.Context, path string, out interface{}, mods ...cdsclient.RequestModifier) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJSON", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJSON indicates an expected call of GetJSON.
func (mr *MockRawMockRecorder) GetJSON(ctx, path, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJSON", reflect.TypeOf((*MockRaw)(nil).GetJSON), varargs...)
}

// HTTPClient mocks base method.
func (m *MockRaw) HTTPClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// HTTPClient indicates an expected call of HTTPClient.
func (mr *MockRawMockRecorder) HTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockRaw)(nil).HTTPClient))
}

// HTTPNoTimeoutClient mocks base method.
func (m *MockRaw) HTTPNoTimeoutClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPNoTimeoutClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// HTTPNoTimeoutClient indicates an expected call of HTTPNoTimeoutClient.
func (mr *MockRawMockRecorder) HTTPNoTimeoutClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPNoTimeoutClient", reflect.TypeOf((*MockRaw)(nil).HTTPNoTimeoutClient))
}

// HTTPWebsocketClient mocks base method.
func (m *MockRaw) HTTPWebsocketClient() *websocket.Dialer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPWebsocketClient")
	ret0, _ := ret[0].(*websocket.Dialer)
	return ret0
}

// HTTPWebsocketClient indicates an expected call of HTTPWebsocketClient.
func (mr *MockRawMockRecorder) HTTPWebsocketClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPWebsocketClient", reflect.TypeOf((*MockRaw)(nil).HTTPWebsocketClient))
}

// PostJSON mocks base method.
func (m *MockRaw) PostJSON(ctx context.Context, path string, in, out interface{}, mods ...cdsclient.RequestModifier) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, in, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostJSON", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostJSON indicates an expected call of PostJSON.
func (mr *MockRawMockRecorder) PostJSON(ctx, path, in, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, in, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostJSON", reflect.TypeOf((*MockRaw)(nil).PostJSON), varargs...)
}

// PutJSON mocks base method.
func (m *MockRaw) PutJSON(ctx context.Context, path string, in, out interface{}, mods ...cdsclient.RequestModifier) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, in, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutJSON", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutJSON indicates an expected call of PutJSON.
func (mr *MockRawMockRecorder) PutJSON(ctx, path, in, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, in, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutJSON", reflect.TypeOf((*MockRaw)(nil).PutJSON), varargs...)
}

// Request mocks base method.
func (m *MockRaw) Request(ctx context.Context, method, path string, body io.Reader, mods ...cdsclient.RequestModifier) ([]byte, http.Header, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method, path, body}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Request", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(http.Header)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Request indicates an expected call of Request.
func (mr *MockRawMockRecorder) Request(ctx, method, path, body interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method, path, body}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockRaw)(nil).Request), varargs...)
}

// RequestJSON mocks base method.
func (m *MockRaw) RequestJSON(ctx context.Context, method, path string, in, out interface{}, mods ...cdsclient.RequestModifier) ([]byte, http.Header, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method, path, in, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestJSON", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(http.Header)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// RequestJSON indicates an expected call of RequestJSON.
func (mr *MockRawMockRecorder) RequestJSON(ctx, method, path, in, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method, path, in, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestJSON", reflect.TypeOf((*MockRaw)(nil).RequestJSON), varargs...)
}

// Stream mocks base method.
func (m *MockRaw) Stream(ctx context.Context, httpClient cdsclient.HTTPClient, method, path string, body io.Reader, mods ...cdsclient.RequestModifier) (io.ReadCloser, http.Header, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, httpClient, method, path, body}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stream", varargs...)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(http.Header)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Stream indicates an expected call of Stream.
func (mr *MockRawMockRecorder) Stream(ctx, httpClient, method, path, body interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, httpClient, method, path, body}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockRaw)(nil).Stream), varargs...)
}

// MockGRPCPluginsClient is a mock of GRPCPluginsClient interface.
type MockGRPCPluginsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCPluginsClientMockRecorder
}

// MockGRPCPluginsClientMockRecorder is the mock recorder for MockGRPCPluginsClient.
type MockGRPCPluginsClientMockRecorder struct {
	mock *MockGRPCPluginsClient
}

// NewMockGRPCPluginsClient creates a new mock instance.
func NewMockGRPCPluginsClient(ctrl *gomock.Controller) *MockGRPCPluginsClient {
	mock := &MockGRPCPluginsClient{ctrl: ctrl}
	mock.recorder = &MockGRPCPluginsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCPluginsClient) EXPECT() *MockGRPCPluginsClientMockRecorder {
	return m.recorder
}

// PluginAdd mocks base method.
func (m *MockGRPCPluginsClient) PluginAdd(arg0 *sdk.GRPCPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginAdd", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginAdd indicates an expected call of PluginAdd.
func (mr *MockGRPCPluginsClientMockRecorder) PluginAdd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginAdd", reflect.TypeOf((*MockGRPCPluginsClient)(nil).PluginAdd), arg0)
}

// PluginAddBinary mocks base method.
func (m *MockGRPCPluginsClient) PluginAddBinary(arg0 *sdk.GRPCPlugin, arg1 *sdk.GRPCPluginBinary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginAddBinary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginAddBinary indicates an expected call of PluginAddBinary.
func (mr *MockGRPCPluginsClientMockRecorder) PluginAddBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginAddBinary", reflect.TypeOf((*MockGRPCPluginsClient)(nil).PluginAddBinary), arg0, arg1)
}

// PluginDelete mocks base method.
func (m *MockGRPCPluginsClient) PluginDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginDelete indicates an expected call of PluginDelete.
func (mr *MockGRPCPluginsClientMockRecorder) PluginDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginDelete", reflect.TypeOf((*MockGRPCPluginsClient)(nil).PluginDelete), arg0)
}

// PluginDeleteBinary mocks base method.
func (m *MockGRPCPluginsClient) PluginDeleteBinary(name, os, arch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginDeleteBinary", name, os, arch)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginDeleteBinary indicates an expected call of PluginDeleteBinary.
func (mr *MockGRPCPluginsClientMockRecorder) PluginDeleteBinary(name, os, arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginDeleteBinary", reflect.TypeOf((*MockGRPCPluginsClient)(nil).PluginDeleteBinary), name, os, arch)
}

// PluginGetBinary mocks base method.
func (m *MockGRPCPluginsClient) PluginGetBinary(name, os, arch string, w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGetBinary", name, os, arch, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginGetBinary indicates an expected call of PluginGetBinary.
func (mr *MockGRPCPluginsClientMockRecorder) PluginGetBinary(name, os, arch, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGetBinary", reflect.TypeOf((*MockGRPCPluginsClient)(nil).PluginGetBinary), name, os, arch, w)
}

// PluginGetBinaryInfos mocks base method.
func (m *MockGRPCPluginsClient) PluginGetBinaryInfos(name, os, arch string) (*sdk.GRPCPluginBinary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGetBinaryInfos", name, os, arch)
	ret0, _ := ret[0].(*sdk.GRPCPluginBinary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginGetBinaryInfos indicates an expected call of PluginGetBinaryInfos.
func (mr *MockGRPCPluginsClientMockRecorder) PluginGetBinaryInfos(name, os, arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGetBinaryInfos", reflect.TypeOf((*MockGRPCPluginsClient)(nil).PluginGetBinaryInfos), name, os, arch)
}

// PluginUpdate mocks base method.
func (m *MockGRPCPluginsClient) PluginUpdate(arg0 *sdk.GRPCPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginUpdate indicates an expected call of PluginUpdate.
func (mr *MockGRPCPluginsClientMockRecorder) PluginUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginUpdate", reflect.TypeOf((*MockGRPCPluginsClient)(nil).PluginUpdate), arg0)
}

// PluginsGet mocks base method.
func (m *MockGRPCPluginsClient) PluginsGet(arg0 string) (*sdk.GRPCPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginsGet", arg0)
	ret0, _ := ret[0].(*sdk.GRPCPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginsGet indicates an expected call of PluginsGet.
func (mr *MockGRPCPluginsClientMockRecorder) PluginsGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginsGet", reflect.TypeOf((*MockGRPCPluginsClient)(nil).PluginsGet), arg0)
}

// PluginsList mocks base method.
func (m *MockGRPCPluginsClient) PluginsList() ([]sdk.GRPCPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginsList")
	ret0, _ := ret[0].([]sdk.GRPCPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginsList indicates an expected call of PluginsList.
func (mr *MockGRPCPluginsClientMockRecorder) PluginsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginsList", reflect.TypeOf((*MockGRPCPluginsClient)(nil).PluginsList))
}

// MockGRPCPluginsV2Client is a mock of GRPCPluginsV2Client interface.
type MockGRPCPluginsV2Client struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCPluginsV2ClientMockRecorder
}

// MockGRPCPluginsV2ClientMockRecorder is the mock recorder for MockGRPCPluginsV2Client.
type MockGRPCPluginsV2ClientMockRecorder struct {
	mock *MockGRPCPluginsV2Client
}

// NewMockGRPCPluginsV2Client creates a new mock instance.
func NewMockGRPCPluginsV2Client(ctrl *gomock.Controller) *MockGRPCPluginsV2Client {
	mock := &MockGRPCPluginsV2Client{ctrl: ctrl}
	mock.recorder = &MockGRPCPluginsV2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCPluginsV2Client) EXPECT() *MockGRPCPluginsV2ClientMockRecorder {
	return m.recorder
}

// PluginImport mocks base method.
func (m *MockGRPCPluginsV2Client) PluginImport(arg0 *sdk.GRPCPlugin, arg1 ...cdsclient.RequestModifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PluginImport", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginImport indicates an expected call of PluginImport.
func (mr *MockGRPCPluginsV2ClientMockRecorder) PluginImport(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginImport", reflect.TypeOf((*MockGRPCPluginsV2Client)(nil).PluginImport), varargs...)
}

// MockProviderClient is a mock of ProviderClient interface.
type MockProviderClient struct {
	ctrl     *gomock.Controller
	recorder *MockProviderClientMockRecorder
}

// MockProviderClientMockRecorder is the mock recorder for MockProviderClient.
type MockProviderClientMockRecorder struct {
	mock *MockProviderClient
}

// NewMockProviderClient creates a new mock instance.
func NewMockProviderClient(ctrl *gomock.Controller) *MockProviderClient {
	mock := &MockProviderClient{ctrl: ctrl}
	mock.recorder = &MockProviderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderClient) EXPECT() *MockProviderClientMockRecorder {
	return m.recorder
}

// ApplicationDeploymentStrategyUpdate mocks base method.
func (m *MockProviderClient) ApplicationDeploymentStrategyUpdate(projectKey, applicationName, integrationName string, config sdk.IntegrationConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationDeploymentStrategyUpdate", projectKey, applicationName, integrationName, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationDeploymentStrategyUpdate indicates an expected call of ApplicationDeploymentStrategyUpdate.
func (mr *MockProviderClientMockRecorder) ApplicationDeploymentStrategyUpdate(projectKey, applicationName, integrationName, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationDeploymentStrategyUpdate", reflect.TypeOf((*MockProviderClient)(nil).ApplicationDeploymentStrategyUpdate), projectKey, applicationName, integrationName, config)
}

// ApplicationMetadataUpdate mocks base method.
func (m *MockProviderClient) ApplicationMetadataUpdate(projectKey, applicationName, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationMetadataUpdate", projectKey, applicationName, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationMetadataUpdate indicates an expected call of ApplicationMetadataUpdate.
func (mr *MockProviderClientMockRecorder) ApplicationMetadataUpdate(projectKey, applicationName, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationMetadataUpdate", reflect.TypeOf((*MockProviderClient)(nil).ApplicationMetadataUpdate), projectKey, applicationName, key, value)
}

// ApplicationsList mocks base method.
func (m *MockProviderClient) ApplicationsList(projectKey string, opts ...cdsclient.RequestModifier) ([]sdk.Application, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectKey}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationsList", varargs...)
	ret0, _ := ret[0].([]sdk.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationsList indicates an expected call of ApplicationsList.
func (mr *MockProviderClientMockRecorder) ApplicationsList(projectKey interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectKey}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationsList", reflect.TypeOf((*MockProviderClient)(nil).ApplicationsList), varargs...)
}

// ProjectsList mocks base method.
func (m *MockProviderClient) ProjectsList(opts ...cdsclient.RequestModifier) ([]sdk.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectsList", varargs...)
	ret0, _ := ret[0].([]sdk.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectsList indicates an expected call of ProjectsList.
func (mr *MockProviderClientMockRecorder) ProjectsList(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsList", reflect.TypeOf((*MockProviderClient)(nil).ProjectsList), opts...)
}

// WorkflowLoad mocks base method.
func (m *MockProviderClient) WorkflowLoad(projectKey, workflowName string) (*sdk.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowLoad", projectKey, workflowName)
	ret0, _ := ret[0].(*sdk.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowLoad indicates an expected call of WorkflowLoad.
func (mr *MockProviderClientMockRecorder) WorkflowLoad(projectKey, workflowName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowLoad", reflect.TypeOf((*MockProviderClient)(nil).WorkflowLoad), projectKey, workflowName)
}

// WorkflowsList mocks base method.
func (m *MockProviderClient) WorkflowsList(projectKey string) ([]sdk.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowsList", projectKey)
	ret0, _ := ret[0].([]sdk.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowsList indicates an expected call of WorkflowsList.
func (mr *MockProviderClientMockRecorder) WorkflowsList(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowsList", reflect.TypeOf((*MockProviderClient)(nil).WorkflowsList), projectKey)
}

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// AuthConsumerCreateForUser mocks base method.
func (m *MockAuthClient) AuthConsumerCreateForUser(username string, request sdk.AuthUserConsumer) (sdk.AuthConsumerCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerCreateForUser", username, request)
	ret0, _ := ret[0].(sdk.AuthConsumerCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerCreateForUser indicates an expected call of AuthConsumerCreateForUser.
func (mr *MockAuthClientMockRecorder) AuthConsumerCreateForUser(username, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerCreateForUser", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerCreateForUser), username, request)
}

// AuthConsumerDelete mocks base method.
func (m *MockAuthClient) AuthConsumerDelete(username, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerDelete", username, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthConsumerDelete indicates an expected call of AuthConsumerDelete.
func (mr *MockAuthClientMockRecorder) AuthConsumerDelete(username, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerDelete", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerDelete), username, id)
}

// AuthConsumerHatcherySigninV2 mocks base method.
func (m *MockAuthClient) AuthConsumerHatcherySigninV2(request interface{}) (sdk.AuthConsumerHatcherySigninResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerHatcherySigninV2", request)
	ret0, _ := ret[0].(sdk.AuthConsumerHatcherySigninResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerHatcherySigninV2 indicates an expected call of AuthConsumerHatcherySigninV2.
func (mr *MockAuthClientMockRecorder) AuthConsumerHatcherySigninV2(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerHatcherySigninV2", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerHatcherySigninV2), request)
}

// AuthConsumerListByUser mocks base method.
func (m *MockAuthClient) AuthConsumerListByUser(username string) (sdk.AuthUserConsumers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerListByUser", username)
	ret0, _ := ret[0].(sdk.AuthUserConsumers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerListByUser indicates an expected call of AuthConsumerListByUser.
func (mr *MockAuthClientMockRecorder) AuthConsumerListByUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerListByUser", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerListByUser), username)
}

// AuthConsumerLocalAskResetPassword mocks base method.
func (m *MockAuthClient) AuthConsumerLocalAskResetPassword(arg0 sdk.AuthConsumerSigninRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerLocalAskResetPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthConsumerLocalAskResetPassword indicates an expected call of AuthConsumerLocalAskResetPassword.
func (mr *MockAuthClientMockRecorder) AuthConsumerLocalAskResetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerLocalAskResetPassword", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerLocalAskResetPassword), arg0)
}

// AuthConsumerLocalResetPassword mocks base method.
func (m *MockAuthClient) AuthConsumerLocalResetPassword(token, newPassword string) (sdk.AuthConsumerSigninResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerLocalResetPassword", token, newPassword)
	ret0, _ := ret[0].(sdk.AuthConsumerSigninResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerLocalResetPassword indicates an expected call of AuthConsumerLocalResetPassword.
func (mr *MockAuthClientMockRecorder) AuthConsumerLocalResetPassword(token, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerLocalResetPassword", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerLocalResetPassword), token, newPassword)
}

// AuthConsumerLocalSignup mocks base method.
func (m *MockAuthClient) AuthConsumerLocalSignup(arg0 sdk.AuthConsumerSigninRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerLocalSignup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthConsumerLocalSignup indicates an expected call of AuthConsumerLocalSignup.
func (mr *MockAuthClientMockRecorder) AuthConsumerLocalSignup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerLocalSignup", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerLocalSignup), arg0)
}

// AuthConsumerLocalSignupVerify mocks base method.
func (m *MockAuthClient) AuthConsumerLocalSignupVerify(token, initToken string) (sdk.AuthConsumerSigninResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerLocalSignupVerify", token, initToken)
	ret0, _ := ret[0].(sdk.AuthConsumerSigninResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerLocalSignupVerify indicates an expected call of AuthConsumerLocalSignupVerify.
func (mr *MockAuthClientMockRecorder) AuthConsumerLocalSignupVerify(token, initToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerLocalSignupVerify", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerLocalSignupVerify), token, initToken)
}

// AuthConsumerRegen mocks base method.
func (m *MockAuthClient) AuthConsumerRegen(username, id string, newDuration int64, overlapDuration string) (sdk.AuthConsumerCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerRegen", username, id, newDuration, overlapDuration)
	ret0, _ := ret[0].(sdk.AuthConsumerCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerRegen indicates an expected call of AuthConsumerRegen.
func (mr *MockAuthClientMockRecorder) AuthConsumerRegen(username, id, newDuration, overlapDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerRegen", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerRegen), username, id, newDuration, overlapDuration)
}

// AuthConsumerSignin mocks base method.
func (m *MockAuthClient) AuthConsumerSignin(arg0 sdk.AuthConsumerType, arg1 interface{}) (sdk.AuthConsumerSigninResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerSignin", arg0, arg1)
	ret0, _ := ret[0].(sdk.AuthConsumerSigninResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthConsumerSignin indicates an expected call of AuthConsumerSignin.
func (mr *MockAuthClientMockRecorder) AuthConsumerSignin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerSignin", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerSignin), arg0, arg1)
}

// AuthConsumerSignout mocks base method.
func (m *MockAuthClient) AuthConsumerSignout() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthConsumerSignout")
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthConsumerSignout indicates an expected call of AuthConsumerSignout.
func (mr *MockAuthClientMockRecorder) AuthConsumerSignout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthConsumerSignout", reflect.TypeOf((*MockAuthClient)(nil).AuthConsumerSignout))
}

// AuthDriverList mocks base method.
func (m *MockAuthClient) AuthDriverList() (sdk.AuthDriverResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthDriverList")
	ret0, _ := ret[0].(sdk.AuthDriverResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthDriverList indicates an expected call of AuthDriverList.
func (mr *MockAuthClientMockRecorder) AuthDriverList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthDriverList", reflect.TypeOf((*MockAuthClient)(nil).AuthDriverList))
}

// AuthMe mocks base method.
func (m *MockAuthClient) AuthMe() (sdk.AuthCurrentConsumerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthMe")
	ret0, _ := ret[0].(sdk.AuthCurrentConsumerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthMe indicates an expected call of AuthMe.
func (mr *MockAuthClientMockRecorder) AuthMe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthMe", reflect.TypeOf((*MockAuthClient)(nil).AuthMe))
}

// AuthSessionDelete mocks base method.
func (m *MockAuthClient) AuthSessionDelete(username, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSessionDelete", username, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthSessionDelete indicates an expected call of AuthSessionDelete.
func (mr *MockAuthClientMockRecorder) AuthSessionDelete(username, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSessionDelete", reflect.TypeOf((*MockAuthClient)(nil).AuthSessionDelete), username, id)
}

// AuthSessionGet mocks base method.
func (m *MockAuthClient) AuthSessionGet(id string) (sdk.AuthCurrentConsumerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSessionGet", id)
	ret0, _ := ret[0].(sdk.AuthCurrentConsumerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthSessionGet indicates an expected call of AuthSessionGet.
func (mr *MockAuthClientMockRecorder) AuthSessionGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSessionGet", reflect.TypeOf((*MockAuthClient)(nil).AuthSessionGet), id)
}

// AuthSessionListByUser mocks base method.
func (m *MockAuthClient) AuthSessionListByUser(username string) (sdk.AuthSessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSessionListByUser", username)
	ret0, _ := ret[0].(sdk.AuthSessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthSessionListByUser indicates an expected call of AuthSessionListByUser.
func (mr *MockAuthClientMockRecorder) AuthSessionListByUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSessionListByUser", reflect.TypeOf((*MockAuthClient)(nil).AuthSessionListByUser), username)
}

// MockWebsocketClient is a mock of WebsocketClient interface.
type MockWebsocketClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketClientMockRecorder
}

// MockWebsocketClientMockRecorder is the mock recorder for MockWebsocketClient.
type MockWebsocketClientMockRecorder struct {
	mock *MockWebsocketClient
}

// NewMockWebsocketClient creates a new mock instance.
func NewMockWebsocketClient(ctrl *gomock.Controller) *MockWebsocketClient {
	mock := &MockWebsocketClient{ctrl: ctrl}
	mock.recorder = &MockWebsocketClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketClient) EXPECT() *MockWebsocketClientMockRecorder {
	return m.recorder
}

// RequestWebsocket mocks base method.
func (m *MockWebsocketClient) RequestWebsocket(ctx context.Context, goRoutines *sdk.GoRoutines, path string, msgToSend <-chan json.RawMessage, msgReceived chan<- json.RawMessage, errorReceived chan<- error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWebsocket", ctx, goRoutines, path, msgToSend, msgReceived, errorReceived)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWebsocket indicates an expected call of RequestWebsocket.
func (mr *MockWebsocketClientMockRecorder) RequestWebsocket(ctx, goRoutines, path, msgToSend, msgReceived, errorReceived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWebsocket", reflect.TypeOf((*MockWebsocketClient)(nil).RequestWebsocket), ctx, goRoutines, path, msgToSend, msgReceived, errorReceived)
}
