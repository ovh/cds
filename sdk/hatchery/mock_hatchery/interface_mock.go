// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mock_hatchery/interface_mock.go Interface
//

// Package mock_hatchery is a generated GoMock package.
package mock_hatchery

import (
	context "context"
	rsa "crypto/rsa"
	reflect "reflect"

	service "github.com/ovh/cds/engine/service"
	sdk "github.com/ovh/cds/sdk"
	cdsclient "github.com/ovh/cds/sdk/cdsclient"
	hatchery "github.com/ovh/cds/sdk/hatchery"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CDSClient mocks base method.
func (m *MockInterface) CDSClient() cdsclient.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDSClient")
	ret0, _ := ret[0].(cdsclient.Interface)
	return ret0
}

// CDSClient indicates an expected call of CDSClient.
func (mr *MockInterfaceMockRecorder) CDSClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDSClient", reflect.TypeOf((*MockInterface)(nil).CDSClient))
}

// CDSClientV2 mocks base method.
func (m *MockInterface) CDSClientV2() cdsclient.HatcheryServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDSClientV2")
	ret0, _ := ret[0].(cdsclient.HatcheryServiceClient)
	return ret0
}

// CDSClientV2 indicates an expected call of CDSClientV2.
func (mr *MockInterfaceMockRecorder) CDSClientV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDSClientV2", reflect.TypeOf((*MockInterface)(nil).CDSClientV2))
}

// CanSpawn mocks base method.
func (m *MockInterface) CanSpawn(ctx context.Context, model sdk.WorkerStarterWorkerModel, jobID string, requirements []sdk.Requirement) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSpawn", ctx, model, jobID, requirements)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanSpawn indicates an expected call of CanSpawn.
func (mr *MockInterfaceMockRecorder) CanSpawn(ctx, model, jobID, requirements any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSpawn", reflect.TypeOf((*MockInterface)(nil).CanSpawn), ctx, model, jobID, requirements)
}

// Configuration mocks base method.
func (m *MockInterface) Configuration() service.HatcheryCommonConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configuration")
	ret0, _ := ret[0].(service.HatcheryCommonConfiguration)
	return ret0
}

// Configuration indicates an expected call of Configuration.
func (mr *MockInterfaceMockRecorder) Configuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MockInterface)(nil).Configuration))
}

// GetGoRoutines mocks base method.
func (m *MockInterface) GetGoRoutines() *sdk.GoRoutines {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoRoutines")
	ret0, _ := ret[0].(*sdk.GoRoutines)
	return ret0
}

// GetGoRoutines indicates an expected call of GetGoRoutines.
func (mr *MockInterfaceMockRecorder) GetGoRoutines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoRoutines", reflect.TypeOf((*MockInterface)(nil).GetGoRoutines))
}

// GetMapPendingWorkerCreation mocks base method.
func (m *MockInterface) GetMapPendingWorkerCreation() *sdk.HatcheryPendingWorkerCreation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPendingWorkerCreation")
	ret0, _ := ret[0].(*sdk.HatcheryPendingWorkerCreation)
	return ret0
}

// GetMapPendingWorkerCreation indicates an expected call of GetMapPendingWorkerCreation.
func (mr *MockInterfaceMockRecorder) GetMapPendingWorkerCreation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPendingWorkerCreation", reflect.TypeOf((*MockInterface)(nil).GetMapPendingWorkerCreation))
}

// GetPrivateKey mocks base method.
func (m *MockInterface) GetPrivateKey() *rsa.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	return ret0
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockInterfaceMockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockInterface)(nil).GetPrivateKey))
}

// GetRegion mocks base method.
func (m *MockInterface) GetRegion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockInterfaceMockRecorder) GetRegion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockInterface)(nil).GetRegion))
}

// InitHatchery mocks base method.
func (m *MockInterface) InitHatchery(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitHatchery", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitHatchery indicates an expected call of InitHatchery.
func (mr *MockInterfaceMockRecorder) InitHatchery(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitHatchery", reflect.TypeOf((*MockInterface)(nil).InitHatchery), ctx)
}

// Name mocks base method.
func (m *MockInterface) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockInterfaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInterface)(nil).Name))
}

// Serve mocks base method.
func (m *MockInterface) Serve(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockInterfaceMockRecorder) Serve(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockInterface)(nil).Serve), ctx)
}

// Service mocks base method.
func (m *MockInterface) Service() *sdk.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(*sdk.Service)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockInterfaceMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockInterface)(nil).Service))
}

// SpawnWorker mocks base method.
func (m *MockInterface) SpawnWorker(ctx context.Context, spawnArgs hatchery.SpawnArguments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnWorker", ctx, spawnArgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpawnWorker indicates an expected call of SpawnWorker.
func (mr *MockInterfaceMockRecorder) SpawnWorker(ctx, spawnArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnWorker", reflect.TypeOf((*MockInterface)(nil).SpawnWorker), ctx, spawnArgs)
}

// Type mocks base method.
func (m *MockInterface) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockInterfaceMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockInterface)(nil).Type))
}

// WorkersStarted mocks base method.
func (m *MockInterface) WorkersStarted(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkersStarted", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkersStarted indicates an expected call of WorkersStarted.
func (mr *MockInterfaceMockRecorder) WorkersStarted(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkersStarted", reflect.TypeOf((*MockInterface)(nil).WorkersStarted), ctx)
}

// MockInterfaceWithModels is a mock of InterfaceWithModels interface.
type MockInterfaceWithModels struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceWithModelsMockRecorder
	isgomock struct{}
}

// MockInterfaceWithModelsMockRecorder is the mock recorder for MockInterfaceWithModels.
type MockInterfaceWithModelsMockRecorder struct {
	mock *MockInterfaceWithModels
}

// NewMockInterfaceWithModels creates a new mock instance.
func NewMockInterfaceWithModels(ctrl *gomock.Controller) *MockInterfaceWithModels {
	mock := &MockInterfaceWithModels{ctrl: ctrl}
	mock.recorder = &MockInterfaceWithModelsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceWithModels) EXPECT() *MockInterfaceWithModelsMockRecorder {
	return m.recorder
}

// CDSClient mocks base method.
func (m *MockInterfaceWithModels) CDSClient() cdsclient.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDSClient")
	ret0, _ := ret[0].(cdsclient.Interface)
	return ret0
}

// CDSClient indicates an expected call of CDSClient.
func (mr *MockInterfaceWithModelsMockRecorder) CDSClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDSClient", reflect.TypeOf((*MockInterfaceWithModels)(nil).CDSClient))
}

// CDSClientV2 mocks base method.
func (m *MockInterfaceWithModels) CDSClientV2() cdsclient.HatcheryServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDSClientV2")
	ret0, _ := ret[0].(cdsclient.HatcheryServiceClient)
	return ret0
}

// CDSClientV2 indicates an expected call of CDSClientV2.
func (mr *MockInterfaceWithModelsMockRecorder) CDSClientV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDSClientV2", reflect.TypeOf((*MockInterfaceWithModels)(nil).CDSClientV2))
}

// CanAllocateResources mocks base method.
func (m *MockInterfaceWithModels) CanAllocateResources(ctx context.Context, model sdk.WorkerStarterWorkerModel, jobID string, requirements []sdk.Requirement) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanAllocateResources", ctx, model, jobID, requirements)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanAllocateResources indicates an expected call of CanAllocateResources.
func (mr *MockInterfaceWithModelsMockRecorder) CanAllocateResources(ctx, model, jobID, requirements any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanAllocateResources", reflect.TypeOf((*MockInterfaceWithModels)(nil).CanAllocateResources), ctx, model, jobID, requirements)
}

// CanSpawn mocks base method.
func (m *MockInterfaceWithModels) CanSpawn(ctx context.Context, model sdk.WorkerStarterWorkerModel, jobID string, requirements []sdk.Requirement) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSpawn", ctx, model, jobID, requirements)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanSpawn indicates an expected call of CanSpawn.
func (mr *MockInterfaceWithModelsMockRecorder) CanSpawn(ctx, model, jobID, requirements any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSpawn", reflect.TypeOf((*MockInterfaceWithModels)(nil).CanSpawn), ctx, model, jobID, requirements)
}

// Configuration mocks base method.
func (m *MockInterfaceWithModels) Configuration() service.HatcheryCommonConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configuration")
	ret0, _ := ret[0].(service.HatcheryCommonConfiguration)
	return ret0
}

// Configuration indicates an expected call of Configuration.
func (mr *MockInterfaceWithModelsMockRecorder) Configuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MockInterfaceWithModels)(nil).Configuration))
}

// GetGoRoutines mocks base method.
func (m *MockInterfaceWithModels) GetGoRoutines() *sdk.GoRoutines {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoRoutines")
	ret0, _ := ret[0].(*sdk.GoRoutines)
	return ret0
}

// GetGoRoutines indicates an expected call of GetGoRoutines.
func (mr *MockInterfaceWithModelsMockRecorder) GetGoRoutines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoRoutines", reflect.TypeOf((*MockInterfaceWithModels)(nil).GetGoRoutines))
}

// GetMapPendingWorkerCreation mocks base method.
func (m *MockInterfaceWithModels) GetMapPendingWorkerCreation() *sdk.HatcheryPendingWorkerCreation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPendingWorkerCreation")
	ret0, _ := ret[0].(*sdk.HatcheryPendingWorkerCreation)
	return ret0
}

// GetMapPendingWorkerCreation indicates an expected call of GetMapPendingWorkerCreation.
func (mr *MockInterfaceWithModelsMockRecorder) GetMapPendingWorkerCreation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPendingWorkerCreation", reflect.TypeOf((*MockInterfaceWithModels)(nil).GetMapPendingWorkerCreation))
}

// GetPrivateKey mocks base method.
func (m *MockInterfaceWithModels) GetPrivateKey() *rsa.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	return ret0
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockInterfaceWithModelsMockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockInterfaceWithModels)(nil).GetPrivateKey))
}

// GetRegion mocks base method.
func (m *MockInterfaceWithModels) GetRegion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockInterfaceWithModelsMockRecorder) GetRegion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockInterfaceWithModels)(nil).GetRegion))
}

// InitHatchery mocks base method.
func (m *MockInterfaceWithModels) InitHatchery(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitHatchery", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitHatchery indicates an expected call of InitHatchery.
func (mr *MockInterfaceWithModelsMockRecorder) InitHatchery(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitHatchery", reflect.TypeOf((*MockInterfaceWithModels)(nil).InitHatchery), ctx)
}

// ModelType mocks base method.
func (m *MockInterfaceWithModels) ModelType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelType indicates an expected call of ModelType.
func (mr *MockInterfaceWithModelsMockRecorder) ModelType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelType", reflect.TypeOf((*MockInterfaceWithModels)(nil).ModelType))
}

// Name mocks base method.
func (m *MockInterfaceWithModels) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockInterfaceWithModelsMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInterfaceWithModels)(nil).Name))
}

// NeedRegistration mocks base method.
func (m *MockInterfaceWithModels) NeedRegistration(ctx context.Context, model *sdk.Model) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedRegistration", ctx, model)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedRegistration indicates an expected call of NeedRegistration.
func (mr *MockInterfaceWithModelsMockRecorder) NeedRegistration(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedRegistration", reflect.TypeOf((*MockInterfaceWithModels)(nil).NeedRegistration), ctx, model)
}

// Serve mocks base method.
func (m *MockInterfaceWithModels) Serve(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockInterfaceWithModelsMockRecorder) Serve(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockInterfaceWithModels)(nil).Serve), ctx)
}

// Service mocks base method.
func (m *MockInterfaceWithModels) Service() *sdk.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(*sdk.Service)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockInterfaceWithModelsMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockInterfaceWithModels)(nil).Service))
}

// SpawnWorker mocks base method.
func (m *MockInterfaceWithModels) SpawnWorker(ctx context.Context, spawnArgs hatchery.SpawnArguments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnWorker", ctx, spawnArgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpawnWorker indicates an expected call of SpawnWorker.
func (mr *MockInterfaceWithModelsMockRecorder) SpawnWorker(ctx, spawnArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnWorker", reflect.TypeOf((*MockInterfaceWithModels)(nil).SpawnWorker), ctx, spawnArgs)
}

// Type mocks base method.
func (m *MockInterfaceWithModels) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockInterfaceWithModelsMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockInterfaceWithModels)(nil).Type))
}

// WorkerModelSecretList mocks base method.
func (m *MockInterfaceWithModels) WorkerModelSecretList(arg0 sdk.Model) (sdk.WorkerModelSecrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelSecretList", arg0)
	ret0, _ := ret[0].(sdk.WorkerModelSecrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelSecretList indicates an expected call of WorkerModelSecretList.
func (mr *MockInterfaceWithModelsMockRecorder) WorkerModelSecretList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelSecretList", reflect.TypeOf((*MockInterfaceWithModels)(nil).WorkerModelSecretList), arg0)
}

// WorkerModelsEnabled mocks base method.
func (m *MockInterfaceWithModels) WorkerModelsEnabled() ([]sdk.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerModelsEnabled")
	ret0, _ := ret[0].([]sdk.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerModelsEnabled indicates an expected call of WorkerModelsEnabled.
func (mr *MockInterfaceWithModelsMockRecorder) WorkerModelsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerModelsEnabled", reflect.TypeOf((*MockInterfaceWithModels)(nil).WorkerModelsEnabled))
}

// WorkersStarted mocks base method.
func (m *MockInterfaceWithModels) WorkersStarted(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkersStarted", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkersStarted indicates an expected call of WorkersStarted.
func (mr *MockInterfaceWithModelsMockRecorder) WorkersStarted(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkersStarted", reflect.TypeOf((*MockInterfaceWithModels)(nil).WorkersStarted), ctx)
}

// MockInterfaceWithDetaultWorkerModelV2 is a mock of InterfaceWithDetaultWorkerModelV2 interface.
type MockInterfaceWithDetaultWorkerModelV2 struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceWithDetaultWorkerModelV2MockRecorder
	isgomock struct{}
}

// MockInterfaceWithDetaultWorkerModelV2MockRecorder is the mock recorder for MockInterfaceWithDetaultWorkerModelV2.
type MockInterfaceWithDetaultWorkerModelV2MockRecorder struct {
	mock *MockInterfaceWithDetaultWorkerModelV2
}

// NewMockInterfaceWithDetaultWorkerModelV2 creates a new mock instance.
func NewMockInterfaceWithDetaultWorkerModelV2(ctrl *gomock.Controller) *MockInterfaceWithDetaultWorkerModelV2 {
	mock := &MockInterfaceWithDetaultWorkerModelV2{ctrl: ctrl}
	mock.recorder = &MockInterfaceWithDetaultWorkerModelV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceWithDetaultWorkerModelV2) EXPECT() *MockInterfaceWithDetaultWorkerModelV2MockRecorder {
	return m.recorder
}

// CDSClient mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) CDSClient() cdsclient.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDSClient")
	ret0, _ := ret[0].(cdsclient.Interface)
	return ret0
}

// CDSClient indicates an expected call of CDSClient.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) CDSClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDSClient", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).CDSClient))
}

// CDSClientV2 mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) CDSClientV2() cdsclient.HatcheryServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDSClientV2")
	ret0, _ := ret[0].(cdsclient.HatcheryServiceClient)
	return ret0
}

// CDSClientV2 indicates an expected call of CDSClientV2.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) CDSClientV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDSClientV2", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).CDSClientV2))
}

// CanSpawn mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) CanSpawn(ctx context.Context, model sdk.WorkerStarterWorkerModel, jobID string, requirements []sdk.Requirement) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSpawn", ctx, model, jobID, requirements)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanSpawn indicates an expected call of CanSpawn.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) CanSpawn(ctx, model, jobID, requirements any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSpawn", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).CanSpawn), ctx, model, jobID, requirements)
}

// Configuration mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) Configuration() service.HatcheryCommonConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configuration")
	ret0, _ := ret[0].(service.HatcheryCommonConfiguration)
	return ret0
}

// Configuration indicates an expected call of Configuration.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) Configuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).Configuration))
}

// GetDetaultModelV2Name mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) GetDetaultModelV2Name(ctx context.Context, requirements []sdk.Requirement) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetaultModelV2Name", ctx, requirements)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDetaultModelV2Name indicates an expected call of GetDetaultModelV2Name.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) GetDetaultModelV2Name(ctx, requirements any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetaultModelV2Name", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).GetDetaultModelV2Name), ctx, requirements)
}

// GetGoRoutines mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) GetGoRoutines() *sdk.GoRoutines {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoRoutines")
	ret0, _ := ret[0].(*sdk.GoRoutines)
	return ret0
}

// GetGoRoutines indicates an expected call of GetGoRoutines.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) GetGoRoutines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoRoutines", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).GetGoRoutines))
}

// GetMapPendingWorkerCreation mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) GetMapPendingWorkerCreation() *sdk.HatcheryPendingWorkerCreation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPendingWorkerCreation")
	ret0, _ := ret[0].(*sdk.HatcheryPendingWorkerCreation)
	return ret0
}

// GetMapPendingWorkerCreation indicates an expected call of GetMapPendingWorkerCreation.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) GetMapPendingWorkerCreation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPendingWorkerCreation", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).GetMapPendingWorkerCreation))
}

// GetPrivateKey mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) GetPrivateKey() *rsa.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	return ret0
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).GetPrivateKey))
}

// GetRegion mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) GetRegion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) GetRegion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).GetRegion))
}

// InitHatchery mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) InitHatchery(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitHatchery", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitHatchery indicates an expected call of InitHatchery.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) InitHatchery(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitHatchery", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).InitHatchery), ctx)
}

// Name mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).Name))
}

// Serve mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) Serve(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) Serve(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).Serve), ctx)
}

// Service mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) Service() *sdk.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(*sdk.Service)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).Service))
}

// SpawnWorker mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) SpawnWorker(ctx context.Context, spawnArgs hatchery.SpawnArguments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnWorker", ctx, spawnArgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpawnWorker indicates an expected call of SpawnWorker.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) SpawnWorker(ctx, spawnArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnWorker", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).SpawnWorker), ctx, spawnArgs)
}

// Type mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).Type))
}

// WorkersStarted mocks base method.
func (m *MockInterfaceWithDetaultWorkerModelV2) WorkersStarted(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkersStarted", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkersStarted indicates an expected call of WorkersStarted.
func (mr *MockInterfaceWithDetaultWorkerModelV2MockRecorder) WorkersStarted(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkersStarted", reflect.TypeOf((*MockInterfaceWithDetaultWorkerModelV2)(nil).WorkersStarted), ctx)
}
