// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson467004acDecodeGithubComOvhCdsSdk(in *jlexer.Lexer, out *EventEnvironmentVariableUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_variable":
			easyjson467004acDecodeGithubComOvhCdsSdk1(in, &out.OldVariable)
		case "new_variable":
			easyjson467004acDecodeGithubComOvhCdsSdk1(in, &out.NewVariable)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk(out *jwriter.Writer, in EventEnvironmentVariableUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk1(out, in.OldVariable)
	}
	{
		const prefix string = ",\"new_variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk1(out, in.NewVariable)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentVariableUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentVariableUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentVariableUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentVariableUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk1(in *jlexer.Lexer, out *Variable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk1(out *jwriter.Writer, in Variable) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk2(in *jlexer.Lexer, out *EventEnvironmentVariableDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variable":
			easyjson467004acDecodeGithubComOvhCdsSdk1(in, &out.Variable)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk2(out *jwriter.Writer, in EventEnvironmentVariableDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk1(out, in.Variable)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentVariableDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentVariableDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentVariableDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentVariableDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk2(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk3(in *jlexer.Lexer, out *EventEnvironmentVariableAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variable":
			easyjson467004acDecodeGithubComOvhCdsSdk1(in, &out.Variable)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk3(out *jwriter.Writer, in EventEnvironmentVariableAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk1(out, in.Variable)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentVariableAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentVariableAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentVariableAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentVariableAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk3(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk4(in *jlexer.Lexer, out *EventEnvironmentUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_name":
			out.OldName = string(in.String())
		case "new_name":
			out.NewName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk4(out *jwriter.Writer, in EventEnvironmentUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OldName))
	}
	{
		const prefix string = ",\"new_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk4(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk5(in *jlexer.Lexer, out *EventEnvironmentPermissionUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_group_permission":
			easyjson467004acDecodeGithubComOvhCdsSdk6(in, &out.OldPermission)
		case "new_group_permission":
			easyjson467004acDecodeGithubComOvhCdsSdk6(in, &out.NewPermission)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk5(out *jwriter.Writer, in EventEnvironmentPermissionUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_group_permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk6(out, in.OldPermission)
	}
	{
		const prefix string = ",\"new_group_permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk6(out, in.NewPermission)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentPermissionUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentPermissionUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentPermissionUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentPermissionUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk5(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk6(in *jlexer.Lexer, out *GroupPermission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			easyjson467004acDecodeGithubComOvhCdsSdk7(in, &out.Group)
		case "permission":
			out.Permission = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk6(out *jwriter.Writer, in GroupPermission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk7(out, in.Group)
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk7(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]User, 0, 1)
					} else {
						out.Admins = []User{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v1 User
					easyjson467004acDecodeGithubComOvhCdsSdk8(in, &v1)
					out.Admins = append(out.Admins, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]User, 0, 1)
					} else {
						out.Users = []User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v2 User
					easyjson467004acDecodeGithubComOvhCdsSdk8(in, &v2)
					out.Users = append(out.Users, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]Token, 0, 1)
					} else {
						out.Tokens = []Token{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Token
					easyjson467004acDecodeGithubComOvhCdsSdk9(in, &v3)
					out.Tokens = append(out.Tokens, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk7(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Admins) != 0 {
		const prefix string = ",\"admins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.Admins {
				if v4 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk8(out, v5)
			}
			out.RawByte(']')
		}
	}
	if len(in.Users) != 0 {
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Users {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk8(out, v7)
			}
			out.RawByte(']')
		}
	}
	if len(in.Tokens) != 0 {
		const prefix string = ",\"tokens\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Tokens {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk9(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk9(in *jlexer.Lexer, out *Token) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "group_id":
			out.GroupID = int64(in.Int64())
		case "group_name":
			out.GroupName = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "creator":
			out.Creator = string(in.String())
		case "expiration":
			out.Expiration = Expiration(in.Int())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk9(out *jwriter.Writer, in Token) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.GroupID))
	}
	{
		const prefix string = ",\"group_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GroupName))
	}
	{
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	{
		const prefix string = ",\"expiration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Expiration))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk8(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "username":
			out.Username = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "admin":
			out.Admin = bool(in.Bool())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]Group, 0, 1)
					} else {
						out.Groups = []Group{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Group
					easyjson467004acDecodeGithubComOvhCdsSdk7(in, &v10)
					out.Groups = append(out.Groups, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "origin":
			out.Origin = string(in.String())
		case "favorites":
			if in.IsNull() {
				in.Skip()
				out.Favorites = nil
			} else {
				in.Delim('[')
				if out.Favorites == nil {
					if !in.IsDelim(']') {
						out.Favorites = make([]Favorite, 0, 1)
					} else {
						out.Favorites = []Favorite{}
					}
				} else {
					out.Favorites = (out.Favorites)[:0]
				}
				for !in.IsDelim(']') {
					var v11 Favorite
					easyjson467004acDecodeGithubComOvhCdsSdk10(in, &v11)
					out.Favorites = append(out.Favorites, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Permissions).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk8(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Admin))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Groups {
				if v12 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk7(out, v13)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"favorites\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Favorites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Favorites {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk10(out, v15)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Permissions).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk10(in *jlexer.Lexer, out *Favorite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project_ids":
			if in.IsNull() {
				in.Skip()
				out.ProjectIDs = nil
			} else {
				in.Delim('[')
				if out.ProjectIDs == nil {
					if !in.IsDelim(']') {
						out.ProjectIDs = make([]int64, 0, 8)
					} else {
						out.ProjectIDs = []int64{}
					}
				} else {
					out.ProjectIDs = (out.ProjectIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v16 int64
					v16 = int64(in.Int64())
					out.ProjectIDs = append(out.ProjectIDs, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workflow_ids":
			if in.IsNull() {
				in.Skip()
				out.WorkflowIDs = nil
			} else {
				in.Delim('[')
				if out.WorkflowIDs == nil {
					if !in.IsDelim(']') {
						out.WorkflowIDs = make([]int64, 0, 8)
					} else {
						out.WorkflowIDs = []int64{}
					}
				} else {
					out.WorkflowIDs = (out.WorkflowIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v17 int64
					v17 = int64(in.Int64())
					out.WorkflowIDs = append(out.WorkflowIDs, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk10(out *jwriter.Writer, in Favorite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProjectIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.ProjectIDs {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"workflow_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.WorkflowIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.WorkflowIDs {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk11(in *jlexer.Lexer, out *EventEnvironmentPermissionDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_permission":
			easyjson467004acDecodeGithubComOvhCdsSdk6(in, &out.Permission)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk11(out *jwriter.Writer, in EventEnvironmentPermissionDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk6(out, in.Permission)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentPermissionDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentPermissionDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentPermissionDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentPermissionDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk11(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk12(in *jlexer.Lexer, out *EventEnvironmentPermissionAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_permission":
			easyjson467004acDecodeGithubComOvhCdsSdk6(in, &out.Permission)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk12(out *jwriter.Writer, in EventEnvironmentPermissionAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk6(out, in.Permission)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentPermissionAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentPermissionAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentPermissionAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentPermissionAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk12(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk13(in *jlexer.Lexer, out *EventEnvironmentKeyDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			easyjson467004acDecodeGithubComOvhCdsSdk14(in, &out.Key)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk13(out *jwriter.Writer, in EventEnvironmentKeyDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk14(out, in.Key)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentKeyDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentKeyDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentKeyDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentKeyDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk13(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk14(in *jlexer.Lexer, out *EnvironmentKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "environment_id":
			out.EnvironmentID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "public":
			out.Public = string(in.String())
		case "private":
			out.Private = string(in.String())
		case "keyID":
			out.KeyID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk14(out *jwriter.Writer, in EnvironmentKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"environment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EnvironmentID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Public))
	}
	{
		const prefix string = ",\"private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Private))
	}
	{
		const prefix string = ",\"keyID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk15(in *jlexer.Lexer, out *EventEnvironmentKeyAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			easyjson467004acDecodeGithubComOvhCdsSdk14(in, &out.Key)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk15(out *jwriter.Writer, in EventEnvironmentKeyAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk14(out, in.Key)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentKeyAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentKeyAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentKeyAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentKeyAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk15(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk16(in *jlexer.Lexer, out *EventEnvironmentDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk16(out *jwriter.Writer, in EventEnvironmentDelete) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk16(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk17(in *jlexer.Lexer, out *EventEnvironmentAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Variable = nil
			} else {
				in.Delim('[')
				if out.Variable == nil {
					if !in.IsDelim(']') {
						out.Variable = make([]Variable, 0, 1)
					} else {
						out.Variable = []Variable{}
					}
				} else {
					out.Variable = (out.Variable)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Variable
					easyjson467004acDecodeGithubComOvhCdsSdk1(in, &v22)
					out.Variable = append(out.Variable, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "project_key":
			out.ProjectKey = string(in.String())
		case "permission":
			out.Permission = int(in.Int())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]EnvironmentKey, 0, 1)
					} else {
						out.Keys = []EnvironmentKey{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v23 EnvironmentKey
					easyjson467004acDecodeGithubComOvhCdsSdk14(in, &v23)
					out.Keys = append(out.Keys, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk18(in, out.Usage)
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk17(out *jwriter.Writer, in EventEnvironmentAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Variable) != 0 {
		const prefix string = ",\"variables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Variable {
				if v24 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk1(out, v25)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"keys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Keys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Keys {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk14(out, v27)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk18(out, *in.Usage)
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEnvironmentAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson467004acEncodeGithubComOvhCdsSdk17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEnvironmentAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson467004acEncodeGithubComOvhCdsSdk17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEnvironmentAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson467004acDecodeGithubComOvhCdsSdk17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEnvironmentAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson467004acDecodeGithubComOvhCdsSdk17(l, v)
}
func easyjson467004acDecodeGithubComOvhCdsSdk18(in *jlexer.Lexer, out *Usage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflows":
			if in.IsNull() {
				in.Skip()
				out.Workflows = nil
			} else {
				in.Delim('[')
				if out.Workflows == nil {
					if !in.IsDelim(']') {
						out.Workflows = make([]Workflow, 0, 1)
					} else {
						out.Workflows = []Workflow{}
					}
				} else {
					out.Workflows = (out.Workflows)[:0]
				}
				for !in.IsDelim(']') {
					var v28 Workflow
					easyjson467004acDecodeGithubComOvhCdsSdk19(in, &v28)
					out.Workflows = append(out.Workflows, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
				out.Environments = nil
			} else {
				in.Delim('[')
				if out.Environments == nil {
					if !in.IsDelim(']') {
						out.Environments = make([]Environment, 0, 1)
					} else {
						out.Environments = []Environment{}
					}
				} else {
					out.Environments = (out.Environments)[:0]
				}
				for !in.IsDelim(']') {
					var v29 Environment
					easyjson467004acDecodeGithubComOvhCdsSdk20(in, &v29)
					out.Environments = append(out.Environments, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pipelines":
			if in.IsNull() {
				in.Skip()
				out.Pipelines = nil
			} else {
				in.Delim('[')
				if out.Pipelines == nil {
					if !in.IsDelim(']') {
						out.Pipelines = make([]Pipeline, 0, 1)
					} else {
						out.Pipelines = []Pipeline{}
					}
				} else {
					out.Pipelines = (out.Pipelines)[:0]
				}
				for !in.IsDelim(']') {
					var v30 Pipeline
					easyjson467004acDecodeGithubComOvhCdsSdk21(in, &v30)
					out.Pipelines = append(out.Pipelines, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "applications":
			if in.IsNull() {
				in.Skip()
				out.Applications = nil
			} else {
				in.Delim('[')
				if out.Applications == nil {
					if !in.IsDelim(']') {
						out.Applications = make([]Application, 0, 1)
					} else {
						out.Applications = []Application{}
					}
				} else {
					out.Applications = (out.Applications)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Application
					easyjson467004acDecodeGithubComOvhCdsSdk22(in, &v31)
					out.Applications = append(out.Applications, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk18(out *jwriter.Writer, in Usage) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Workflows) != 0 {
		const prefix string = ",\"workflows\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Workflows {
				if v32 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk19(out, v33)
			}
			out.RawByte(']')
		}
	}
	if len(in.Environments) != 0 {
		const prefix string = ",\"environments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.Environments {
				if v34 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk20(out, v35)
			}
			out.RawByte(']')
		}
	}
	if len(in.Pipelines) != 0 {
		const prefix string = ",\"pipelines\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.Pipelines {
				if v36 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk21(out, v37)
			}
			out.RawByte(']')
		}
	}
	if len(in.Applications) != 0 {
		const prefix string = ",\"applications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Applications {
				if v38 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk22(out, v39)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk22(in *jlexer.Lexer, out *Application) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "project_key":
			out.ProjectKey = string(in.String())
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Variable = nil
			} else {
				in.Delim('[')
				if out.Variable == nil {
					if !in.IsDelim(']') {
						out.Variable = make([]Variable, 0, 1)
					} else {
						out.Variable = []Variable{}
					}
				} else {
					out.Variable = (out.Variable)[:0]
				}
				for !in.IsDelim(']') {
					var v40 Variable
					easyjson467004acDecodeGithubComOvhCdsSdk1(in, &v40)
					out.Variable = append(out.Variable, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permission":
			out.Permission = int(in.Int())
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				in.Delim('[')
				if out.Notifications == nil {
					if !in.IsDelim(']') {
						out.Notifications = make([]UserNotification, 0, 1)
					} else {
						out.Notifications = []UserNotification{}
					}
				} else {
					out.Notifications = (out.Notifications)[:0]
				}
				for !in.IsDelim(']') {
					var v41 UserNotification
					easyjson467004acDecodeGithubComOvhCdsSdk23(in, &v41)
					out.Notifications = append(out.Notifications, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_modified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		case "vcs_server":
			out.VCSServer = string(in.String())
		case "repository_fullname":
			out.RepositoryFullname = string(in.String())
		case "vcs_strategy":
			easyjson467004acDecodeGithubComOvhCdsSdk24(in, &out.RepositoryStrategy)
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(Metadata)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v42 string
					v42 = string(in.String())
					(out.Metadata)[key] = v42
					in.WantComma()
				}
				in.Delim('}')
			}
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]ApplicationKey, 0, 1)
					} else {
						out.Keys = []ApplicationKey{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v43 ApplicationKey
					easyjson467004acDecodeGithubComOvhCdsSdk25(in, &v43)
					out.Keys = append(out.Keys, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk18(in, out.Usage)
			}
		case "deployment_strategies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DeploymentStrategies = make(map[string]IntegrationConfig)
				} else {
					out.DeploymentStrategies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v44 IntegrationConfig
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v44 = make(IntegrationConfig)
						} else {
							v44 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v45 IntegrationConfigValue
							easyjson467004acDecodeGithubComOvhCdsSdk26(in, &v45)
							(v44)[key] = v45
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.DeploymentStrategies)[key] = v44
					in.WantComma()
				}
				in.Delim('}')
			}
		case "vulnerabilities":
			if in.IsNull() {
				in.Skip()
				out.Vulnerabilities = nil
			} else {
				in.Delim('[')
				if out.Vulnerabilities == nil {
					if !in.IsDelim(']') {
						out.Vulnerabilities = make([]Vulnerability, 0, 1)
					} else {
						out.Vulnerabilities = []Vulnerability{}
					}
				} else {
					out.Vulnerabilities = (out.Vulnerabilities)[:0]
				}
				for !in.IsDelim(']') {
					var v46 Vulnerability
					easyjson467004acDecodeGithubComOvhCdsSdk27(in, &v46)
					out.Vulnerabilities = append(out.Vulnerabilities, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk22(out *jwriter.Writer, in Application) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	if len(in.Variable) != 0 {
		const prefix string = ",\"variables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Variable {
				if v47 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk1(out, v48)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	if len(in.Notifications) != 0 {
		const prefix string = ",\"notifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.Notifications {
				if v49 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk23(out, v50)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastModified).MarshalJSON())
	}
	if in.VCSServer != "" {
		const prefix string = ",\"vcs_server\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VCSServer))
	}
	if in.RepositoryFullname != "" {
		const prefix string = ",\"repository_fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RepositoryFullname))
	}
	if true {
		const prefix string = ",\"vcs_strategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk24(out, in.RepositoryStrategy)
	}
	{
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v51First := true
			for v51Name, v51Value := range in.Metadata {
				if v51First {
					v51First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v51Name))
				out.RawByte(':')
				out.String(string(v51Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"keys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Keys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.Keys {
				if v52 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk25(out, v53)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk18(out, *in.Usage)
	}
	if len(in.DeploymentStrategies) != 0 {
		const prefix string = ",\"deployment_strategies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v54First := true
			for v54Name, v54Value := range in.DeploymentStrategies {
				if v54First {
					v54First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v54Name))
				out.RawByte(':')
				if v54Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v55First := true
					for v55Name, v55Value := range v54Value {
						if v55First {
							v55First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v55Name))
						out.RawByte(':')
						easyjson467004acEncodeGithubComOvhCdsSdk26(out, v55Value)
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Vulnerabilities) != 0 {
		const prefix string = ",\"vulnerabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Vulnerabilities {
				if v56 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk27(out, v57)
			}
			out.RawByte(']')
		}
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk27(in *jlexer.Lexer, out *Vulnerability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "cve":
			out.CVE = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "component":
			out.Component = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "origin":
			out.Origin = string(in.String())
		case "severity":
			out.Severity = string(in.String())
		case "fix_in":
			out.FixIn = string(in.String())
		case "ignored":
			out.Ignored = bool(in.Bool())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk27(out *jwriter.Writer, in Vulnerability) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"application_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"cve\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CVE))
	}
	{
		const prefix string = ",\"link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"component\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Component))
	}
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"origin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"severity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Severity))
	}
	{
		const prefix string = ",\"fix_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FixIn))
	}
	{
		const prefix string = ",\"ignored\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ignored))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk26(in *jlexer.Lexer, out *IntegrationConfigValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk26(out *jwriter.Writer, in IntegrationConfigValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk25(in *jlexer.Lexer, out *ApplicationKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "public":
			out.Public = string(in.String())
		case "private":
			out.Private = string(in.String())
		case "keyID":
			out.KeyID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk25(out *jwriter.Writer, in ApplicationKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"application_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Public))
	}
	{
		const prefix string = ",\"private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Private))
	}
	{
		const prefix string = ",\"keyID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk24(in *jlexer.Lexer, out *RepositoryStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "connection_type":
			out.ConnectionType = string(in.String())
		case "ssh_key":
			out.SSHKey = string(in.String())
		case "ssh_key_content":
			out.SSHKeyContent = string(in.String())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "branch":
			out.Branch = string(in.String())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "pgp_key":
			out.PGPKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk24(out *jwriter.Writer, in RepositoryStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"connection_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConnectionType))
	}
	{
		const prefix string = ",\"ssh_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSHKey))
	}
	if in.SSHKeyContent != "" {
		const prefix string = ",\"ssh_key_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSHKeyContent))
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Branch != "" {
		const prefix string = ",\"branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Branch))
	}
	if in.DefaultBranch != "" {
		const prefix string = ",\"default_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultBranch))
	}
	{
		const prefix string = ",\"pgp_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PGPKey))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk23(in *jlexer.Lexer, out *UserNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "application_pipeline_id":
			out.ApplicationPipelineID = int64(in.Int64())
		case "pipeline":
			easyjson467004acDecodeGithubComOvhCdsSdk21(in, &out.Pipeline)
		case "environment":
			easyjson467004acDecodeGithubComOvhCdsSdk20(in, &out.Environment)
		case "notifications":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Notifications = make(map[string]UserNotificationSettings)
				} else {
					out.Notifications = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v58 UserNotificationSettings
					easyjson467004acDecodeGithubComOvhCdsSdk28(in, &v58)
					(out.Notifications)[key] = v58
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk23(out *jwriter.Writer, in UserNotification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"application_pipeline_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ApplicationPipelineID))
	}
	{
		const prefix string = ",\"pipeline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk21(out, in.Pipeline)
	}
	{
		const prefix string = ",\"environment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk20(out, in.Environment)
	}
	{
		const prefix string = ",\"notifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Notifications == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v59First := true
			for v59Name, v59Value := range in.Notifications {
				if v59First {
					v59First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v59Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk28(out, v59Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk28(in *jlexer.Lexer, out *UserNotificationSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "on_success":
			out.OnSuccess = string(in.String())
		case "on_failure":
			out.OnFailure = string(in.String())
		case "on_start":
			if in.IsNull() {
				in.Skip()
				out.OnStart = nil
			} else {
				if out.OnStart == nil {
					out.OnStart = new(bool)
				}
				*out.OnStart = bool(in.Bool())
			}
		case "send_to_groups":
			if in.IsNull() {
				in.Skip()
				out.SendToGroups = nil
			} else {
				if out.SendToGroups == nil {
					out.SendToGroups = new(bool)
				}
				*out.SendToGroups = bool(in.Bool())
			}
		case "send_to_author":
			if in.IsNull() {
				in.Skip()
				out.SendToAuthor = nil
			} else {
				if out.SendToAuthor == nil {
					out.SendToAuthor = new(bool)
				}
				*out.SendToAuthor = bool(in.Bool())
			}
		case "recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]string, 0, 4)
					} else {
						out.Recipients = []string{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v60 string
					v60 = string(in.String())
					out.Recipients = append(out.Recipients, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "template":
			if in.IsNull() {
				in.Skip()
				out.Template = nil
			} else {
				if out.Template == nil {
					out.Template = new(UserNotificationTemplate)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk29(in, out.Template)
			}
		case "conditions":
			easyjson467004acDecodeGithubComOvhCdsSdk30(in, &out.Conditions)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk28(out *jwriter.Writer, in UserNotificationSettings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OnSuccess != "" {
		const prefix string = ",\"on_success\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnSuccess))
	}
	if in.OnFailure != "" {
		const prefix string = ",\"on_failure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnFailure))
	}
	if in.OnStart != nil {
		const prefix string = ",\"on_start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.OnStart))
	}
	if in.SendToGroups != nil {
		const prefix string = ",\"send_to_groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SendToGroups))
	}
	if in.SendToAuthor != nil {
		const prefix string = ",\"send_to_author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.SendToAuthor))
	}
	if len(in.Recipients) != 0 {
		const prefix string = ",\"recipients\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v61, v62 := range in.Recipients {
				if v61 > 0 {
					out.RawByte(',')
				}
				out.String(string(v62))
			}
			out.RawByte(']')
		}
	}
	if in.Template != nil {
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk29(out, *in.Template)
	}
	if true {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk30(out, in.Conditions)
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk30(in *jlexer.Lexer, out *WorkflowNodeConditions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "plain":
			if in.IsNull() {
				in.Skip()
				out.PlainConditions = nil
			} else {
				in.Delim('[')
				if out.PlainConditions == nil {
					if !in.IsDelim(']') {
						out.PlainConditions = make([]WorkflowNodeCondition, 0, 1)
					} else {
						out.PlainConditions = []WorkflowNodeCondition{}
					}
				} else {
					out.PlainConditions = (out.PlainConditions)[:0]
				}
				for !in.IsDelim(']') {
					var v63 WorkflowNodeCondition
					easyjson467004acDecodeGithubComOvhCdsSdk31(in, &v63)
					out.PlainConditions = append(out.PlainConditions, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lua_script":
			out.LuaScript = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk30(out *jwriter.Writer, in WorkflowNodeConditions) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PlainConditions) != 0 {
		const prefix string = ",\"plain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v64, v65 := range in.PlainConditions {
				if v64 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk31(out, v65)
			}
			out.RawByte(']')
		}
	}
	if in.LuaScript != "" {
		const prefix string = ",\"lua_script\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LuaScript))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk31(in *jlexer.Lexer, out *WorkflowNodeCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variable":
			out.Variable = string(in.String())
		case "operator":
			out.Operator = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk31(out *jwriter.Writer, in WorkflowNodeCondition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Variable))
	}
	{
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operator))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk29(in *jlexer.Lexer, out *UserNotificationTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subject":
			out.Subject = string(in.String())
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk29(out *jwriter.Writer, in UserNotificationTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Subject != "" {
		const prefix string = ",\"subject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk21(in *jlexer.Lexer, out *Pipeline) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "projectKey":
			out.ProjectKey = string(in.String())
		case "stages":
			if in.IsNull() {
				in.Skip()
				out.Stages = nil
			} else {
				in.Delim('[')
				if out.Stages == nil {
					if !in.IsDelim(']') {
						out.Stages = make([]Stage, 0, 1)
					} else {
						out.Stages = []Stage{}
					}
				} else {
					out.Stages = (out.Stages)[:0]
				}
				for !in.IsDelim(']') {
					var v66 Stage
					easyjson467004acDecodeGithubComOvhCdsSdk32(in, &v66)
					out.Stages = append(out.Stages, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameter = nil
			} else {
				in.Delim('[')
				if out.Parameter == nil {
					if !in.IsDelim(']') {
						out.Parameter = make([]Parameter, 0, 1)
					} else {
						out.Parameter = []Parameter{}
					}
				} else {
					out.Parameter = (out.Parameter)[:0]
				}
				for !in.IsDelim(']') {
					var v67 Parameter
					easyjson467004acDecodeGithubComOvhCdsSdk33(in, &v67)
					out.Parameter = append(out.Parameter, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk18(in, out.Usage)
			}
		case "permission":
			out.Permission = int(in.Int())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk21(out *jwriter.Writer, in Pipeline) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"projectKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"stages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Stages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Stages {
				if v68 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk32(out, v69)
			}
			out.RawByte(']')
		}
	}
	if len(in.Parameter) != 0 {
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v70, v71 := range in.Parameter {
				if v70 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk33(out, v71)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk18(out, *in.Usage)
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"from_repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk33(in *jlexer.Lexer, out *Parameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "advanced":
			out.Advanced = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk33(out *jwriter.Writer, in Parameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Advanced {
		const prefix string = ",\"advanced\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Advanced))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk32(in *jlexer.Lexer, out *Stage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "build_order":
			out.BuildOrder = int(in.Int())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "run_jobs":
			if in.IsNull() {
				in.Skip()
				out.RunJobs = nil
			} else {
				in.Delim('[')
				if out.RunJobs == nil {
					if !in.IsDelim(']') {
						out.RunJobs = make([]WorkflowNodeJobRun, 0, 1)
					} else {
						out.RunJobs = []WorkflowNodeJobRun{}
					}
				} else {
					out.RunJobs = (out.RunJobs)[:0]
				}
				for !in.IsDelim(']') {
					var v72 WorkflowNodeJobRun
					if data := in.Raw(); in.Ok() {
						in.AddError((v72).UnmarshalJSON(data))
					}
					out.RunJobs = append(out.RunJobs, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prerequisites":
			if in.IsNull() {
				in.Skip()
				out.Prerequisites = nil
			} else {
				in.Delim('[')
				if out.Prerequisites == nil {
					if !in.IsDelim(']') {
						out.Prerequisites = make([]Prerequisite, 0, 2)
					} else {
						out.Prerequisites = []Prerequisite{}
					}
				} else {
					out.Prerequisites = (out.Prerequisites)[:0]
				}
				for !in.IsDelim(']') {
					var v73 Prerequisite
					easyjson467004acDecodeGithubComOvhCdsSdk34(in, &v73)
					out.Prerequisites = append(out.Prerequisites, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conditions":
			easyjson467004acDecodeGithubComOvhCdsSdk30(in, &out.Conditions)
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "jobs":
			if in.IsNull() {
				in.Skip()
				out.Jobs = nil
			} else {
				in.Delim('[')
				if out.Jobs == nil {
					if !in.IsDelim(']') {
						out.Jobs = make([]Job, 0, 1)
					} else {
						out.Jobs = []Job{}
					}
				} else {
					out.Jobs = (out.Jobs)[:0]
				}
				for !in.IsDelim(']') {
					var v74 Job
					easyjson467004acDecodeGithubComOvhCdsSdk35(in, &v74)
					out.Jobs = append(out.Jobs, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = Status(in.String())
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]PipelineBuildWarning, 0, 1)
					} else {
						out.Warnings = []PipelineBuildWarning{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v75 PipelineBuildWarning
					easyjson467004acDecodeGithubComOvhCdsSdk36(in, &v75)
					out.Warnings = append(out.Warnings, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk32(out *jwriter.Writer, in Stage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"build_order\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BuildOrder))
	}
	{
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"run_jobs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RunJobs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v76, v77 := range in.RunJobs {
				if v76 > 0 {
					out.RawByte(',')
				}
				out.Raw((v77).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"prerequisites\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Prerequisites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.Prerequisites {
				if v78 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk34(out, v79)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk30(out, in.Conditions)
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"jobs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Jobs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.Jobs {
				if v80 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk35(out, v81)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"warnings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v82, v83 := range in.Warnings {
				if v82 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk36(out, v83)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk36(in *jlexer.Lexer, out *PipelineBuildWarning) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "action":
			easyjson467004acDecodeGithubComOvhCdsSdk37(in, &out.Action)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk36(out *jwriter.Writer, in PipelineBuildWarning) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk37(out, in.Action)
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk37(in *jlexer.Lexer, out *Action) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupID = nil
			} else {
				if out.GroupID == nil {
					out.GroupID = new(int64)
				}
				*out.GroupID = int64(in.Int64())
			}
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "deprecated":
			out.Deprecated = bool(in.Bool())
		case "step_name":
			out.StepName = string(in.String())
		case "optional":
			out.Optional = bool(in.Bool())
		case "always_executed":
			out.AlwaysExecuted = bool(in.Bool())
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make(RequirementList, 0, 1)
					} else {
						out.Requirements = RequirementList{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v84 Requirement
					if data := in.Raw(); in.Ok() {
						in.AddError((v84).UnmarshalJSON(data))
					}
					out.Requirements = append(out.Requirements, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v85 Parameter
					easyjson467004acDecodeGithubComOvhCdsSdk33(in, &v85)
					out.Parameters = append(out.Parameters, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actions":
			if in.IsNull() {
				in.Skip()
				out.Actions = nil
			} else {
				in.Delim('[')
				if out.Actions == nil {
					if !in.IsDelim(']') {
						out.Actions = make([]Action, 0, 1)
					} else {
						out.Actions = []Action{}
					}
				} else {
					out.Actions = (out.Actions)[:0]
				}
				for !in.IsDelim(']') {
					var v86 Action
					easyjson467004acDecodeGithubComOvhCdsSdk37(in, &v86)
					out.Actions = append(out.Actions, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(Group)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk7(in, out.Group)
			}
		case "first_audit":
			if in.IsNull() {
				in.Skip()
				out.FirstAudit = nil
			} else {
				if out.FirstAudit == nil {
					out.FirstAudit = new(AuditAction)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk38(in, out.FirstAudit)
			}
		case "last_audit":
			if in.IsNull() {
				in.Skip()
				out.LastAudit = nil
			} else {
				if out.LastAudit == nil {
					out.LastAudit = new(AuditAction)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk38(in, out.LastAudit)
			}
		case "editable":
			out.Editable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk37(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.GroupID != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.GroupID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"deprecated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deprecated))
	}
	if in.StepName != "" {
		const prefix string = ",\"step_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StepName))
	}
	{
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Optional))
	}
	{
		const prefix string = ",\"always_executed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AlwaysExecuted))
	}
	{
		const prefix string = ",\"requirements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Requirements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v87, v88 := range in.Requirements {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.Raw((v88).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Parameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.Parameters {
				if v89 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk33(out, v90)
			}
			out.RawByte(']')
		}
	}
	if len(in.Actions) != 0 {
		const prefix string = ",\"actions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v91, v92 := range in.Actions {
				if v91 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk37(out, v92)
			}
			out.RawByte(']')
		}
	}
	if in.Group != nil {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk7(out, *in.Group)
	}
	if in.FirstAudit != nil {
		const prefix string = ",\"first_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk38(out, *in.FirstAudit)
	}
	if in.LastAudit != nil {
		const prefix string = ",\"last_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk38(out, *in.LastAudit)
	}
	if in.Editable {
		const prefix string = ",\"editable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Editable))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk38(in *jlexer.Lexer, out *AuditAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action_id":
			out.ActionID = int64(in.Int64())
		case "data_type":
			out.DataType = string(in.String())
		case "data_before":
			out.DataBefore = string(in.String())
		case "data_after":
			out.DataAfter = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "triggered_by":
			out.TriggeredBy = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "event_type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk38(out *jwriter.Writer, in AuditAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ActionID))
	}
	{
		const prefix string = ",\"data_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataType))
	}
	{
		const prefix string = ",\"data_before\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataBefore))
	}
	{
		const prefix string = ",\"data_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataAfter))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"triggered_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggeredBy))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"event_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk35(in *jlexer.Lexer, out *Job) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pipeline_action_id":
			out.PipelineActionID = int64(in.Int64())
		case "pipeline_stage_id":
			out.PipelineStageID = int64(in.Int64())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "action":
			easyjson467004acDecodeGithubComOvhCdsSdk37(in, &out.Action)
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]PipelineBuildWarning, 0, 1)
					} else {
						out.Warnings = []PipelineBuildWarning{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v93 PipelineBuildWarning
					easyjson467004acDecodeGithubComOvhCdsSdk36(in, &v93)
					out.Warnings = append(out.Warnings, v93)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk35(out *jwriter.Writer, in Job) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pipeline_action_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineActionID))
	}
	{
		const prefix string = ",\"pipeline_stage_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineStageID))
	}
	{
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk37(out, in.Action)
	}
	{
		const prefix string = ",\"warnings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v94, v95 := range in.Warnings {
				if v94 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk36(out, v95)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk34(in *jlexer.Lexer, out *Prerequisite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameter":
			out.Parameter = string(in.String())
		case "expected_value":
			out.ExpectedValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk34(out *jwriter.Writer, in Prerequisite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Parameter))
	}
	{
		const prefix string = ",\"expected_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpectedValue))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk20(in *jlexer.Lexer, out *Environment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Variable = nil
			} else {
				in.Delim('[')
				if out.Variable == nil {
					if !in.IsDelim(']') {
						out.Variable = make([]Variable, 0, 1)
					} else {
						out.Variable = []Variable{}
					}
				} else {
					out.Variable = (out.Variable)[:0]
				}
				for !in.IsDelim(']') {
					var v96 Variable
					easyjson467004acDecodeGithubComOvhCdsSdk1(in, &v96)
					out.Variable = append(out.Variable, v96)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "project_key":
			out.ProjectKey = string(in.String())
		case "permission":
			out.Permission = int(in.Int())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]EnvironmentKey, 0, 1)
					} else {
						out.Keys = []EnvironmentKey{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v97 EnvironmentKey
					easyjson467004acDecodeGithubComOvhCdsSdk14(in, &v97)
					out.Keys = append(out.Keys, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk18(in, out.Usage)
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk20(out *jwriter.Writer, in Environment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Variable) != 0 {
		const prefix string = ",\"variables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v98, v99 := range in.Variable {
				if v98 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk1(out, v99)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"keys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Keys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v100, v101 := range in.Keys {
				if v100 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk14(out, v101)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk18(out, *in.Usage)
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromRepository))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk19(in *jlexer.Lexer, out *Workflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "last_modified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "project_key":
			out.ProjectKey = string(in.String())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupPermission, 0, 1)
					} else {
						out.Groups = []GroupPermission{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v102 GroupPermission
					easyjson467004acDecodeGithubComOvhCdsSdk6(in, &v102)
					out.Groups = append(out.Groups, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permission":
			out.Permission = int(in.Int())
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(Metadata)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v103 string
					v103 = string(in.String())
					(out.Metadata)[key] = v103
					in.WantComma()
				}
				in.Delim('}')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk18(in, out.Usage)
			}
		case "history_length":
			out.HistoryLength = int64(in.Int64())
		case "purge_tags":
			if in.IsNull() {
				in.Skip()
				out.PurgeTags = nil
			} else {
				in.Delim('[')
				if out.PurgeTags == nil {
					if !in.IsDelim(']') {
						out.PurgeTags = make([]string, 0, 4)
					} else {
						out.PurgeTags = []string{}
					}
				} else {
					out.PurgeTags = (out.PurgeTags)[:0]
				}
				for !in.IsDelim(']') {
					var v104 string
					v104 = string(in.String())
					out.PurgeTags = append(out.PurgeTags, v104)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				in.Delim('[')
				if out.Notifications == nil {
					if !in.IsDelim(']') {
						out.Notifications = make([]WorkflowNotification, 0, 1)
					} else {
						out.Notifications = []WorkflowNotification{}
					}
				} else {
					out.Notifications = (out.Notifications)[:0]
				}
				for !in.IsDelim(']') {
					var v105 WorkflowNotification
					easyjson467004acDecodeGithubComOvhCdsSdk39(in, &v105)
					out.Notifications = append(out.Notifications, v105)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_repository":
			out.FromRepository = string(in.String())
		case "derived_from_workflow_id":
			out.DerivedFromWorkflowID = int64(in.Int64())
		case "derived_from_workflow_name":
			out.DerivedFromWorkflowName = string(in.String())
		case "derivation_branch":
			out.DerivationBranch = string(in.String())
		case "audits":
			if in.IsNull() {
				in.Skip()
				out.Audits = nil
			} else {
				in.Delim('[')
				if out.Audits == nil {
					if !in.IsDelim(']') {
						out.Audits = make([]AuditWorkflow, 0, 1)
					} else {
						out.Audits = []AuditWorkflow{}
					}
				} else {
					out.Audits = (out.Audits)[:0]
				}
				for !in.IsDelim(']') {
					var v106 AuditWorkflow
					easyjson467004acDecodeGithubComOvhCdsSdk40(in, &v106)
					out.Audits = append(out.Audits, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pipelines":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Pipelines = make(map[int64]Pipeline)
				} else {
					out.Pipelines = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v107 Pipeline
					easyjson467004acDecodeGithubComOvhCdsSdk21(in, &v107)
					(out.Pipelines)[key] = v107
					in.WantComma()
				}
				in.Delim('}')
			}
		case "applications":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Applications = make(map[int64]Application)
				} else {
					out.Applications = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v108 Application
					easyjson467004acDecodeGithubComOvhCdsSdk22(in, &v108)
					(out.Applications)[key] = v108
					in.WantComma()
				}
				in.Delim('}')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Environments = make(map[int64]Environment)
				} else {
					out.Environments = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v109 Environment
					easyjson467004acDecodeGithubComOvhCdsSdk20(in, &v109)
					(out.Environments)[key] = v109
					in.WantComma()
				}
				in.Delim('}')
			}
		case "project_integrations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProjectIntegrations = make(map[int64]ProjectIntegration)
				} else {
					out.ProjectIntegrations = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v110 ProjectIntegration
					easyjson467004acDecodeGithubComOvhCdsSdk41(in, &v110)
					(out.ProjectIntegrations)[key] = v110
					in.WantComma()
				}
				in.Delim('}')
			}
		case "hook_models":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HookModels = make(map[int64]WorkflowHookModel)
				} else {
					out.HookModels = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v111 WorkflowHookModel
					easyjson467004acDecodeGithubComOvhCdsSdk42(in, &v111)
					(out.HookModels)[key] = v111
					in.WantComma()
				}
				in.Delim('}')
			}
		case "outgoing_hook_models":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OutGoingHookModels = make(map[int64]WorkflowHookModel)
				} else {
					out.OutGoingHookModels = nil
				}
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v112 WorkflowHookModel
					easyjson467004acDecodeGithubComOvhCdsSdk42(in, &v112)
					(out.OutGoingHookModels)[key] = v112
					in.WantComma()
				}
				in.Delim('}')
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]Label, 0, 1)
					} else {
						out.Labels = []Label{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v113 Label
					easyjson467004acDecodeGithubComOvhCdsSdk43(in, &v113)
					out.Labels = append(out.Labels, v113)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "to_delete":
			out.ToDelete = bool(in.Bool())
		case "favorite":
			out.Favorite = bool(in.Bool())
		case "workflow_data":
			if in.IsNull() {
				in.Skip()
				out.WorkflowData = nil
			} else {
				if out.WorkflowData == nil {
					out.WorkflowData = new(WorkflowData)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk44(in, out.WorkflowData)
			}
		case "event_integrations":
			if in.IsNull() {
				in.Skip()
				out.EventIntegrations = nil
			} else {
				in.Delim('[')
				if out.EventIntegrations == nil {
					if !in.IsDelim(']') {
						out.EventIntegrations = make([]ProjectIntegration, 0, 1)
					} else {
						out.EventIntegrations = []ProjectIntegration{}
					}
				} else {
					out.EventIntegrations = (out.EventIntegrations)[:0]
				}
				for !in.IsDelim(']') {
					var v114 ProjectIntegration
					easyjson467004acDecodeGithubComOvhCdsSdk41(in, &v114)
					out.EventIntegrations = append(out.EventIntegrations, v114)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "as_code_events":
			if in.IsNull() {
				in.Skip()
				out.AsCodeEvent = nil
			} else {
				in.Delim('[')
				if out.AsCodeEvent == nil {
					if !in.IsDelim(']') {
						out.AsCodeEvent = make([]AsCodeEvent, 0, 1)
					} else {
						out.AsCodeEvent = []AsCodeEvent{}
					}
				} else {
					out.AsCodeEvent = (out.AsCodeEvent)[:0]
				}
				for !in.IsDelim(']') {
					var v115 AsCodeEvent
					easyjson467004acDecodeGithubComOvhCdsSdk45(in, &v115)
					out.AsCodeEvent = append(out.AsCodeEvent, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_template":
			out.FromTemplate = string(in.String())
		case "template_up_to_date":
			out.TemplateUpToDate = bool(in.Bool())
		case "urls":
			easyjson467004acDecodeGithubComOvhCdsSdk46(in, &out.URLs)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk19(out *jwriter.Writer, in Workflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastModified).MarshalJSON())
	}
	if in.ProjectID != 0 {
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v116, v117 := range in.Groups {
				if v116 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk6(out, v117)
			}
			out.RawByte(']')
		}
	}
	if in.Permission != 0 {
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	{
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v118First := true
			for v118Name, v118Value := range in.Metadata {
				if v118First {
					v118First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v118Name))
				out.RawByte(':')
				out.String(string(v118Value))
			}
			out.RawByte('}')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk18(out, *in.Usage)
	}
	{
		const prefix string = ",\"history_length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HistoryLength))
	}
	if len(in.PurgeTags) != 0 {
		const prefix string = ",\"purge_tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v119, v120 := range in.PurgeTags {
				if v119 > 0 {
					out.RawByte(',')
				}
				out.String(string(v120))
			}
			out.RawByte(']')
		}
	}
	if len(in.Notifications) != 0 {
		const prefix string = ",\"notifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v121, v122 := range in.Notifications {
				if v121 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk39(out, v122)
			}
			out.RawByte(']')
		}
	}
	if in.FromRepository != "" {
		const prefix string = ",\"from_repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromRepository))
	}
	if in.DerivedFromWorkflowID != 0 {
		const prefix string = ",\"derived_from_workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DerivedFromWorkflowID))
	}
	if in.DerivedFromWorkflowName != "" {
		const prefix string = ",\"derived_from_workflow_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DerivedFromWorkflowName))
	}
	if in.DerivationBranch != "" {
		const prefix string = ",\"derivation_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DerivationBranch))
	}
	{
		const prefix string = ",\"audits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Audits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v123, v124 := range in.Audits {
				if v123 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk40(out, v124)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pipelines\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Pipelines == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v125First := true
			for v125Name, v125Value := range in.Pipelines {
				if v125First {
					v125First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v125Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk21(out, v125Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"applications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Applications == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v126First := true
			for v126Name, v126Value := range in.Applications {
				if v126First {
					v126First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v126Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk22(out, v126Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"environments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Environments == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v127First := true
			for v127Name, v127Value := range in.Environments {
				if v127First {
					v127First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v127Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk20(out, v127Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"project_integrations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProjectIntegrations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v128First := true
			for v128Name, v128Value := range in.ProjectIntegrations {
				if v128First {
					v128First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v128Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk41(out, v128Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"hook_models\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.HookModels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v129First := true
			for v129Name, v129Value := range in.HookModels {
				if v129First {
					v129First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v129Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk42(out, v129Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"outgoing_hook_models\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.OutGoingHookModels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v130First := true
			for v130Name, v130Value := range in.OutGoingHookModels {
				if v130First {
					v130First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v130Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk42(out, v130Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v131, v132 := range in.Labels {
				if v131 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk43(out, v132)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"to_delete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ToDelete))
	}
	{
		const prefix string = ",\"favorite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Favorite))
	}
	{
		const prefix string = ",\"workflow_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.WorkflowData == nil {
			out.RawString("null")
		} else {
			easyjson467004acEncodeGithubComOvhCdsSdk44(out, *in.WorkflowData)
		}
	}
	{
		const prefix string = ",\"event_integrations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.EventIntegrations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v133, v134 := range in.EventIntegrations {
				if v133 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk41(out, v134)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"as_code_events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AsCodeEvent == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v135, v136 := range in.AsCodeEvent {
				if v135 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk45(out, v136)
			}
			out.RawByte(']')
		}
	}
	if in.FromTemplate != "" {
		const prefix string = ",\"from_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromTemplate))
	}
	if in.TemplateUpToDate {
		const prefix string = ",\"template_up_to_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TemplateUpToDate))
	}
	{
		const prefix string = ",\"urls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk46(out, in.URLs)
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk46(in *jlexer.Lexer, out *URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_url":
			out.APIURL = string(in.String())
		case "ui_url":
			out.UIURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk46(out *jwriter.Writer, in URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"api_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.APIURL))
	}
	{
		const prefix string = ",\"ui_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UIURL))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk45(in *jlexer.Lexer, out *AsCodeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "pullrequest_id":
			out.PullRequestID = int64(in.Int64())
		case "pullrequest_url":
			out.PullRequestURL = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "creation_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk45(out *jwriter.Writer, in AsCodeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"pullrequest_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PullRequestID))
	}
	{
		const prefix string = ",\"pullrequest_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PullRequestURL))
	}
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"creation_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreationDate).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk44(in *jlexer.Lexer, out *WorkflowData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node":
			easyjson467004acDecodeGithubComOvhCdsSdk47(in, &out.Node)
		case "joins":
			if in.IsNull() {
				in.Skip()
				out.Joins = nil
			} else {
				in.Delim('[')
				if out.Joins == nil {
					if !in.IsDelim(']') {
						out.Joins = make([]Node, 0, 1)
					} else {
						out.Joins = []Node{}
					}
				} else {
					out.Joins = (out.Joins)[:0]
				}
				for !in.IsDelim(']') {
					var v137 Node
					easyjson467004acDecodeGithubComOvhCdsSdk47(in, &v137)
					out.Joins = append(out.Joins, v137)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk44(out *jwriter.Writer, in WorkflowData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk47(out, in.Node)
	}
	{
		const prefix string = ",\"joins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Joins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v138, v139 := range in.Joins {
				if v138 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk47(out, v139)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk47(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "triggers":
			if in.IsNull() {
				in.Skip()
				out.Triggers = nil
			} else {
				in.Delim('[')
				if out.Triggers == nil {
					if !in.IsDelim(']') {
						out.Triggers = make([]NodeTrigger, 0, 1)
					} else {
						out.Triggers = []NodeTrigger{}
					}
				} else {
					out.Triggers = (out.Triggers)[:0]
				}
				for !in.IsDelim(']') {
					var v140 NodeTrigger
					easyjson467004acDecodeGithubComOvhCdsSdk48(in, &v140)
					out.Triggers = append(out.Triggers, v140)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "context":
			if in.IsNull() {
				in.Skip()
				out.Context = nil
			} else {
				if out.Context == nil {
					out.Context = new(NodeContext)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk49(in, out.Context)
			}
		case "outgoing_hook":
			if in.IsNull() {
				in.Skip()
				out.OutGoingHookContext = nil
			} else {
				if out.OutGoingHookContext == nil {
					out.OutGoingHookContext = new(NodeOutGoingHook)
				}
				easyjson467004acDecodeGithubComOvhCdsSdk50(in, out.OutGoingHookContext)
			}
		case "parents":
			if in.IsNull() {
				in.Skip()
				out.JoinContext = nil
			} else {
				in.Delim('[')
				if out.JoinContext == nil {
					if !in.IsDelim(']') {
						out.JoinContext = make([]NodeJoin, 0, 1)
					} else {
						out.JoinContext = []NodeJoin{}
					}
				} else {
					out.JoinContext = (out.JoinContext)[:0]
				}
				for !in.IsDelim(']') {
					var v141 NodeJoin
					easyjson467004acDecodeGithubComOvhCdsSdk51(in, &v141)
					out.JoinContext = append(out.JoinContext, v141)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hooks":
			if in.IsNull() {
				in.Skip()
				out.Hooks = nil
			} else {
				in.Delim('[')
				if out.Hooks == nil {
					if !in.IsDelim(']') {
						out.Hooks = make([]NodeHook, 0, 1)
					} else {
						out.Hooks = []NodeHook{}
					}
				} else {
					out.Hooks = (out.Hooks)[:0]
				}
				for !in.IsDelim(']') {
					var v142 NodeHook
					easyjson467004acDecodeGithubComOvhCdsSdk52(in, &v142)
					out.Hooks = append(out.Hooks, v142)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]GroupPermission, 0, 1)
					} else {
						out.Groups = []GroupPermission{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v143 GroupPermission
					easyjson467004acDecodeGithubComOvhCdsSdk6(in, &v143)
					out.Groups = append(out.Groups, v143)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk47(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ref))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"triggers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Triggers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v144, v145 := range in.Triggers {
				if v144 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk48(out, v145)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Context == nil {
			out.RawString("null")
		} else {
			easyjson467004acEncodeGithubComOvhCdsSdk49(out, *in.Context)
		}
	}
	{
		const prefix string = ",\"outgoing_hook\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.OutGoingHookContext == nil {
			out.RawString("null")
		} else {
			easyjson467004acEncodeGithubComOvhCdsSdk50(out, *in.OutGoingHookContext)
		}
	}
	{
		const prefix string = ",\"parents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.JoinContext == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v146, v147 := range in.JoinContext {
				if v146 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk51(out, v147)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"hooks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Hooks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v148, v149 := range in.Hooks {
				if v148 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk52(out, v149)
			}
			out.RawByte(']')
		}
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v150, v151 := range in.Groups {
				if v150 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk6(out, v151)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk52(in *jlexer.Lexer, out *NodeHook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "uuid":
			out.UUID = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "hook_model_id":
			out.HookModelID = int64(in.Int64())
		case "hook_model_name":
			out.HookModelName = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(WorkflowNodeHookConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v152 WorkflowNodeHookConfigValue
					easyjson467004acDecodeGithubComOvhCdsSdk53(in, &v152)
					(out.Config)[key] = v152
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk52(out *jwriter.Writer, in NodeHook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ref))
	}
	{
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeID))
	}
	{
		const prefix string = ",\"hook_model_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HookModelID))
	}
	{
		const prefix string = ",\"hook_model_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HookModelName))
	}
	{
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v153First := true
			for v153Name, v153Value := range in.Config {
				if v153First {
					v153First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v153Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk53(out, v153Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk53(in *jlexer.Lexer, out *WorkflowNodeHookConfigValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "configurable":
			out.Configurable = bool(in.Bool())
		case "type":
			out.Type = string(in.String())
		case "multiple_choice_list":
			if in.IsNull() {
				in.Skip()
				out.MultipleChoiceList = nil
			} else {
				in.Delim('[')
				if out.MultipleChoiceList == nil {
					if !in.IsDelim(']') {
						out.MultipleChoiceList = make([]string, 0, 4)
					} else {
						out.MultipleChoiceList = []string{}
					}
				} else {
					out.MultipleChoiceList = (out.MultipleChoiceList)[:0]
				}
				for !in.IsDelim(']') {
					var v154 string
					v154 = string(in.String())
					out.MultipleChoiceList = append(out.MultipleChoiceList, v154)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk53(out *jwriter.Writer, in WorkflowNodeHookConfigValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"configurable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Configurable))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"multiple_choice_list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MultipleChoiceList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v155, v156 := range in.MultipleChoiceList {
				if v155 > 0 {
					out.RawByte(',')
				}
				out.String(string(v156))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk51(in *jlexer.Lexer, out *NodeJoin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "parent_name":
			out.ParentName = string(in.String())
		case "parent_id":
			out.ParentID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk51(out *jwriter.Writer, in NodeJoin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeID))
	}
	if in.ParentName != "" {
		const prefix string = ",\"parent_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParentName))
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ParentID))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk50(in *jlexer.Lexer, out *NodeOutGoingHook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "hook_model_id":
			out.HookModelID = int64(in.Int64())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(WorkflowNodeHookConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v157 WorkflowNodeHookConfigValue
					easyjson467004acDecodeGithubComOvhCdsSdk53(in, &v157)
					(out.Config)[key] = v157
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk50(out *jwriter.Writer, in NodeOutGoingHook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeID))
	}
	{
		const prefix string = ",\"hook_model_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HookModelID))
	}
	{
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v158First := true
			for v158Name, v158Value := range in.Config {
				if v158First {
					v158First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v158Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk53(out, v158Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk49(in *jlexer.Lexer, out *NodeContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "pipeline_id":
			out.PipelineID = int64(in.Int64())
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		case "environment_id":
			out.EnvironmentID = int64(in.Int64())
		case "project_integration_id":
			out.ProjectIntegrationID = int64(in.Int64())
		case "default_payload":
			if m, ok := out.DefaultPayload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DefaultPayload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DefaultPayload = in.Interface()
			}
		case "default_pipeline_parameters":
			if in.IsNull() {
				in.Skip()
				out.DefaultPipelineParameters = nil
			} else {
				in.Delim('[')
				if out.DefaultPipelineParameters == nil {
					if !in.IsDelim(']') {
						out.DefaultPipelineParameters = make([]Parameter, 0, 1)
					} else {
						out.DefaultPipelineParameters = []Parameter{}
					}
				} else {
					out.DefaultPipelineParameters = (out.DefaultPipelineParameters)[:0]
				}
				for !in.IsDelim(']') {
					var v159 Parameter
					easyjson467004acDecodeGithubComOvhCdsSdk33(in, &v159)
					out.DefaultPipelineParameters = append(out.DefaultPipelineParameters, v159)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conditions":
			easyjson467004acDecodeGithubComOvhCdsSdk30(in, &out.Conditions)
		case "mutex":
			out.Mutex = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk49(out *jwriter.Writer, in NodeContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeID))
	}
	{
		const prefix string = ",\"pipeline_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineID))
	}
	{
		const prefix string = ",\"application_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"environment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EnvironmentID))
	}
	{
		const prefix string = ",\"project_integration_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectIntegrationID))
	}
	if in.DefaultPayload != nil {
		const prefix string = ",\"default_payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.DefaultPayload.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DefaultPayload.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DefaultPayload))
		}
	}
	{
		const prefix string = ",\"default_pipeline_parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DefaultPipelineParameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v160, v161 := range in.DefaultPipelineParameters {
				if v160 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk33(out, v161)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk30(out, in.Conditions)
	}
	{
		const prefix string = ",\"mutex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mutex))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk48(in *jlexer.Lexer, out *NodeTrigger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "parent_node_id":
			out.ParentNodeID = int64(in.Int64())
		case "child_node_id":
			out.ChildNodeID = int64(in.Int64())
		case "parent_node_name":
			out.ParentNodeName = string(in.String())
		case "child_node":
			easyjson467004acDecodeGithubComOvhCdsSdk47(in, &out.ChildNode)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk48(out *jwriter.Writer, in NodeTrigger) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"parent_node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ParentNodeID))
	}
	{
		const prefix string = ",\"child_node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ChildNodeID))
	}
	{
		const prefix string = ",\"parent_node_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParentNodeName))
	}
	{
		const prefix string = ",\"child_node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk47(out, in.ChildNode)
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk43(in *jlexer.Lexer, out *Label) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk43(out *jwriter.Writer, in Label) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	if in.WorkflowID != 0 {
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk42(in *jlexer.Lexer, out *WorkflowHookModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "command":
			out.Command = string(in.String())
		case "default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DefaultConfig = make(WorkflowNodeHookConfig)
				} else {
					out.DefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v162 WorkflowNodeHookConfigValue
					easyjson467004acDecodeGithubComOvhCdsSdk53(in, &v162)
					(out.DefaultConfig)[key] = v162
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk42(out *jwriter.Writer, in WorkflowHookModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"identifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"command\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Command))
	}
	{
		const prefix string = ",\"default_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v163First := true
			for v163Name, v163Value := range in.DefaultConfig {
				if v163First {
					v163First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v163Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk53(out, v163Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk41(in *jlexer.Lexer, out *ProjectIntegration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "integration_model_id":
			out.IntegrationModelID = int64(in.Int64())
		case "model":
			easyjson467004acDecodeGithubComOvhCdsSdk54(in, &out.Model)
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(IntegrationConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v164 IntegrationConfigValue
					easyjson467004acDecodeGithubComOvhCdsSdk26(in, &v164)
					(out.Config)[key] = v164
					in.WantComma()
				}
				in.Delim('}')
			}
		case "integration_plugins":
			if in.IsNull() {
				in.Skip()
				out.GRPCPlugins = nil
			} else {
				in.Delim('[')
				if out.GRPCPlugins == nil {
					if !in.IsDelim(']') {
						out.GRPCPlugins = make([]GRPCPlugin, 0, 1)
					} else {
						out.GRPCPlugins = []GRPCPlugin{}
					}
				} else {
					out.GRPCPlugins = (out.GRPCPlugins)[:0]
				}
				for !in.IsDelim(']') {
					var v165 GRPCPlugin
					easyjson467004acDecodeGithubComOvhCdsSdk55(in, &v165)
					out.GRPCPlugins = append(out.GRPCPlugins, v165)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk41(out *jwriter.Writer, in ProjectIntegration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"integration_model_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IntegrationModelID))
	}
	{
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk54(out, in.Model)
	}
	{
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v166First := true
			for v166Name, v166Value := range in.Config {
				if v166First {
					v166First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v166Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk26(out, v166Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.GRPCPlugins) != 0 {
		const prefix string = ",\"integration_plugins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v167, v168 := range in.GRPCPlugins {
				if v167 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk55(out, v168)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk55(in *jlexer.Lexer, out *GRPCPlugin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v169 Parameter
					easyjson467004acDecodeGithubComOvhCdsSdk33(in, &v169)
					out.Parameters = append(out.Parameters, v169)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "binaries":
			if in.IsNull() {
				in.Skip()
				out.Binaries = nil
			} else {
				in.Delim('[')
				if out.Binaries == nil {
					if !in.IsDelim(']') {
						out.Binaries = make([]GRPCPluginBinary, 0, 1)
					} else {
						out.Binaries = []GRPCPluginBinary{}
					}
				} else {
					out.Binaries = (out.Binaries)[:0]
				}
				for !in.IsDelim(']') {
					var v170 GRPCPluginBinary
					easyjson467004acDecodeGithubComOvhCdsSdk56(in, &v170)
					out.Binaries = append(out.Binaries, v170)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "integration":
			out.Integration = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk55(out *jwriter.Writer, in GRPCPlugin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v171, v172 := range in.Parameters {
				if v171 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk33(out, v172)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"binaries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Binaries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v173, v174 := range in.Binaries {
				if v173 > 0 {
					out.RawByte(',')
				}
				easyjson467004acEncodeGithubComOvhCdsSdk56(out, v174)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Integration))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk56(in *jlexer.Lexer, out *GRPCPluginBinary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "os":
			out.OS = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "object_path":
			out.ObjectPath = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "perm":
			out.Perm = uint32(in.Uint32())
		case "md5sum":
			out.MD5sum = string(in.String())
		case "sha512sum":
			out.SHA512sum = string(in.String())
		case "temp_url":
			out.TempURL = string(in.String())
		case "entrypoints":
			if in.IsNull() {
				in.Skip()
				out.Entrypoints = nil
			} else {
				in.Delim('[')
				if out.Entrypoints == nil {
					if !in.IsDelim(']') {
						out.Entrypoints = make([]string, 0, 4)
					} else {
						out.Entrypoints = []string{}
					}
				} else {
					out.Entrypoints = (out.Entrypoints)[:0]
				}
				for !in.IsDelim(']') {
					var v175 string
					v175 = string(in.String())
					out.Entrypoints = append(out.Entrypoints, v175)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cmd":
			out.Cmd = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v176 string
					v176 = string(in.String())
					out.Args = append(out.Args, v176)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make(RequirementList, 0, 1)
					} else {
						out.Requirements = RequirementList{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v177 Requirement
					if data := in.Raw(); in.Ok() {
						in.AddError((v177).UnmarshalJSON(data))
					}
					out.Requirements = append(out.Requirements, v177)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "file_content":
			if in.IsNull() {
				in.Skip()
				out.FileContent = nil
			} else {
				out.FileContent = in.Bytes()
			}
		case "plugin_name":
			out.PluginName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk56(out *jwriter.Writer, in GRPCPluginBinary) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OS != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OS))
	}
	if in.Arch != "" {
		const prefix string = ",\"arch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Arch))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.ObjectPath != "" {
		const prefix string = ",\"object_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ObjectPath))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Perm != 0 {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Perm))
	}
	if in.MD5sum != "" {
		const prefix string = ",\"md5sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5sum))
	}
	if in.SHA512sum != "" {
		const prefix string = ",\"sha512sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA512sum))
	}
	if in.TempURL != "" {
		const prefix string = ",\"temp_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TempURL))
	}
	if len(in.Entrypoints) != 0 {
		const prefix string = ",\"entrypoints\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v179, v180 := range in.Entrypoints {
				if v179 > 0 {
					out.RawByte(',')
				}
				out.String(string(v180))
			}
			out.RawByte(']')
		}
	}
	if in.Cmd != "" {
		const prefix string = ",\"cmd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cmd))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v181, v182 := range in.Args {
				if v181 > 0 {
					out.RawByte(',')
				}
				out.String(string(v182))
			}
			out.RawByte(']')
		}
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v183, v184 := range in.Requirements {
				if v183 > 0 {
					out.RawByte(',')
				}
				out.Raw((v184).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.FileContent) != 0 {
		const prefix string = ",\"file_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.FileContent)
	}
	if in.PluginName != "" {
		const prefix string = ",\"plugin_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PluginName))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk54(in *jlexer.Lexer, out *IntegrationModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DefaultConfig = make(IntegrationConfig)
				} else {
					out.DefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v187 IntegrationConfigValue
					easyjson467004acDecodeGithubComOvhCdsSdk26(in, &v187)
					(out.DefaultConfig)[key] = v187
					in.WantComma()
				}
				in.Delim('}')
			}
		case "deployment_default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DeploymentDefaultConfig = make(IntegrationConfig)
				} else {
					out.DeploymentDefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v188 IntegrationConfigValue
					easyjson467004acDecodeGithubComOvhCdsSdk26(in, &v188)
					(out.DeploymentDefaultConfig)[key] = v188
					in.WantComma()
				}
				in.Delim('}')
			}
		case "public_configurations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PublicConfigurations = make(map[string]IntegrationConfig)
				} else {
					out.PublicConfigurations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v189 IntegrationConfig
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v189 = make(IntegrationConfig)
						} else {
							v189 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v190 IntegrationConfigValue
							easyjson467004acDecodeGithubComOvhCdsSdk26(in, &v190)
							(v189)[key] = v190
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.PublicConfigurations)[key] = v189
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "hook":
			out.Hook = bool(in.Bool())
		case "storage":
			out.Storage = bool(in.Bool())
		case "deployment":
			out.Deployment = bool(in.Bool())
		case "compute":
			out.Compute = bool(in.Bool())
		case "event":
			out.Event = bool(in.Bool())
		case "public":
			out.Public = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk54(out *jwriter.Writer, in IntegrationModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"identifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"default_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v191First := true
			for v191Name, v191Value := range in.DefaultConfig {
				if v191First {
					v191First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v191Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk26(out, v191Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"deployment_default_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DeploymentDefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v192First := true
			for v192Name, v192Value := range in.DeploymentDefaultConfig {
				if v192First {
					v192First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v192Name))
				out.RawByte(':')
				easyjson467004acEncodeGithubComOvhCdsSdk26(out, v192Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.PublicConfigurations) != 0 {
		const prefix string = ",\"public_configurations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v193First := true
			for v193Name, v193Value := range in.PublicConfigurations {
				if v193First {
					v193First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v193Name))
				out.RawByte(':')
				if v193Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v194First := true
					for v194Name, v194Value := range v193Value {
						if v194First {
							v194First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v194Name))
						out.RawByte(':')
						easyjson467004acEncodeGithubComOvhCdsSdk26(out, v194Value)
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	{
		const prefix string = ",\"hook\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Hook))
	}
	{
		const prefix string = ",\"storage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Storage))
	}
	{
		const prefix string = ",\"deployment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deployment))
	}
	{
		const prefix string = ",\"compute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Compute))
	}
	{
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Event))
	}
	if in.Public {
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Public))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk40(in *jlexer.Lexer, out *AuditWorkflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project_key":
			out.ProjectKey = string(in.String())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "data_type":
			out.DataType = string(in.String())
		case "data_before":
			out.DataBefore = string(in.String())
		case "data_after":
			out.DataAfter = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "triggered_by":
			out.TriggeredBy = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "event_type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk40(out *jwriter.Writer, in AuditWorkflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	{
		const prefix string = ",\"data_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataType))
	}
	{
		const prefix string = ",\"data_before\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataBefore))
	}
	{
		const prefix string = ",\"data_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataAfter))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"triggered_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggeredBy))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"event_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}
func easyjson467004acDecodeGithubComOvhCdsSdk39(in *jlexer.Lexer, out *WorkflowNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_id":
			out.WorkflowID = int64(in.Int64())
		case "source_node_ref":
			if in.IsNull() {
				in.Skip()
				out.SourceNodeRefs = nil
			} else {
				in.Delim('[')
				if out.SourceNodeRefs == nil {
					if !in.IsDelim(']') {
						out.SourceNodeRefs = make([]string, 0, 4)
					} else {
						out.SourceNodeRefs = []string{}
					}
				} else {
					out.SourceNodeRefs = (out.SourceNodeRefs)[:0]
				}
				for !in.IsDelim(']') {
					var v195 string
					v195 = string(in.String())
					out.SourceNodeRefs = append(out.SourceNodeRefs, v195)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "node_id":
			if in.IsNull() {
				in.Skip()
				out.NodeIDs = nil
			} else {
				in.Delim('[')
				if out.NodeIDs == nil {
					if !in.IsDelim(']') {
						out.NodeIDs = make([]int64, 0, 8)
					} else {
						out.NodeIDs = []int64{}
					}
				} else {
					out.NodeIDs = (out.NodeIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v196 int64
					v196 = int64(in.Int64())
					out.NodeIDs = append(out.NodeIDs, v196)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = string(in.String())
		case "settings":
			easyjson467004acDecodeGithubComOvhCdsSdk28(in, &out.Settings)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson467004acEncodeGithubComOvhCdsSdk39(out *jwriter.Writer, in WorkflowNotification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.WorkflowID != 0 {
		const prefix string = ",\"workflow_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowID))
	}
	if len(in.SourceNodeRefs) != 0 {
		const prefix string = ",\"source_node_ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v197, v198 := range in.SourceNodeRefs {
				if v197 > 0 {
					out.RawByte(',')
				}
				out.String(string(v198))
			}
			out.RawByte(']')
		}
	}
	if len(in.NodeIDs) != 0 {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v199, v200 := range in.NodeIDs {
				if v199 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v200))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"settings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson467004acEncodeGithubComOvhCdsSdk28(out, in.Settings)
	}
	out.RawByte('}')
}
