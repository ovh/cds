// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson12a0d420DecodeGithubComOvhCdsSdk(in *jlexer.Lexer, out *EventProjectVariableUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_variable":
			easyjson12a0d420DecodeGithubComOvhCdsSdk1(in, &out.OldVariable)
		case "new_variable":
			easyjson12a0d420DecodeGithubComOvhCdsSdk1(in, &out.NewVariable)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk(out *jwriter.Writer, in EventProjectVariableUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk1(out, in.OldVariable)
	}
	{
		const prefix string = ",\"new_variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk1(out, in.NewVariable)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectVariableUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectVariableUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectVariableUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectVariableUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk1(in *jlexer.Lexer, out *Variable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk1(out *jwriter.Writer, in Variable) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk2(in *jlexer.Lexer, out *EventProjectVariableDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variable":
			easyjson12a0d420DecodeGithubComOvhCdsSdk1(in, &out.Variable)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk2(out *jwriter.Writer, in EventProjectVariableDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk1(out, in.Variable)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectVariableDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectVariableDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectVariableDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectVariableDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk2(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk3(in *jlexer.Lexer, out *EventProjectVariableAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variable":
			easyjson12a0d420DecodeGithubComOvhCdsSdk1(in, &out.Variable)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk3(out *jwriter.Writer, in EventProjectVariableAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk1(out, in.Variable)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectVariableAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectVariableAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectVariableAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectVariableAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk3(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk4(in *jlexer.Lexer, out *EventProjectVCSServerDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vcs_server":
			out.VCSServerName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk4(out *jwriter.Writer, in EventProjectVCSServerDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vcs_server\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VCSServerName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectVCSServerDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectVCSServerDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectVCSServerDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectVCSServerDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk4(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk5(in *jlexer.Lexer, out *EventProjectVCSServerAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vcs_server":
			out.VCSServerName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk5(out *jwriter.Writer, in EventProjectVCSServerAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vcs_server\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VCSServerName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectVCSServerAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectVCSServerAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectVCSServerAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectVCSServerAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk5(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk6(in *jlexer.Lexer, out *EventProjectUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_name":
			out.OldName = string(in.String())
		case "new_name":
			out.NewName = string(in.String())
		case "old_metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OldMetadata = make(Metadata)
				} else {
					out.OldMetadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.OldMetadata)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "new_metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NewMetadata = make(Metadata)
				} else {
					out.NewMetadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.NewMetadata)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk6(out *jwriter.Writer, in EventProjectUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OldName))
	}
	{
		const prefix string = ",\"new_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewName))
	}
	{
		const prefix string = ",\"old_metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.OldMetadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.OldMetadata {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.String(string(v3Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"new_metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NewMetadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.NewMetadata {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk6(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk7(in *jlexer.Lexer, out *EventProjectPermissionUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_group_permission":
			easyjson12a0d420DecodeGithubComOvhCdsSdk8(in, &out.OldPermission)
		case "new_group_permission":
			easyjson12a0d420DecodeGithubComOvhCdsSdk8(in, &out.NewPermission)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk7(out *jwriter.Writer, in EventProjectPermissionUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_group_permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk8(out, in.OldPermission)
	}
	{
		const prefix string = ",\"new_group_permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk8(out, in.NewPermission)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectPermissionUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectPermissionUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectPermissionUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectPermissionUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk7(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk8(in *jlexer.Lexer, out *GroupPermission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			easyjson12a0d420DecodeGithubComOvhCdsSdk9(in, &out.Group)
		case "permission":
			out.Permission = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk8(out *jwriter.Writer, in GroupPermission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk9(out, in.Group)
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Permission))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk9(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]GroupMember, 0, 1)
					} else {
						out.Members = []GroupMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v5 GroupMember
					easyjson12a0d420DecodeGithubComOvhCdsSdk10(in, &v5)
					out.Members = append(out.Members, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "admin":
			out.Admin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk9(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Members {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson12a0d420EncodeGithubComOvhCdsSdk10(out, v7)
			}
			out.RawByte(']')
		}
	}
	if in.Admin {
		const prefix string = ",\"admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Admin))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk10(in *jlexer.Lexer, out *GroupMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "admin":
			out.Admin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk10(out *jwriter.Writer, in GroupMember) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fullname))
	}
	if in.Admin {
		const prefix string = ",\"admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Admin))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk11(in *jlexer.Lexer, out *EventProjectPermissionDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_permission":
			easyjson12a0d420DecodeGithubComOvhCdsSdk8(in, &out.Permission)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk11(out *jwriter.Writer, in EventProjectPermissionDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk8(out, in.Permission)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectPermissionDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectPermissionDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectPermissionDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectPermissionDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk11(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk12(in *jlexer.Lexer, out *EventProjectPermissionAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_permission":
			easyjson12a0d420DecodeGithubComOvhCdsSdk8(in, &out.Permission)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk12(out *jwriter.Writer, in EventProjectPermissionAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk8(out, in.Permission)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectPermissionAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectPermissionAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectPermissionAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectPermissionAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk12(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk13(in *jlexer.Lexer, out *EventProjectKeyDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			easyjson12a0d420DecodeGithubComOvhCdsSdk14(in, &out.Key)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk13(out *jwriter.Writer, in EventProjectKeyDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk14(out, in.Key)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectKeyDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectKeyDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectKeyDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectKeyDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk13(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk14(in *jlexer.Lexer, out *ProjectKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "public":
			out.Public = string(in.String())
		case "private":
			out.Private = string(in.String())
		case "keyID":
			out.KeyID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk14(out *jwriter.Writer, in ProjectKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Public))
	}
	{
		const prefix string = ",\"private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Private))
	}
	{
		const prefix string = ",\"keyID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk15(in *jlexer.Lexer, out *EventProjectKeyAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			easyjson12a0d420DecodeGithubComOvhCdsSdk14(in, &out.Key)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk15(out *jwriter.Writer, in EventProjectKeyAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk14(out, in.Key)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectKeyAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectKeyAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectKeyAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectKeyAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk15(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk16(in *jlexer.Lexer, out *EventProjectIntegrationUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_integration":
			easyjson12a0d420DecodeGithubComOvhCdsSdk17(in, &out.OldIntegration)
		case "new_integration":
			easyjson12a0d420DecodeGithubComOvhCdsSdk17(in, &out.NewsIntegration)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk16(out *jwriter.Writer, in EventProjectIntegrationUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk17(out, in.OldIntegration)
	}
	{
		const prefix string = ",\"new_integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk17(out, in.NewsIntegration)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectIntegrationUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectIntegrationUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectIntegrationUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectIntegrationUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk16(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk17(in *jlexer.Lexer, out *ProjectIntegration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "project_id":
			out.ProjectID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "integration_model_id":
			out.IntegrationModelID = int64(in.Int64())
		case "model":
			easyjson12a0d420DecodeGithubComOvhCdsSdk18(in, &out.Model)
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(IntegrationConfig)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 IntegrationConfigValue
					easyjson12a0d420DecodeGithubComOvhCdsSdk19(in, &v8)
					(out.Config)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "integration_plugins":
			if in.IsNull() {
				in.Skip()
				out.GRPCPlugins = nil
			} else {
				in.Delim('[')
				if out.GRPCPlugins == nil {
					if !in.IsDelim(']') {
						out.GRPCPlugins = make([]GRPCPlugin, 0, 1)
					} else {
						out.GRPCPlugins = []GRPCPlugin{}
					}
				} else {
					out.GRPCPlugins = (out.GRPCPlugins)[:0]
				}
				for !in.IsDelim(']') {
					var v9 GRPCPlugin
					easyjson12a0d420DecodeGithubComOvhCdsSdk20(in, &v9)
					out.GRPCPlugins = append(out.GRPCPlugins, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk17(out *jwriter.Writer, in ProjectIntegration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"project_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProjectID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"integration_model_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IntegrationModelID))
	}
	{
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk18(out, in.Model)
	}
	{
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Config == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Config {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				easyjson12a0d420EncodeGithubComOvhCdsSdk19(out, v10Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.GRPCPlugins) != 0 {
		const prefix string = ",\"integration_plugins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.GRPCPlugins {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson12a0d420EncodeGithubComOvhCdsSdk20(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk20(in *jlexer.Lexer, out *GRPCPlugin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Parameter
					easyjson12a0d420DecodeGithubComOvhCdsSdk21(in, &v13)
					out.Parameters = append(out.Parameters, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "binaries":
			if in.IsNull() {
				in.Skip()
				out.Binaries = nil
			} else {
				in.Delim('[')
				if out.Binaries == nil {
					if !in.IsDelim(']') {
						out.Binaries = make([]GRPCPluginBinary, 0, 1)
					} else {
						out.Binaries = []GRPCPluginBinary{}
					}
				} else {
					out.Binaries = (out.Binaries)[:0]
				}
				for !in.IsDelim(']') {
					var v14 GRPCPluginBinary
					easyjson12a0d420DecodeGithubComOvhCdsSdk22(in, &v14)
					out.Binaries = append(out.Binaries, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "integration":
			out.Integration = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk20(out *jwriter.Writer, in GRPCPlugin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Parameters {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjson12a0d420EncodeGithubComOvhCdsSdk21(out, v16)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"binaries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Binaries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Binaries {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson12a0d420EncodeGithubComOvhCdsSdk22(out, v18)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Integration))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk22(in *jlexer.Lexer, out *GRPCPluginBinary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "os":
			out.OS = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "object_path":
			out.ObjectPath = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "perm":
			out.Perm = uint32(in.Uint32())
		case "md5sum":
			out.MD5sum = string(in.String())
		case "sha512sum":
			out.SHA512sum = string(in.String())
		case "temp_url":
			out.TempURL = string(in.String())
		case "entrypoints":
			if in.IsNull() {
				in.Skip()
				out.Entrypoints = nil
			} else {
				in.Delim('[')
				if out.Entrypoints == nil {
					if !in.IsDelim(']') {
						out.Entrypoints = make([]string, 0, 4)
					} else {
						out.Entrypoints = []string{}
					}
				} else {
					out.Entrypoints = (out.Entrypoints)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Entrypoints = append(out.Entrypoints, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cmd":
			out.Cmd = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Args = append(out.Args, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make(RequirementList, 0, 1)
					} else {
						out.Requirements = RequirementList{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v21 Requirement
					easyjson12a0d420DecodeGithubComOvhCdsSdk23(in, &v21)
					out.Requirements = append(out.Requirements, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "file_content":
			if in.IsNull() {
				in.Skip()
				out.FileContent = nil
			} else {
				out.FileContent = in.Bytes()
			}
		case "plugin_name":
			out.PluginName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk22(out *jwriter.Writer, in GRPCPluginBinary) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OS != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OS))
	}
	if in.Arch != "" {
		const prefix string = ",\"arch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Arch))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.ObjectPath != "" {
		const prefix string = ",\"object_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ObjectPath))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Size))
	}
	if in.Perm != 0 {
		const prefix string = ",\"perm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Perm))
	}
	if in.MD5sum != "" {
		const prefix string = ",\"md5sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5sum))
	}
	if in.SHA512sum != "" {
		const prefix string = ",\"sha512sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA512sum))
	}
	if in.TempURL != "" {
		const prefix string = ",\"temp_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TempURL))
	}
	if len(in.Entrypoints) != 0 {
		const prefix string = ",\"entrypoints\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Entrypoints {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Cmd != "" {
		const prefix string = ",\"cmd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cmd))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.Args {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.Requirements {
				if v27 > 0 {
					out.RawByte(',')
				}
				easyjson12a0d420EncodeGithubComOvhCdsSdk23(out, v28)
			}
			out.RawByte(']')
		}
	}
	if len(in.FileContent) != 0 {
		const prefix string = ",\"file_content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.FileContent)
	}
	if in.PluginName != "" {
		const prefix string = ",\"plugin_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PluginName))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk23(in *jlexer.Lexer, out *Requirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "action_id":
			out.ActionID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk23(out *jwriter.Writer, in Requirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"action_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ActionID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk21(in *jlexer.Lexer, out *Parameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "advanced":
			out.Advanced = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk21(out *jwriter.Writer, in Parameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Advanced {
		const prefix string = ",\"advanced\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Advanced))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk19(in *jlexer.Lexer, out *IntegrationConfigValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk19(out *jwriter.Writer, in IntegrationConfigValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk18(in *jlexer.Lexer, out *IntegrationModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DefaultConfig = make(IntegrationConfig)
				} else {
					out.DefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v31 IntegrationConfigValue
					easyjson12a0d420DecodeGithubComOvhCdsSdk19(in, &v31)
					(out.DefaultConfig)[key] = v31
					in.WantComma()
				}
				in.Delim('}')
			}
		case "deployment_default_config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DeploymentDefaultConfig = make(IntegrationConfig)
				} else {
					out.DeploymentDefaultConfig = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v32 IntegrationConfigValue
					easyjson12a0d420DecodeGithubComOvhCdsSdk19(in, &v32)
					(out.DeploymentDefaultConfig)[key] = v32
					in.WantComma()
				}
				in.Delim('}')
			}
		case "public_configurations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PublicConfigurations = make(map[string]IntegrationConfig)
				} else {
					out.PublicConfigurations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v33 IntegrationConfig
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v33 = make(IntegrationConfig)
						} else {
							v33 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v34 IntegrationConfigValue
							easyjson12a0d420DecodeGithubComOvhCdsSdk19(in, &v34)
							(v33)[key] = v34
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.PublicConfigurations)[key] = v33
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "hook":
			out.Hook = bool(in.Bool())
		case "storage":
			out.Storage = bool(in.Bool())
		case "deployment":
			out.Deployment = bool(in.Bool())
		case "compute":
			out.Compute = bool(in.Bool())
		case "event":
			out.Event = bool(in.Bool())
		case "public":
			out.Public = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk18(out *jwriter.Writer, in IntegrationModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"identifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"default_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v35First := true
			for v35Name, v35Value := range in.DefaultConfig {
				if v35First {
					v35First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v35Name))
				out.RawByte(':')
				easyjson12a0d420EncodeGithubComOvhCdsSdk19(out, v35Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"deployment_default_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DeploymentDefaultConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v36First := true
			for v36Name, v36Value := range in.DeploymentDefaultConfig {
				if v36First {
					v36First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v36Name))
				out.RawByte(':')
				easyjson12a0d420EncodeGithubComOvhCdsSdk19(out, v36Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.PublicConfigurations) != 0 {
		const prefix string = ",\"public_configurations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v37First := true
			for v37Name, v37Value := range in.PublicConfigurations {
				if v37First {
					v37First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v37Name))
				out.RawByte(':')
				if v37Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v38First := true
					for v38Name, v38Value := range v37Value {
						if v38First {
							v38First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v38Name))
						out.RawByte(':')
						easyjson12a0d420EncodeGithubComOvhCdsSdk19(out, v38Value)
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	{
		const prefix string = ",\"hook\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Hook))
	}
	{
		const prefix string = ",\"storage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Storage))
	}
	{
		const prefix string = ",\"deployment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deployment))
	}
	{
		const prefix string = ",\"compute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Compute))
	}
	{
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Event))
	}
	if in.Public {
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Public))
	}
	out.RawByte('}')
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk24(in *jlexer.Lexer, out *EventProjectIntegrationDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "integration":
			easyjson12a0d420DecodeGithubComOvhCdsSdk17(in, &out.Integration)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk24(out *jwriter.Writer, in EventProjectIntegrationDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk17(out, in.Integration)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectIntegrationDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectIntegrationDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectIntegrationDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectIntegrationDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk24(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk25(in *jlexer.Lexer, out *EventProjectIntegrationAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "integration":
			easyjson12a0d420DecodeGithubComOvhCdsSdk17(in, &out.Integration)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk25(out *jwriter.Writer, in EventProjectIntegrationAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"integration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson12a0d420EncodeGithubComOvhCdsSdk17(out, in.Integration)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectIntegrationAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectIntegrationAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectIntegrationAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectIntegrationAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk25(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk26(in *jlexer.Lexer, out *EventProjectDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk26(out *jwriter.Writer, in EventProjectDelete) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk26(l, v)
}
func easyjson12a0d420DecodeGithubComOvhCdsSdk27(in *jlexer.Lexer, out *EventProjectAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Variables = nil
			} else {
				in.Delim('[')
				if out.Variables == nil {
					if !in.IsDelim(']') {
						out.Variables = make([]Variable, 0, 1)
					} else {
						out.Variables = []Variable{}
					}
				} else {
					out.Variables = (out.Variables)[:0]
				}
				for !in.IsDelim(']') {
					var v39 Variable
					easyjson12a0d420DecodeGithubComOvhCdsSdk1(in, &v39)
					out.Variables = append(out.Variables, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groups_permission":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]GroupPermission, 0, 1)
					} else {
						out.Permissions = []GroupPermission{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v40 GroupPermission
					easyjson12a0d420DecodeGithubComOvhCdsSdk8(in, &v40)
					out.Permissions = append(out.Permissions, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "keys":
			if in.IsNull() {
				in.Skip()
				out.Keys = nil
			} else {
				in.Delim('[')
				if out.Keys == nil {
					if !in.IsDelim(']') {
						out.Keys = make([]ProjectKey, 0, 1)
					} else {
						out.Keys = []ProjectKey{}
					}
				} else {
					out.Keys = (out.Keys)[:0]
				}
				for !in.IsDelim(']') {
					var v41 ProjectKey
					easyjson12a0d420DecodeGithubComOvhCdsSdk14(in, &v41)
					out.Keys = append(out.Keys, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(Metadata)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v42 string
					v42 = string(in.String())
					(out.Metadata)[key] = v42
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson12a0d420EncodeGithubComOvhCdsSdk27(out *jwriter.Writer, in EventProjectAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Variables == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.Variables {
				if v43 > 0 {
					out.RawByte(',')
				}
				easyjson12a0d420EncodeGithubComOvhCdsSdk1(out, v44)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"groups_permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Permissions {
				if v45 > 0 {
					out.RawByte(',')
				}
				easyjson12a0d420EncodeGithubComOvhCdsSdk8(out, v46)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"keys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Keys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Keys {
				if v47 > 0 {
					out.RawByte(',')
				}
				easyjson12a0d420EncodeGithubComOvhCdsSdk14(out, v48)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v49First := true
			for v49Name, v49Value := range in.Metadata {
				if v49First {
					v49First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v49Name))
				out.RawByte(':')
				out.String(string(v49Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventProjectAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson12a0d420EncodeGithubComOvhCdsSdk27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventProjectAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson12a0d420EncodeGithubComOvhCdsSdk27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventProjectAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson12a0d420DecodeGithubComOvhCdsSdk27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventProjectAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson12a0d420DecodeGithubComOvhCdsSdk27(l, v)
}
