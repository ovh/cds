// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF642ad3eDecodeGithubComOvhCdsSdk(in *jlexer.Lexer, out *EventSubscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.UUID = string(in.String())
		case "key":
			out.ProjectKey = string(in.String())
		case "workflow_name":
			out.WorkflowName = string(in.String())
		case "num":
			out.WorkflowNum = int64(in.Int64())
		case "runs":
			out.WorkflowRuns = bool(in.Bool())
		case "overwrite":
			out.Overwrite = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk(out *jwriter.Writer, in EventSubscription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	{
		const prefix string = ",\"workflow_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkflowName))
	}
	{
		const prefix string = ",\"num\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowNum))
	}
	{
		const prefix string = ",\"runs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.WorkflowRuns))
	}
	{
		const prefix string = ",\"overwrite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Overwrite))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventSubscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSubscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventSubscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSubscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk(l, v)
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk1(in *jlexer.Lexer, out *EventRunWorkflowOutgoingHook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hook_id":
			out.HookID = int64(in.Int64())
		case "id":
			out.ID = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "start":
			out.Start = int64(in.Int64())
		case "done":
			out.Done = int64(in.Int64())
		case "log":
			out.Log = string(in.String())
		case "workflow_run_id":
			out.WorkflowRunID = int64(in.Int64())
		case "workflow_run_number":
			if in.IsNull() {
				in.Skip()
				out.WorkflowRunNumber = nil
			} else {
				if out.WorkflowRunNumber == nil {
					out.WorkflowRunNumber = new(int64)
				}
				*out.WorkflowRunNumber = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk1(out *jwriter.Writer, in EventRunWorkflowOutgoingHook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hook_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HookID))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.Start != 0 {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	if in.Done != 0 {
		const prefix string = ",\"done\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Done))
	}
	if in.Log != "" {
		const prefix string = ",\"log\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Log))
	}
	{
		const prefix string = ",\"workflow_run_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowRunID))
	}
	if in.WorkflowRunNumber != nil {
		const prefix string = ",\"workflow_run_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.WorkflowRunNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventRunWorkflowOutgoingHook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventRunWorkflowOutgoingHook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventRunWorkflowOutgoingHook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventRunWorkflowOutgoingHook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk1(l, v)
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk2(in *jlexer.Lexer, out *EventRunWorkflowNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = int64(in.Int64())
		case "run_id":
			out.RunID = int64(in.Int64())
		case "num":
			out.Number = int64(in.Int64())
		case "subnum":
			out.SubNumber = int64(in.Int64())
		case "status":
			out.Status = string(in.String())
		case "start":
			out.Start = int64(in.Int64())
		case "done":
			out.Done = int64(in.Int64())
		case "payload":
			if m, ok := out.Payload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Payload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Payload = in.Interface()
			}
		case "hook_event":
			if in.IsNull() {
				in.Skip()
				out.HookEvent = nil
			} else {
				if out.HookEvent == nil {
					out.HookEvent = new(WorkflowNodeRunHookEvent)
				}
				easyjsonF642ad3eDecodeGithubComOvhCdsSdk3(in, &*out.HookEvent)
			}
		case "manual":
			if in.IsNull() {
				in.Skip()
				out.Manual = nil
			} else {
				if out.Manual == nil {
					out.Manual = new(WorkflowNodeRunManual)
				}
				easyjsonF642ad3eDecodeGithubComOvhCdsSdk4(in, &*out.Manual)
			}
		case "source_node_runs":
			if in.IsNull() {
				in.Skip()
				out.SourceNodeRuns = nil
			} else {
				in.Delim('[')
				if out.SourceNodeRuns == nil {
					if !in.IsDelim(']') {
						out.SourceNodeRuns = make([]int64, 0, 8)
					} else {
						out.SourceNodeRuns = []int64{}
					}
				} else {
					out.SourceNodeRuns = (out.SourceNodeRuns)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.SourceNodeRuns = append(out.SourceNodeRuns, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workflow_run_id":
			out.WorkflowRunID = int64(in.Int64())
		case "repository_manager_name":
			out.RepositoryManagerName = string(in.String())
		case "repository_full_name":
			out.RepositoryFullName = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "branch_name":
			out.BranchName = string(in.String())
		case "node_name":
			out.NodeName = string(in.String())
		case "stages_summary":
			if in.IsNull() {
				in.Skip()
				out.StagesSummary = nil
			} else {
				in.Delim('[')
				if out.StagesSummary == nil {
					if !in.IsDelim(']') {
						out.StagesSummary = make([]StageSummary, 0, 1)
					} else {
						out.StagesSummary = []StageSummary{}
					}
				} else {
					out.StagesSummary = (out.StagesSummary)[:0]
				}
				for !in.IsDelim(']') {
					var v2 StageSummary
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk5(in, &v2)
					out.StagesSummary = append(out.StagesSummary, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hook_uuid":
			out.HookUUID = string(in.String())
		case "log":
			out.HookLog = string(in.String())
		case "node_type":
			out.NodeType = string(in.String())
		case "gerrit_change":
			if in.IsNull() {
				in.Skip()
				out.GerritChange = nil
			} else {
				if out.GerritChange == nil {
					out.GerritChange = new(GerritChangeEvent)
				}
				easyjsonF642ad3eDecodeGithubComOvhCdsSdk6(in, &*out.GerritChange)
			}
		case "event_integrations_id":
			if in.IsNull() {
				in.Skip()
				out.EventIntegrations = nil
			} else {
				in.Delim('[')
				if out.EventIntegrations == nil {
					if !in.IsDelim(']') {
						out.EventIntegrations = make([]int64, 0, 8)
					} else {
						out.EventIntegrations = []int64{}
					}
				} else {
					out.EventIntegrations = (out.EventIntegrations)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int64
					v3 = int64(in.Int64())
					out.EventIntegrations = append(out.EventIntegrations, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk2(out *jwriter.Writer, in EventRunWorkflowNode) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.NodeID != 0 {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NodeID))
	}
	if in.RunID != 0 {
		const prefix string = ",\"run_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RunID))
	}
	if in.Number != 0 {
		const prefix string = ",\"num\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Number))
	}
	if in.SubNumber != 0 {
		const prefix string = ",\"subnum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SubNumber))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.Start != 0 {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	if in.Done != 0 {
		const prefix string = ",\"done\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Done))
	}
	if in.Payload != nil {
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Payload.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Payload.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Payload))
		}
	}
	{
		const prefix string = ",\"hook_event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.HookEvent == nil {
			out.RawString("null")
		} else {
			easyjsonF642ad3eEncodeGithubComOvhCdsSdk3(out, *in.HookEvent)
		}
	}
	{
		const prefix string = ",\"manual\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Manual == nil {
			out.RawString("null")
		} else {
			easyjsonF642ad3eEncodeGithubComOvhCdsSdk4(out, *in.Manual)
		}
	}
	{
		const prefix string = ",\"source_node_runs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SourceNodeRuns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.SourceNodeRuns {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"workflow_run_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowRunID))
	}
	{
		const prefix string = ",\"repository_manager_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RepositoryManagerName))
	}
	{
		const prefix string = ",\"repository_full_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RepositoryFullName))
	}
	{
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"branch_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BranchName))
	}
	{
		const prefix string = ",\"node_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeName))
	}
	{
		const prefix string = ",\"stages_summary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.StagesSummary == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.StagesSummary {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk5(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"hook_uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HookUUID))
	}
	if in.HookLog != "" {
		const prefix string = ",\"log\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HookLog))
	}
	if in.NodeType != "" {
		const prefix string = ",\"node_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeType))
	}
	if in.GerritChange != nil {
		const prefix string = ",\"gerrit_change\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComOvhCdsSdk6(out, *in.GerritChange)
	}
	if len(in.EventIntegrations) != 0 {
		const prefix string = ",\"event_integrations_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.EventIntegrations {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventRunWorkflowNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventRunWorkflowNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventRunWorkflowNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventRunWorkflowNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk2(l, v)
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk6(in *jlexer.Lexer, out *GerritChangeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "project":
			out.Project = string(in.String())
		case "dest_branch":
			out.DestBranch = string(in.String())
		case "revision":
			out.Revision = string(in.String())
		case "report":
			out.Report = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk6(out *jwriter.Writer, in GerritChangeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Project != "" {
		const prefix string = ",\"project\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Project))
	}
	if in.DestBranch != "" {
		const prefix string = ",\"dest_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DestBranch))
	}
	if in.Revision != "" {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Revision))
	}
	if in.Report != "" {
		const prefix string = ",\"report\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Report))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk5(in *jlexer.Lexer, out *StageSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "build_order":
			out.BuildOrder = int(in.Int())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "status":
			out.Status = string(in.String())
		case "jobs":
			if in.IsNull() {
				in.Skip()
				out.Jobs = nil
			} else {
				in.Delim('[')
				if out.Jobs == nil {
					if !in.IsDelim(']') {
						out.Jobs = make([]Job, 0, 1)
					} else {
						out.Jobs = []Job{}
					}
				} else {
					out.Jobs = (out.Jobs)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Job
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk7(in, &v10)
					out.Jobs = append(out.Jobs, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "run_jobs_summary":
			if in.IsNull() {
				in.Skip()
				out.RunJobsSummary = nil
			} else {
				in.Delim('[')
				if out.RunJobsSummary == nil {
					if !in.IsDelim(']') {
						out.RunJobsSummary = make([]WorkflowNodeJobRunSummary, 0, 1)
					} else {
						out.RunJobsSummary = []WorkflowNodeJobRunSummary{}
					}
				} else {
					out.RunJobsSummary = (out.RunJobsSummary)[:0]
				}
				for !in.IsDelim(']') {
					var v11 WorkflowNodeJobRunSummary
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk8(in, &v11)
					out.RunJobsSummary = append(out.RunJobsSummary, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk5(out *jwriter.Writer, in StageSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"build_order\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BuildOrder))
	}
	{
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"jobs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Jobs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Jobs {
				if v12 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk7(out, v13)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"run_jobs_summary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RunJobsSummary == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.RunJobsSummary {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk8(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk8(in *jlexer.Lexer, out *WorkflowNodeJobRunSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "workflow_node_run_id":
			out.WorkflowNodeRunID = int64(in.Int64())
		case "status":
			out.Status = string(in.String())
		case "queued":
			out.Queued = int64(in.Int64())
		case "start":
			out.Start = int64(in.Int64())
		case "done":
			out.Done = int64(in.Int64())
		case "job_summary":
			easyjsonF642ad3eDecodeGithubComOvhCdsSdk9(in, &out.Job)
		case "spawninfos":
			if in.IsNull() {
				in.Skip()
				out.SpawnInfos = nil
			} else {
				in.Delim('[')
				if out.SpawnInfos == nil {
					if !in.IsDelim(']') {
						out.SpawnInfos = make([]SpawnInfo, 0, 1)
					} else {
						out.SpawnInfos = []SpawnInfo{}
					}
				} else {
					out.SpawnInfos = (out.SpawnInfos)[:0]
				}
				for !in.IsDelim(']') {
					var v16 SpawnInfo
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk10(in, &v16)
					out.SpawnInfos = append(out.SpawnInfos, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk8(out *jwriter.Writer, in WorkflowNodeJobRunSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.WorkflowNodeRunID != 0 {
		const prefix string = ",\"workflow_node_run_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowNodeRunID))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.Queued != 0 {
		const prefix string = ",\"queued\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Queued))
	}
	if in.Start != 0 {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	if in.Done != 0 {
		const prefix string = ",\"done\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Done))
	}
	if true {
		const prefix string = ",\"job_summary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComOvhCdsSdk9(out, in.Job)
	}
	{
		const prefix string = ",\"spawninfos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SpawnInfos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.SpawnInfos {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk10(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk10(in *jlexer.Lexer, out *SpawnInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.APITime).UnmarshalJSON(data))
			}
		case "remote_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RemoteTime).UnmarshalJSON(data))
			}
		case "message":
			easyjsonF642ad3eDecodeGithubComOvhCdsSdk11(in, &out.Message)
		case "user_message":
			out.UserMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk10(out *jwriter.Writer, in SpawnInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"api_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.APITime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"remote_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.RemoteTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComOvhCdsSdk11(out, in.Message)
	}
	if in.UserMessage != "" {
		const prefix string = ",\"user_message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserMessage))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk11(in *jlexer.Lexer, out *SpawnMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]interface{}, 0, 4)
					} else {
						out.Args = []interface{}{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v19 interface{}
					if m, ok := v19.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v19.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v19 = in.Interface()
					}
					out.Args = append(out.Args, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk11(out *jwriter.Writer, in SpawnMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Args {
				if v20 > 0 {
					out.RawByte(',')
				}
				if m, ok := v21.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v21.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v21))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk9(in *jlexer.Lexer, out *ExecutedJobSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "step_status":
			if in.IsNull() {
				in.Skip()
				out.StepStatusSummary = nil
			} else {
				in.Delim('[')
				if out.StepStatusSummary == nil {
					if !in.IsDelim(']') {
						out.StepStatusSummary = make([]StepStatusSummary, 0, 1)
					} else {
						out.StepStatusSummary = []StepStatusSummary{}
					}
				} else {
					out.StepStatusSummary = (out.StepStatusSummary)[:0]
				}
				for !in.IsDelim(']') {
					var v22 StepStatusSummary
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk12(in, &v22)
					out.StepStatusSummary = append(out.StepStatusSummary, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reason":
			out.Reason = string(in.String())
		case "worker_name":
			out.WorkerName = string(in.String())
		case "worker_id":
			out.WorkerID = string(in.String())
		case "job_name":
			out.JobName = string(in.String())
		case "pipeline_action_id":
			out.PipelineActionID = int64(in.Int64())
		case "pipeline_stage_id":
			out.PipelineStageID = int64(in.Int64())
		case "steps":
			if in.IsNull() {
				in.Skip()
				out.Steps = nil
			} else {
				in.Delim('[')
				if out.Steps == nil {
					if !in.IsDelim(']') {
						out.Steps = make([]ActionSummary, 0, 2)
					} else {
						out.Steps = []ActionSummary{}
					}
				} else {
					out.Steps = (out.Steps)[:0]
				}
				for !in.IsDelim(']') {
					var v23 ActionSummary
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk13(in, &v23)
					out.Steps = append(out.Steps, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk9(out *jwriter.Writer, in ExecutedJobSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"step_status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.StepStatusSummary == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.StepStatusSummary {
				if v24 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk12(out, v25)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"worker_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkerName))
	}
	{
		const prefix string = ",\"worker_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkerID))
	}
	{
		const prefix string = ",\"job_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JobName))
	}
	{
		const prefix string = ",\"pipeline_action_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineActionID))
	}
	{
		const prefix string = ",\"pipeline_stage_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineStageID))
	}
	{
		const prefix string = ",\"steps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Steps == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Steps {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk13(out, v27)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk13(in *jlexer.Lexer, out *ActionSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "step_name":
			out.StepName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk13(out *jwriter.Writer, in ActionSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"step_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StepName))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk12(in *jlexer.Lexer, out *StepStatusSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "step_order":
			out.StepOrder = int(in.Int())
		case "status":
			out.Status = string(in.String())
		case "start":
			out.Start = int64(in.Int64())
		case "done":
			out.Done = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk12(out *jwriter.Writer, in StepStatusSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"step_order\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StepOrder))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"done\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Done))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk7(in *jlexer.Lexer, out *Job) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pipeline_action_id":
			out.PipelineActionID = int64(in.Int64())
		case "pipeline_stage_id":
			out.PipelineStageID = int64(in.Int64())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "action":
			easyjsonF642ad3eDecodeGithubComOvhCdsSdk14(in, &out.Action)
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]PipelineBuildWarning, 0, 1)
					} else {
						out.Warnings = []PipelineBuildWarning{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v28 PipelineBuildWarning
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk15(in, &v28)
					out.Warnings = append(out.Warnings, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk7(out *jwriter.Writer, in Job) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pipeline_action_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineActionID))
	}
	{
		const prefix string = ",\"pipeline_stage_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PipelineStageID))
	}
	{
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComOvhCdsSdk14(out, in.Action)
	}
	{
		const prefix string = ",\"warnings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Warnings {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk15(out, v30)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk15(in *jlexer.Lexer, out *PipelineBuildWarning) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "action":
			easyjsonF642ad3eDecodeGithubComOvhCdsSdk14(in, &out.Action)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk15(out *jwriter.Writer, in PipelineBuildWarning) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComOvhCdsSdk14(out, in.Action)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk14(in *jlexer.Lexer, out *Action) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "group_id":
			if in.IsNull() {
				in.Skip()
				out.GroupID = nil
			} else {
				if out.GroupID == nil {
					out.GroupID = new(int64)
				}
				*out.GroupID = int64(in.Int64())
			}
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "deprecated":
			out.Deprecated = bool(in.Bool())
		case "step_name":
			out.StepName = string(in.String())
		case "optional":
			out.Optional = bool(in.Bool())
		case "always_executed":
			out.AlwaysExecuted = bool(in.Bool())
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make(RequirementList, 0, 1)
					} else {
						out.Requirements = RequirementList{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Requirement
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk16(in, &v31)
					out.Requirements = append(out.Requirements, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v32 Parameter
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk17(in, &v32)
					out.Parameters = append(out.Parameters, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actions":
			if in.IsNull() {
				in.Skip()
				out.Actions = nil
			} else {
				in.Delim('[')
				if out.Actions == nil {
					if !in.IsDelim(']') {
						out.Actions = make([]Action, 0, 1)
					} else {
						out.Actions = []Action{}
					}
				} else {
					out.Actions = (out.Actions)[:0]
				}
				for !in.IsDelim(']') {
					var v33 Action
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk14(in, &v33)
					out.Actions = append(out.Actions, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(Group)
				}
				easyjsonF642ad3eDecodeGithubComOvhCdsSdk18(in, &*out.Group)
			}
		case "first_audit":
			if in.IsNull() {
				in.Skip()
				out.FirstAudit = nil
			} else {
				if out.FirstAudit == nil {
					out.FirstAudit = new(AuditAction)
				}
				easyjsonF642ad3eDecodeGithubComOvhCdsSdk19(in, &*out.FirstAudit)
			}
		case "last_audit":
			if in.IsNull() {
				in.Skip()
				out.LastAudit = nil
			} else {
				if out.LastAudit == nil {
					out.LastAudit = new(AuditAction)
				}
				easyjsonF642ad3eDecodeGithubComOvhCdsSdk19(in, &*out.LastAudit)
			}
		case "editable":
			out.Editable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk14(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.GroupID != nil {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.GroupID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"deprecated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deprecated))
	}
	if in.StepName != "" {
		const prefix string = ",\"step_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StepName))
	}
	{
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Optional))
	}
	{
		const prefix string = ",\"always_executed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AlwaysExecuted))
	}
	{
		const prefix string = ",\"requirements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Requirements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Requirements {
				if v34 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk16(out, v35)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Parameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Parameters {
				if v36 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk17(out, v37)
			}
			out.RawByte(']')
		}
	}
	if len(in.Actions) != 0 {
		const prefix string = ",\"actions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Actions {
				if v38 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk14(out, v39)
			}
			out.RawByte(']')
		}
	}
	if in.Group != nil {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComOvhCdsSdk18(out, *in.Group)
	}
	if in.FirstAudit != nil {
		const prefix string = ",\"first_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComOvhCdsSdk19(out, *in.FirstAudit)
	}
	if in.LastAudit != nil {
		const prefix string = ",\"last_audit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComOvhCdsSdk19(out, *in.LastAudit)
	}
	if in.Editable {
		const prefix string = ",\"editable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Editable))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk19(in *jlexer.Lexer, out *AuditAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action_id":
			out.ActionID = int64(in.Int64())
		case "data_type":
			out.DataType = string(in.String())
		case "data_before":
			out.DataBefore = string(in.String())
		case "data_after":
			out.DataAfter = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "triggered_by":
			out.TriggeredBy = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "event_type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk19(out *jwriter.Writer, in AuditAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ActionID))
	}
	{
		const prefix string = ",\"data_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataType))
	}
	{
		const prefix string = ",\"data_before\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataBefore))
	}
	{
		const prefix string = ",\"data_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DataAfter))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"triggered_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggeredBy))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"event_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk18(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]GroupMember, 0, 1)
					} else {
						out.Members = []GroupMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v40 GroupMember
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk20(in, &v40)
					out.Members = append(out.Members, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "admin":
			out.Admin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk18(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.Members {
				if v41 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk20(out, v42)
			}
			out.RawByte(']')
		}
	}
	if in.Admin {
		const prefix string = ",\"admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Admin))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk20(in *jlexer.Lexer, out *GroupMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "admin":
			out.Admin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk20(out *jwriter.Writer, in GroupMember) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fullname))
	}
	if in.Admin {
		const prefix string = ",\"admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Admin))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk17(in *jlexer.Lexer, out *Parameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "advanced":
			out.Advanced = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk17(out *jwriter.Writer, in Parameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Advanced {
		const prefix string = ",\"advanced\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Advanced))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk16(in *jlexer.Lexer, out *Requirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "action_id":
			out.ActionID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk16(out *jwriter.Writer, in Requirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"action_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ActionID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk4(in *jlexer.Lexer, out *WorkflowNodeRunManual) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payload":
			if m, ok := out.Payload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Payload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Payload = in.Interface()
			}
		case "pipeline_parameter":
			if in.IsNull() {
				in.Skip()
				out.PipelineParameters = nil
			} else {
				in.Delim('[')
				if out.PipelineParameters == nil {
					if !in.IsDelim(']') {
						out.PipelineParameters = make([]Parameter, 0, 1)
					} else {
						out.PipelineParameters = []Parameter{}
					}
				} else {
					out.PipelineParameters = (out.PipelineParameters)[:0]
				}
				for !in.IsDelim(']') {
					var v43 Parameter
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk17(in, &v43)
					out.PipelineParameters = append(out.PipelineParameters, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "username":
			out.Username = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk4(out *jwriter.Writer, in WorkflowNodeRunManual) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Payload.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Payload.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Payload))
		}
	}
	{
		const prefix string = ",\"pipeline_parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PipelineParameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.PipelineParameters {
				if v44 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk17(out, v45)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"fullname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk3(in *jlexer.Lexer, out *WorkflowNodeRunHookEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payload":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Payload = make(map[string]string)
				} else {
					out.Payload = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v46 string
					v46 = string(in.String())
					(out.Payload)[key] = v46
					in.WantComma()
				}
				in.Delim('}')
			}
		case "uuid":
			out.WorkflowNodeHookUUID = string(in.String())
		case "parent_workflow":
			easyjsonF642ad3eDecode(in, &out.ParentWorkflow)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk3(out *jwriter.Writer, in WorkflowNodeRunHookEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Payload == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v47First := true
			for v47Name, v47Value := range in.Payload {
				if v47First {
					v47First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v47Name))
				out.RawByte(':')
				out.String(string(v47Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkflowNodeHookUUID))
	}
	{
		const prefix string = ",\"parent_workflow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncode(out, in.ParentWorkflow)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecode(in *jlexer.Lexer, out *struct {
	Key       string `json:"key" db:"-"`
	Name      string `json:"name" db:"-"`
	Run       int64  `json:"run" db:"-"`
	HookRunID string `hook_run_id:"uuid" db:"-"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "run":
			out.Run = int64(in.Int64())
		case "HookRunID":
			out.HookRunID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncode(out *jwriter.Writer, in struct {
	Key       string `json:"key" db:"-"`
	Name      string `json:"name" db:"-"`
	Run       int64  `json:"run" db:"-"`
	HookRunID string `hook_run_id:"uuid" db:"-"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"run\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Run))
	}
	{
		const prefix string = ",\"HookRunID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HookRunID))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk21(in *jlexer.Lexer, out *EventRunWorkflowJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "status":
			out.Status = string(in.String())
		case "start":
			out.Start = int64(in.Int64())
		case "done":
			out.Done = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk21(out *jwriter.Writer, in EventRunWorkflowJob) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.Start != 0 {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	if in.Done != 0 {
		const prefix string = ",\"done\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Done))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventRunWorkflowJob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventRunWorkflowJob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventRunWorkflowJob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventRunWorkflowJob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk21(l, v)
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk22(in *jlexer.Lexer, out *EventRunWorkflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "num":
			out.Number = int64(in.Int64())
		case "status":
			out.Status = string(in.String())
		case "start":
			out.Start = int64(in.Int64())
		case "last_execution":
			out.LastExecution = int64(in.Int64())
		case "last_modified":
			out.LastModified = int64(in.Int64())
		case "last_modified_nano":
			out.LastModifiedNano = int64(in.Int64())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]WorkflowRunTag, 0, 1)
					} else {
						out.Tags = []WorkflowRunTag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v48 WorkflowRunTag
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk23(in, &v48)
					out.Tags = append(out.Tags, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk22(out *jwriter.Writer, in EventRunWorkflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"num\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Number))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"last_execution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastExecution))
	}
	{
		const prefix string = ",\"last_modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModified))
	}
	{
		const prefix string = ",\"last_modified_nano\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastModifiedNano))
	}
	{
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.Tags {
				if v49 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk23(out, v50)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventRunWorkflow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventRunWorkflow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventRunWorkflow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventRunWorkflow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk22(l, v)
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk23(in *jlexer.Lexer, out *WorkflowRunTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag":
			out.Tag = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk23(out *jwriter.Writer, in WorkflowRunTag) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk24(in *jlexer.Lexer, out *EventNotif) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]string, 0, 4)
					} else {
						out.Recipients = []string{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v51 string
					v51 = string(in.String())
					out.Recipients = append(out.Recipients, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subject":
			out.Subject = string(in.String())
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk24(out *jwriter.Writer, in EventNotif) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"recipients\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Recipients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.Recipients {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.String(string(v53))
			}
			out.RawByte(']')
		}
	}
	if in.Subject != "" {
		const prefix string = ",\"subject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventNotif) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventNotif) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventNotif) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventNotif) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk24(l, v)
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk25(in *jlexer.Lexer, out *EventJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = int64(in.Int64())
		case "jobName":
			out.JobName = string(in.String())
		case "jobID":
			out.JobID = int64(in.Int64())
		case "status":
			out.Status = string(in.String())
		case "queued":
			out.Queued = int64(in.Int64())
		case "start":
			out.Start = int64(in.Int64())
		case "done":
			out.Done = int64(in.Int64())
		case "modelName":
			out.ModelName = string(in.String())
		case "pipelineName":
			out.PipelineName = string(in.String())
		case "type":
			out.PipelineType = string(in.String())
		case "projectKey":
			out.ProjectKey = string(in.String())
		case "applicationName":
			out.ApplicationName = string(in.String())
		case "environmentName":
			out.EnvironmentName = string(in.String())
		case "branchName":
			out.BranchName = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk25(out *jwriter.Writer, in EventJob) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Version))
	}
	if in.JobName != "" {
		const prefix string = ",\"jobName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JobName))
	}
	if in.JobID != 0 {
		const prefix string = ",\"jobID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.JobID))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.Queued != 0 {
		const prefix string = ",\"queued\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Queued))
	}
	if in.Start != 0 {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	if in.Done != 0 {
		const prefix string = ",\"done\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Done))
	}
	if in.ModelName != "" {
		const prefix string = ",\"modelName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ModelName))
	}
	if in.PipelineName != "" {
		const prefix string = ",\"pipelineName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PipelineName))
	}
	if in.PipelineType != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PipelineType))
	}
	if in.ProjectKey != "" {
		const prefix string = ",\"projectKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	if in.ApplicationName != "" {
		const prefix string = ",\"applicationName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ApplicationName))
	}
	if in.EnvironmentName != "" {
		const prefix string = ",\"environmentName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EnvironmentName))
	}
	if in.BranchName != "" {
		const prefix string = ",\"branchName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BranchName))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventJob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventJob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventJob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventJob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk25(l, v)
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk26(in *jlexer.Lexer, out *EventFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "current_item":
			out.CurrentItem = int(in.Int())
		case "filter":
			easyjsonF642ad3eDecodeGithubComOvhCdsSdk27(in, &out.Filter)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk26(out *jwriter.Writer, in EventFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"current_item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurrentItem))
	}
	{
		const prefix string = ",\"filter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComOvhCdsSdk27(out, in.Filter)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk26(l, v)
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk27(in *jlexer.Lexer, out *TimelineFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "projects":
			if in.IsNull() {
				in.Skip()
				out.Projects = nil
			} else {
				in.Delim('[')
				if out.Projects == nil {
					if !in.IsDelim(']') {
						out.Projects = make([]ProjectFilter, 0, 1)
					} else {
						out.Projects = []ProjectFilter{}
					}
				} else {
					out.Projects = (out.Projects)[:0]
				}
				for !in.IsDelim(']') {
					var v54 ProjectFilter
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk28(in, &v54)
					out.Projects = append(out.Projects, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk27(out *jwriter.Writer, in TimelineFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"projects\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Projects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Projects {
				if v55 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk28(out, v56)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk28(in *jlexer.Lexer, out *ProjectFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "workflow_names":
			if in.IsNull() {
				in.Skip()
				out.WorkflowNames = nil
			} else {
				in.Delim('[')
				if out.WorkflowNames == nil {
					if !in.IsDelim(']') {
						out.WorkflowNames = make([]string, 0, 4)
					} else {
						out.WorkflowNames = []string{}
					}
				} else {
					out.WorkflowNames = (out.WorkflowNames)[:0]
				}
				for !in.IsDelim(']') {
					var v57 string
					v57 = string(in.String())
					out.WorkflowNames = append(out.WorkflowNames, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk28(out *jwriter.Writer, in ProjectFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"workflow_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.WorkflowNames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.WorkflowNames {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk29(in *jlexer.Lexer, out *EventEngine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk29(out *jwriter.Writer, in EventEngine) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventEngine) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventEngine) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventEngine) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventEngine) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk29(l, v)
}
func easyjsonF642ad3eDecodeGithubComOvhCdsSdk30(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "hostname":
			out.Hostname = string(in.String())
		case "cdsname":
			out.CDSName = string(in.String())
		case "type_event":
			out.EventType = string(in.String())
		case "payload":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Payload = make(map[string]interface{})
				} else {
					out.Payload = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v60 interface{}
					if m, ok := v60.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v60.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v60 = in.Interface()
					}
					(out.Payload)[key] = v60
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attempt":
			out.Attempts = int(in.Int())
		case "username":
			out.Username = string(in.String())
		case "user_mail":
			out.UserMail = string(in.String())
		case "project_key":
			out.ProjectKey = string(in.String())
		case "application_name":
			out.ApplicationName = string(in.String())
		case "pipeline_name":
			out.PipelineName = string(in.String())
		case "environment_name":
			out.EnvironmentName = string(in.String())
		case "workflow_name":
			out.WorkflowName = string(in.String())
		case "workflow_run_num":
			out.WorkflowRunNum = int64(in.Int64())
		case "workflow_run_num_sub":
			out.WorkflowRunNumSub = int64(in.Int64())
		case "status":
			out.Status = string(in.String())
		case "tag":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]WorkflowRunTag, 0, 1)
					} else {
						out.Tags = []WorkflowRunTag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v61 WorkflowRunTag
					easyjsonF642ad3eDecodeGithubComOvhCdsSdk23(in, &v61)
					out.Tags = append(out.Tags, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "event_integrations_id":
			if in.IsNull() {
				in.Skip()
				out.EventIntegrationsID = nil
			} else {
				in.Delim('[')
				if out.EventIntegrationsID == nil {
					if !in.IsDelim(']') {
						out.EventIntegrationsID = make([]int64, 0, 8)
					} else {
						out.EventIntegrationsID = []int64{}
					}
				} else {
					out.EventIntegrationsID = (out.EventIntegrationsID)[:0]
				}
				for !in.IsDelim(']') {
					var v62 int64
					v62 = int64(in.Int64())
					out.EventIntegrationsID = append(out.EventIntegrationsID, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComOvhCdsSdk30(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"hostname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"cdsname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CDSName))
	}
	{
		const prefix string = ",\"type_event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Payload == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v63First := true
			for v63Name, v63Value := range in.Payload {
				if v63First {
					v63First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v63Name))
				out.RawByte(':')
				if m, ok := v63Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v63Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v63Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"attempt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Attempts))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if in.UserMail != "" {
		const prefix string = ",\"user_mail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserMail))
	}
	if in.ProjectKey != "" {
		const prefix string = ",\"project_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProjectKey))
	}
	if in.ApplicationName != "" {
		const prefix string = ",\"application_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ApplicationName))
	}
	if in.PipelineName != "" {
		const prefix string = ",\"pipeline_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PipelineName))
	}
	if in.EnvironmentName != "" {
		const prefix string = ",\"environment_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EnvironmentName))
	}
	if in.WorkflowName != "" {
		const prefix string = ",\"workflow_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkflowName))
	}
	if in.WorkflowRunNum != 0 {
		const prefix string = ",\"workflow_run_num\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowRunNum))
	}
	if in.WorkflowRunNumSub != 0 {
		const prefix string = ",\"workflow_run_num_sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WorkflowRunNumSub))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v64, v65 := range in.Tags {
				if v64 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComOvhCdsSdk23(out, v65)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"event_integrations_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.EventIntegrationsID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.EventIntegrationsID {
				if v66 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v67))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComOvhCdsSdk30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComOvhCdsSdk30(l, v)
}
