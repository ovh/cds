[
    {
        "uri": "./tat/ecosystem/al2tat",
        "title": "Al2Tat",
        "content": "---\ntitle: \"Al2Tat\"\nweight: 1\ntoc: true\nprev: \"/ecosystem\"\nnext: \"/ecosystem/mail2tat\"\n\n---\n\nimg align=\"right\" src=\"https://raw.githubusercontent.com/ovh/tat/master/tat.png\"\n\nThis microservice can be used :\n\nto send alerts to Tat (https://github.com/ovh/tat).\nto send monitoring events to Tat.\n\nAlerts\nAn alert is an event with a 'AL' status. An alert can be replayed, al2tat attach\nthis on a root message. If there is a new occurrence with same summary with\n'UP' status, alert will be closed.\nBest Tat view for theses: StandardView (https://github.com/ovh/tatwebui-plugin-standardview)\n\nCompute Replay: if alarm already exists, the replay will be a reply of root alarm\nPre-select Label :\n a new alarm \"AL\" will receive label \"open\" with red color on tat\n a new alarm \"UP\" will receive label \"done\" with green color on tat\n A new alarm \"AL\" will close previous \"AL\" in same thread\n\n Monitoring Events\nAn event monitoring is attached to one item (host, soft, person... whatever), all events are held three days, and only 30 events are retained after 3d. Best Tat view for theses: Monitoring View (https://github.com/ovh/tatwebui-plugin-monitoringview)\n\nUsage\n Alert\nStore new alert\n\nIf Tat_topic == \"\", default value is /Internal/Alerts\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: yourTatUser\" \\\n    -H \"Tat_password: yourTatPassword\" \\\n    -H \"Tat_topic: /Internal/Alerts\" \\\n    -d '{\n    \"status\": \"AL\",\n    \"nbAlert\": 1,\n    \"service\": \"YourService\",\n    \"summary\": \"your alert description here\"\n}' http://hostname:port/alert\n\nnbAlert can be used to represent the number of elements impacted by your alert.\nIt is not used to compute alert's repetitions.\n\n Store new alert with a label\n\nIf Tat_topic == \"\", default value is /Internal/Alerts\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: tatusername\" \\\n    -H \"Tat_password: tatpassword\" \\\n    -H \"Tat_topic: /Internal/Alerts\" \\\n    -d '{\n    \"status\": \"AL\",\n    \"nbAlert\": 3,\n    \"service\": \"YourService\",\n    \"labels\": [{\"text\": \"critical:high\", \"color\":\"#d04437\"}],\n    \"summary\": \" your alert description here\"\n}' http://hostname:port/alert\n\nSync vs Async\n\nPOST on http://hostname:port/alert: send asynchronous to tat engine.\n\nPOST on http://hostname:port/alert/sync: send synchronous to tat engine, and return message\n\n Purge alerts\n\nYou have to call endpoint: /purge/:skip/:limit to purge Tat_topic, for keeping\n30 replies on each alerts.\n\nPurge example the last 100 alerts on tat :\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: tatusername\" \\\n    -H \"Tat_password: tatpassword\" \\\n    -H \"Tat_topic: /Internal/Alerts\"\n}' http://hostname:port/purge/0/100\n\nMonitoring\n Store a new event\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: yourTatUser\" \\\n    -H \"Tat_password: yourTatPassword\" \\\n    -H \"Tat_topic: /Internal/Monitoring\" \\\n    -d '{\n    \"status\": \"AL\",\n    \"item\": \"yourApplication\",\n    \"service\": \"SERVICE\",\n    \"summary\": \"your description\",\n    \"labels\": [{\"text\": \"critical:high\", \"color\":\"#d04437\"}]\n}' http://hostname:port/monitoring\n\nwith :\n\nstatus: AL or UP\nservice: your service\nsummary: description of event\nitem: your application name, or host...\nlabels: facultative, add labels to message root, the first message sent for an item.\n\nSync vs Async\n\nPOST on http://hostname:port/monitoring: send asynchronous to tat engine.\n\nPOST on http://hostname:port/monitoring/sync: send synchronous to tat engine, and return message\n\n System\nVersion\n\ncurl -XGET http://tatHostname:tatPort/version\n\n RUN\n\nAl2Tat Flags Options\n\nFlags:\n  -h, --help[=false]: help for al2tat\n      --listen-port=\"8082\": Tat Engine Listen Port\n      --log-level=\"\": Log Level: debug, info or warn\n      --production[=false]: Production mode\n      --url-tat-engine=\"http://localhost:8080\": URL Tat Engine\n\n Run with Docker\ndocker build -t al2tat .\ndocker run -it --rm --name al2tat-instance1 hostname:port al2tat\n\nDev RUN\n\ngo get && go build && ./al2tat --help\n\n Environment\n\nAL2TATLISTENPORT\n\nExample :\nexport AL2TATLISTENPORT=8181 && ./al2tat\nis same than\n./al2tat --listen-port=\"8181\"\n\nExamples for POSTing an alert\n\n Perl version\n\npackage AL2TAT;\n\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(run getMessage);\n\nuse strict;\nuse warnings;\nuse LWP::UserAgent;\n\nsub run\n{\n  my hostname:port/alert\";\n  my $TATTOPICKEY = \"/Private/yourTopic\";\n  my $TATUSERKEY = \"yourUsernameOnTat\";\n  my $TATPASSWORDKEY = \"yourTatVeryLongPasswordHere\";\n\n  my $message = getMessage();\n  sendMessage($TATURLKEY, $TATTOPICKEY, $TATUSERKEY, $TATPASSWORDKEY, $message);\n}\n\nsub sendMessage\n{\n    my $url = $_[0];\n    my $topic = $_[1];\n    my $user = $_[2];\n    my $password = $_[3];\n    my $message = $_[4];\n\n    my $req = HTTP::Request-new(POST = $url);\n    $req-header('Content-Type' = 'application/json');\n    $req-header('Tat_username' = $user);\n    $req-header('Tat_password' = $password);\n    $req-header('Tat_topic' = $topic);\n\n    my $post_data = '{\"status\": \"AL\", \"nbAlert\": 1, \"service\": \"TEST\", \"summary\": \"'.$message.'\"}';\n    $req-content($post_data);\n\n    my $ua = LWP::UserAgent-new;\n    my $resp = $ua-request($req);\n\n    print \"Response Status: \", $resp-code, \"\\n\";\n    if ($resp-is_success) {\n        my $message = $resp-decoded_content;\n        print \"Received reply: $message\\n\";\n    } else {\n        print \"HTTP POST error message: \", $resp-message, \"\\n\";\n    }\n}\n\nsub getMessage\n{\n    return \"Message from perl \";\n}\n\nrun()\n\n",
        "tags": []
    },
    {
        "uri": "./tat/ecosystem/index",
        "title": "Ecosystem",
        "content": "---\ntitle: \"Ecosystem\"\nweight: 0\nchapter: true\nnext: \"/ecosystem/al2tat\"\nicon: \"b6. /b\"\n---\n\nChapter 6\n\n Ecosystem\n",
        "tags": []
    },
    {
        "uri": "./tat/ecosystem/mail2tat",
        "title": "Mail2Tat",
        "content": "---\ntitle: \"Mail2Tat\"\nweight: 2\ntoc: true\nprev: \"/ecosystem/al2tat\"\nnext: \"/ecosystem/tat2xmpp\"\n\n---\n\nCreate a message on Tat by sending a mail. Mail2tat check an imap account\nand create a message for each mail received.\n\nTat Configuration\n\nAdd Read Write to user tat.system.mail on your destination topic\nCheck option : \"System User can force dateCreation of message ?\"\n\n Simple usage\n\nSend a mail to tat@your-domain with\nsubjet : topicName\nBody : text of message\nExample of subject : /Internal/YourTopic\n\nThread on Tat\n\nSend a mail to tat@your-domain with :\nsubjet : topicName,idGroup\nBody: text of message\n\nExample of subject: /Internal/YourTopic,something\n\n FAQ\nTime between sending mail and post on tat ? Each minute : check mail and send on tat.\nRestriction on From ? Yes, see arg  : only @your-domain. All mail received from another domain are not send on tat.\n\nUsage\n\n./api -h\nMAIL2TAT - Mail to Tat\n\nUsage:\n  mail2tat [flags]\n\nFlags:\n      --activate-cron                Activate Cron (default true)\n      --imap-host string             IMAP Host\n      --imap-password string         IMAP Password\n      --imap-username string         IMAP Username\n      --listen-port string           RunKPI Listen Port (default \"8084\")\n      --log-level string             Log Level : debug, info or warn\n      --password-tat-engine string   Password Tat Engine\n      --production                   Production mode\n      --url-tat-engine string        URL Tat Engine (default \"http://localhost:8080\")\n      --username-tat-engine string   Username Tat Engine\n",
        "tags": []
    },
    {
        "uri": "./tat/ecosystem/tat2xmpp",
        "title": "tat2xmpp",
        "content": "---\ntitle: \"tat2xmpp\"\nweight: 2\ntoc: true\nprev: \"/ecosystem/mail2tat\"\n\n---\n\nTAT configuration\n\n[...]\n TAT 2 XMPP Configuration\nTATTAT2XMPPUSERNAME=tat.system.jabber\nTATTAT2XMPPURL=http://tat2xmpp.your-domain\nTATTAT2XMPPKEY=a-key-used-by-tat2xmpp\n[...]\n\nRunning TAT Engine\n./api\n\n TAT2XMPP Configuration\n\nTAT2XMPPLISTENPORT=8080\nTAT2XMPPHOOKKEY=a-key-used-by-tat2xmpp\nTAT2XMPPUSERNAMETAT_ENGINE=tat.system.jabber\nTAT2XMPPXMPPBOT_PASSWORD=password-of-bot-user-on-xmpp\nTAT2XMPP_PRODUCTION=true\nTAT2XMPPPASSWORDTAT_ENGINE=very-long-tat-password-of-tat.system.jabber\nTAT2XMPPXMPPBOT_JID=robot.tat@your-domain\nTAT2XMPPXMPPSERVER=your-jabber-server:5222\nTAT2XMPPURLTAT_ENGINE=http://tat.your-domain\n\nRunning TAT2XMPP\n./tat2xmpp\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/api-groups",
        "title": "API - Groups",
        "content": "---\ntitle: \"API - Groups\"\nweight: 5\ntoc: true\nprev: \"/engine/api-users\"\nnext: \"/engine/api-presences\"\n\n---\n\nCreate a group\n\nOnly for Tat Admin\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"name\": \"groupName\", \"description\": \"Group Description\"}' \\\n    https://tatHostname:tatPort/group\n\n Update a group\n\nOnly for Tat Admin\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"newName\": \"groupName\", \"newDescription\": \"Group Description\"}' \\\n    https://tatHostname:tatPort/group/groupName\n\nGetting groups List\n\ncurl -XGET https://tatHostname:tatPort/groups?skip=skip&limit=limit | python -m json.tool\ncurl -XGET https://tatHostname:tatPort/groups?skip=skip&limit=limit&argName=valName&arg2Name=val2Name | python -m json.tool\n\n Parameters\n\nskip: Skip skips over the n initial documents from the query results\nlimit: Limit restricts the maximum number of documents retrieved\nidGroup: Id Group\nname: Name of group\ndescription: Description of group\ndateMinCreation: filter result on dateCreation, timestamp Unix format\ndateMaxCreation: filter result on dateCreation, timestamp Unix Format\n\nDelete a group\n\nOnly for Tat Admin\n\ncurl -XDELETE \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/group/groupName\n\n Add a user to a group\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"groupname\": \"groupName\", \"username\": \"usernameToAdd\"}' \\\n    https://tatHostname:tatPort/group/add/user\n\nDelete a user from a group\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"groupname\": \"groupName\", \"username\": \"usernameToAdd\"}' \\\n    https://tatHostname:tatPort/group/remove/user\n\n Add an admin user to a group\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"groupname\": \"groupName\", \"username\": \"usernameToAdd\"}' \\\n    https://tatHostname:tatPort/group/add/adminuser\n\nDelete an admin user from a group\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"groupname\": \"groupName\", \"username\": \"usernameToAdd\"}' \\\n    https://tatHostname:tatPort/group/remove/adminuser\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/api-messages",
        "title": "API - Messages",
        "content": "---\ntitle: \"API - Messages\"\nweight: 2\ntoc: true\nprev: \"/engine/general\"\nnext: \"/engine/api-topics\"\n\n---\n\nStore a new message\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"text\": \"text\" }' \\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nYou can add labels from the creation\n\ncurl -XPOST \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"text\": \"text\", \"dateCreation\": 11123232, \"labels\": [{\"text\": \"labelA\", \"color\": \"eeeeee\"}, {\"text\": \"labelB\", \"color\": \"#ffffff\"}] }' \\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nYou can add replies from the creation\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n  -d '{ \"text\": \"text\", \"replies\":[\"reply A\", \"reply B\"] }' \\\n  https://tatHostname:tatPort/message/topic/sub-topic\n\nYou can add replies, with labels, from the creation\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n  -d '{ \"text\": \"text msg root\", \"messages\": [{ \"text\": \"text reply\", \"labels\": [{\"text\": \"labelA\", \"color\": \"#eeeeee\"}] }] }' \\\n  https://tatHostname:tatPort/message/topic/sub-topic\n\nIf you use a system user, you can force message's date\n\ncurl -XPOST \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"text\": \"text\", \"dateCreation\": 11123232 }' \\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nReturn HTTP 201 if OK\n\nStore some messages\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '[{ \"text\": \"text message A\" },{ \"text\": \"text message B\", \"labels\": [{\"text\": \"labelA\", \"color\": \"eeeeee\"}] }]' \\\n\thttps://tatHostname:tatPort/messages/topic/sub-topic\n\nAction on a existing message\n\nReply, Like, Unlike, Add Label, Remove Label, etc... use idReference but it's possible to use :\n\nTagReference\nStartTagReference\nLabelReference\nStartLabelReference\n\ncurl -XPOST \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"text\": \"text\", \"startTagReference\": \"keyTag:\", \"action\": \"reply\"}'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nIf several messages match to your request, Tat gives you a HTTP Bad Request.\n\n Reply to a message\n\ncurl -XPOST \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"text\": \"text\", \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"reply\"}'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nReply to a message, with create root message if necessary\n\nThis request will :\n\nCreate the root message with text the root message aaa\nIf a message with a tag #aaa already exists, this message will be used to add replies on it\nAdd two replies reply A and reply B\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n  -d '{ \"text\": \"the root message #aaa\", \"replies\":[\"reply A\", \"reply B\"], \"tagReference\": \"aaa\"}' \\\n  https://tatHostname:tatPort/message/topic/sub-topic\n\nLike a message\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"like\"}'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\n Unlike a message\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"unlike\"}'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nAdd a label to a message\noption is the background color of the label.\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"label\", \"text\": \"myLabel\", \"option\": \"rgba(143,199,148,0.61)\"}'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\n Remove a label from a message\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"unlabel\", \"text\": \"myLabel\"}'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nRemove all labels and add new ones\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"relabel\", \"labels\": [{\"text\": \"labelA\", \"color\": \"eeeeee\"}, {\"text\": \"labelB\", \"color\": \"#ffffff\"}]}'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nReturn HTTP 201 if OK\n\nRemove some labels and add new ones\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"relabel\", \"labels\": [{\"text\": \"labelA\", \"color\": \"eeeeee\"}, {\"text\": \"labelB\", \"color\": \"#ffffff\"}], \"options\": [\"labelAToRemove\", \"labelAToRemove\"] }'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nUpdate a message\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"update\", \"text\": \"my New Mesage updated\"}'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\n Concat a message : adding additional text to one message\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"concat\", \"text\": \" additional text\"}'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nMove a message to another topic\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"move\", \"option\": \"/newTopic/subNewTopic\"}'\\\n\thttps://tatHostname:tatPort/message/oldTOpic/oldSubTopic\n\n Delete a message\ncurl -XDELETE \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\thttps://tatHostname:tatPort/message/nocascade/9797q87KJhqsfO7Usdqd/topic/subTopic\n\nDelete a message and its replies\ncurl -XDELETE \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\thttps://tatHostname:tatPort/message/cascade/9797q87KJhqsfO7Usdqd/topic/subTopic\n\n Delete a message and its replies, even if it's in Tasks Topic of one user\ncurl -XDELETE \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\thttps://tatHostname:tatPort/message/cascadeforce/9797q87KJhqsfO7Usdqd/topic/subTopic\n\nDelete a list of messages\ncurl -XDELETE \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\thttps://tatHostname:tatPort/messages/nocascade/topic/subTopic?skip=skip&limit=limit&argName=valName&arg2Name=val2Name\n\nsee https://github.com/ovh/tatparameters for all parameters\n\nDelete a list of messages and its replies\ncurl -XDELETE \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\thttps://tatHostname:tatPort/messages/cascade/topic/subTopic?skip=skip&limit=limit&argName=valName&arg2Name=val2Name\n\nsee https://github.com/ovh/tatparameters for all parameters\n\nDelete a list of messages and its replies, even if it's a reply or it's in Tasks Topic of one user\ncurl -XDELETE \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\thttps://tatHostname:tatPort/messages/cascadeforce/topic/subTopic?skip=skip&limit=limit&argName=valName&arg2Name=val2Name\n\nsee https://github.com/ovh/tatparameters for all parameters\n\nCreate a task from a message\nAdd a message to topic: /Private/username/Tasks.\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"task\" }'\\\n\thttps://tatHostname:tatPort/message/Private/username/Tasks\n\n Remove a message from tasks\nRemove a message from the topic: /Private/username/Tasks\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"untask\" }'\\\n\thttps://tatHostname:tatPort/message/Private/username/Tasks\n\nVote UP a message\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"voteup\" }'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\n Remove a Vote UP from a message\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"unvoteup\" }'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nVote Down a message\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"votedown\" }'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\n Remove Vote Down from a message\n\ncurl -XPUT \\\n    -H 'Content-Type: application/json' \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"idReference\": \"9797q87KJhqsfO7Usdqd\", \"action\": \"unvotedown\" }'\\\n\thttps://tatHostname:tatPort/message/topic/sub-topic\n\nGetting Messages List\ncurl -XGET https://tatHostname:tatPort/messages/topic?skip=skip&limit=limit\ncurl -XGET https://tatHostname:tatPort/messages/topic?skip=skip&limit=limit&argName=valName&arg2Name=val2Name\n\nGetting messages on one Public Topic (Read Only):\n\ncurl -XGET https://tatHostname:tatPort/read/topic?skip=skip&limit=limit\ncurl -XGET https://tatHostname:tatPort/read/topic?skip=skip&limit=limit&argName=valName&arg2Name=val2Name\n\n Parameters\n\nallIDMessage          Search in All ID Message (idMessage, idReply, idRoot)\nandLabel              Search by label (and) : could be labelA,labelB\nandTag                Search by tag (and) : could be tagA,tagB\nidMessage             Search by IDMessage\ninReplyOfID           Search by IDMessage InReply\ninReplyOfIDRoot       Search by IDMessage IdRoot\nlabel                 Search by label: could be labelA,labelB\ndateMaxCreation       Search by dateCreation (timestamp), select messages where dateCreation <= dateMaxCreation\ndateMaxUpdate         Search by dateUpdate (timestamp), select messages where dateUpdate <= dateMaxUpdate\ndateMinCreation       Search by dateCreation (timestamp), select messages where dateCreation = dateMinCreation\ndateMinUpdate         Search by dateUpdate (timestamp), select messages where dateUpdate = dateMinUpdate\ndateRefCreation            This have to be used with dateRefDeltaMinCreation and / or dateRefDeltaMaxCreation. This could be BeginningOfMinute, BeginningOfHour, BeginningOfDay, BeginningOfWeek, BeginningOfMonth, BeginningOfQuarter, BeginningOfYear\ndateRefDeltaMaxCreation    Add seconds to dateRefCreation flag\ndateRefDeltaMaxUpdate      Add seconds to dateRefUpdate flag\ndateRefDeltaMinCreation    Add seconds to dateRefCreation flag\ndateRefDeltaMinUpdate      Add seconds to dateRefUpdate flag\ndateRefUpdate              This have to be used with dateRefDeltaMinUpdate and / or dateRefDeltaMaxUpdate. This could be BeginningOfMinute, BeginningOfHour, BeginningOfDay, BeginningOfWeek, BeginningOfMonth, BeginningOfQuarter, BeginningOfYear\nlastHourMaxCreation   Search by dateCreation, select messages where dateCreation <= Now Beginning Of Hour - (60 * lastHourMaxCreation)\nlastHourMaxUpdate     Search by dateUpdate, select messages where dateUpdate <= Now Beginning Of Hour - (60 * lastHourMaxCreation)\nlastHourMinCreation   Search by dateCreation, select messages where dateCreation = Now Beginning Of Hour - (60 * lastHourMinCreation)\nlastHourMinUpdate     Search by dateUpdate, select messages where dateUpdate = Now Beginning Of Hour - (60 * lastHourMinCreation)\nlastMaxCreation       Search by dateCreation (duration in second), select messages where dateCreation <= now - lastMaxCreation\nlastMaxCreation       Search by dateCreation (duration in second), select messages where dateCreation <= now - lastMaxCreation\nlastMaxUpdate         Search by dateUpdate (duration in second), select messages where dateUpdate <= now - lastMaxCreation\nlastMinCreation       Search by dateCreation (duration in second), select messages where dateCreation = now - lastMinCreation\nlastMinUpdate         Search by dateUpdate (duration in second), select messages where dateUpdate = now - lastMinCreation\nlimitMaxNbReplies     In onetree mode, filter root messages with min or equals maxNbReplies\nlimitMaxNbVotesDown   Search by nbVotesDown\nlimitMaxNbVotesUP     Search by nbVotesUP\nlimitMinNbReplies     In onetree mode, filter root messages with more or equals minNbReplies\nlimitMinNbVotesDown   Search by nbVotesDown\nlimitMinNbVotesUP     Search by nbVotesUP\nnotLabel              Search by label (exclude): could be labelA,labelB\nnotTag                Search by tag (exclude) : could be tagA,tagB\nonlyCount             onlyCount=true: only count messages, without retrieve msg. limit, skip, treeview criterias are ignored.\nonlyMsgRoot string           onlyMsgRoot=true: restricts to root message only (inReplyOfIDRoot empty). If treeView is used, limit search criteria to root * message are still given, independently of search criteria.\nstartLabel            Search by a label prefix: startLabel='mykey:,myKey2:'\nstartTag              Search by a tag prefix: startTag='mykey:,myKey2:'\ntag                   Search by tag : could be tagA,tagB\ntext                  Search by text\ntopic                 Search by topic\ntreeView              Tree View of messages: onetree or fulltree. Default: notree\nusername              Search by username : could be usernameA,usernameB\n\nExamples\n\n GET 100 last created messages messages\ncurl -XGET https://tatHostname:tatPort/messages/topicA?skip=0&limit=100\n\nFilter by date Creation\n\nThis will return 100 messages created between 16/7/2014, 22:55:46 and 16/8/2014, 22:55:46\n\n1405544146 is 16/7/2014, 22:55:46\n1408222546 is 16/8/2014, 22:55:46\n\ncurl -XGET https://tatHostname:tatPort/messages/topicA/subTopic?skip=0&limit=100&dateMinCreation=1405544146&dateMaxCreation=1408222546\n\n Count messages created since 8 hours\n\ncurl -XGET https://tatHostname:tatPort/messages/topicA?onlyCount=true&lastHourMinCreation=8\n\nCount messages created since 3 days\n\nlastHourMinCreation : 24hours x 3 days = 72\n\ncurl -XGET https://tatHostname:tatPort/messages/topicA?onlyCount=true&lastHourMinCreation=72\n\n Count messages created since Beginning Of Month\n\ndateRefCreation : Select beginning of month with \"BeginningOfMonth\" pattern. Start at monday.\n\ncurl -XGET https://tatHostname:tatPort/messages/topicA?onlyCount=true&dateRefCreation=BeginningOfMonth\n\nCount messages created on Tuesday of current week\n\ndateRefCreation : Select beginning of week with \"BeginningOfWeek\" pattern. Start at monday.\ndateRefDeltaMinCreation : add seconds to dateRefCreation, to 60seconds x 60minutes x 24hours = 86400\ndateRefDeltaMaxCreation : add seconds to dateRefCreation, to 60seconds x 60minutes x 48hours = 172800\n\ncurl -XGET https://tatHostname:tatPort/messages/topicA?onlyCount=true&dateRefCreation=BeginningOfWeek&dateRefDeltaMinCreation=86400&dateRefDeltaMaxCreation=172800\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/api-presences",
        "title": "API - Presences",
        "content": "---\ntitle: \"API - Presences\"\nweight: 6\ntoc: true\nprev: \"/engine/api-groups\"\nnext: \"/engine/api-system\"\n\n---\n\nAdd presence\nStatus could be: online, offline, busy.\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\t-d '{ \"status\": \"online\" }' \\\n\thttps://tatHostname:tatPort/presenceget/topic/sub-topic\n\n Getting Presences\ncurl -XGET https://tatHostname:tatPort/presences/topic?skip=skip&limit=limit | python -m json.tool\ncurl -XGET https://tatHostname:tatPort/presences/topic?skip=skip&limit=limit&argName=valName&arg2Name=val2Name | python -m json.tool\n\nParameters\n\ntopic: /yourTopic/subTopic\nskip: Skip skips over the n initial presences from the query results\nlimit: Limit restricts the maximum number of presences retrieved\nstatus: status: online, offline, busy\ndateMinPresence: filter result on datePresence, timestamp Unix format\ndateMaxPresence: filter result on datePresence, timestamp Unix Format\nusername: username to search\n\n Examples\ncurl -XGET https://tatHostname:tatPort/presences/topicA?skip=0&limit=100 | python -m json.tool\ncurl -XGET https://tatHostname:tatPort/presences/topicA/subTopic?skip=0&limit=100&dateMinPresence=1405544146&dateMaxPresence=1405544146 | python -m json.tool\n\nDelete presence\nAdmin can delete presences a another user on one topic.\nUsers can delete their own presence.\n\ncurl -XDELETE \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: username\" \\\n    -H \"Tat_password: passwordOfUser\" \\\n\thttps://tatHostname:tatPort/presences/topic/sub-topic\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/api-system",
        "title": "API - System",
        "content": "---\ntitle: \"API - System\"\nweight: 6\ntoc: true\nprev: \"/engine/api-presences\"\nnext: \"/engine/simple-installation\"\n\n---\n\nSystem\n Version\n\ncurl -XGET https://tatHostname:tatPort/version\n\nStats\n\nFor Tat admin only.\n\n Count\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/stats/count\n\nInstance\n\nInfo about current instance of engine\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/stats/instance\n\n Distribution\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/stats/distribution\n\nDB Stats\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/stats/db/stats\n\n DB ServerStatus\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/stats/db/serverStatus\n\nDB Replica Set Status\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/stats/db/replSetGetStatus\n\n DB Replica Set Config\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/stats/db/replSetGetConfig\n\nDB Stats of each collections\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/stats/db/collections\n\n DB Stats slowest Queries\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/stats/db/slowestQueries\n\nSystem\n Capabilities\n\nReturn websocket-enabled and username-from-email parameters. See Tat Flags below.\ncurl -XGET https://tatHostname:tatPort/capabilities\n\nFlush Cache\ncurl -XGET https://tatHostname:tatPort/system/cache/clean\n\n Cache Info\ncurl -XGET https://tatHostname:tatPort/system/cache/info\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/api-topics",
        "title": "API - Topics",
        "content": "---\ntitle: \"API - Topics\"\nweight: 3\ntoc: true\nprev: \"/engine/api-messages\"\nnext: \"/engine/api-users\"\n\n---\n\nCreate a Topic\n\nRules:\n\nUser can create a root topic if he is a Tat Admin.\nUser can create topics under /Private/username/\nUser can create topics if he is an admin on the Parent Topic or belong to an admin group on the Parent topic.\nExample:  Create /AAA/BBB: Parent Topic is /AAA\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"description\": \"Topic Description\"}' \\\n    https://tatHostname:tatPort/topic\n\n Delete a topic\ncurl -XDELETE \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/topic/subtopic\n\nTruncate a topic\n\nOnly for Tat Admin and administrators on topic.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\"}' \\\n    https://tatHostname:tatPort/topic/truncate\n\n Compute tags on a topic\n\nOnly for Tat Admin and administrators on topic.\n\nSet \"tags\" attribute on topic, with an array of all tags used in this topic.\nOne entry in \"tags\" attribute per text of tag.\n\nTopic's tags are showed with :\nGET https://tatHostname:tatPort/topic/topicName\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\"}' \\\n    https://tatHostname:tatPort/topic/compute/tags\n\nExample of usage of tags attribute: autocompletion of tag on UI when written new message on a topic\n\nCompute labels on a topic\n\nOnly for Tat Admin and administrators on topic.\n\nSet \"labels\" attribute on topic, with an array of all labels used in this topic.\nOne entry in \"labels\" attribute per text & color of label.\n\nTopic's labels are showed with :\nGET https://tatHostname:tatPort/topic/topicName\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\"}' \\\n    https://tatHostname:tatPort/topic/compute/labels\n\nExample of usage of labels attribute: label autocompletion on UI when adding new label\n\n Compute tags on all topics\n\nOnly for Tat Admin.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/topics/compute/tags\n\nCompute labels on all topics\n\nOnly for Tat Admin.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    https://tatHostname:tatPort/topics/compute/labels\n\n Set a param on all topics\n\nOnly for Tat Admin and for attributes isAutoComputeTags and isAutoComputeLabels.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"paramName\":\"isAutoComputeLabels\",\"paramValue\":\"false\"}' \\\n    https://tatHostname:tatPort/topics/param\n\nTruncate cached tags on a topic\n\nOnly for Tat Admin and administrators on topic.\n\nTruncate \"tags\" attribute on topic.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\"}' \\\n    https://tatHostname:tatPort/topic/tags/truncate\n\n Truncate cached labels on a topic\n\nOnly for Tat Admin and administrators on topic.\n\nTruncate \"labels\" attribute on topic.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\"}' \\\n    https://tatHostname:tatPort/topic/labels/truncate\n\nGetting one Topic\ncurl -XGET https://tatHostname:tatPort/topic/topicName | python -m json.tool\ncurl -XGET https://tatHostname:tatPort/topic/topicName/subTopic | python -m json.tool\n\n Getting Topics List\ncurl -XGET https://tatHostname:tatPort/topics?skip=skip&limit=limit | python -m json.tool\ncurl -XGET https://tatHostname:tatPort/topics?skip=skip&limit=limit&argName=valName&arg2Name=val2Name | python -m json.tool\n\nParameters\nskip: Skip skips over the n initial documents from the query results\nlimit: Limit restricts the maximum number of documents retrieved\ntopic: Topic name, example: /topicA\ntopicPath: Topic start path, example: /topicA will return /topicA/subA, /topicA/subB\nidTopic: id of topic\ndescription: description of topic\ndateMinCreation: filter result on dateCreation, timestamp Unix format\ndateMaxCreation: filter result on dateCreation, timestamp Unix Format\ngetNbMsgUnread: if true, add new array to return, topicsMsgUnread with topic:flag. flag can be -1 if unknown, 0 or 1 if there is one or more messages unread\nonlyFavorites: if true, return only favorites topics, except /Private/*. All privates topics are returned.\ngetForTatAdmin: if true, and requester is a Tat Admin, returns all topics (except /Private/*) without checking user access\n\n Example\ncurl -XGET https://tatHostname:tatPort/topics?skip=0&limit=100 | python -m json.tool\n\nAdd a parameter to a topic\n\nFor admin of topic or on /Private/username/*\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"key\": \"keyOfParameter\", \"value\": \"valueOfParameter\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/add/parameter\n\n Remove a parameter to a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"key\": \"keyOfParameter\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/remove/parameter\n\nAdd a read only user to a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"username\": \"usernameToAdd\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/add/rouser\n\n Add a read write user to a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"username\": \"usernameToAdd\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/add/rwuser\n\nAdd an admin user to a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"username\": \"usernameToAdd\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/add/adminuser\n\n Delete a read only user from a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"username\": \"usernameToRemove\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/remove/rouser\n\nDelete a read write user from a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"username\": \"usernameToRemove\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/remove/wuser\n\n Delete an admin user from a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"username\": \"usernameToRemove\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/remove/adminuser\n\nAdd a read only group to a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"groupname\": \"groupnameToAdd\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/add/rogroup\n\n Add a read write group to a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"groupname\": \"groupnameToAdd\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/add/rwgroup\n\nAdd an admin group to a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"groupname\": \"groupnameToAdd\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/add/admingroup\n\n Delete a read only group from a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"groupname\": \"groupnameToRemove\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/remove/rogroup\n\nDelete a read write group from a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"groupname\": \"groupnameToRemove\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/remove/rwgroup\n\n Delete an admin group from a topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"groupname\": \"groupnameToRemove\", \"recursive\": \"false\"}' \\\n    https://tatHostname:tatPort/topic/remove/rwgroup\n\nUpdate param on one topic: admin or admin on topic\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\": \"/topicA\", \"recursive\": \"false\", \"maxlength\": 140, \"canForceDate\": false, \"canUpdateMsg\": false, \"canDeleteMsg\": false, \"canUpdateAllMsg\": false, \"canDeleteAllMsg\": false, \"adminCanUpdateAllMsg\": false, \"adminCanDeleteAllMsg\": false}' \\\n    https://tatHostname:tatPort/topic/param\n\nParameters key is optional.\n\nExample with key parameters :\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: admin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{\"topic\":\"/Internal/Alerts\",\"recursive\":false,\"maxlength\":300,\"canForceDate\":false,\"canUpdateMsg\":false,\"canDeleteMsg\":true,\"canUpdateAllMsg\":false,\"canDeleteAllMsg\":false,\"adminCanUpdateAllMsg\":false,\"adminCanDeleteAllMsg\":false,\"parameters\":[{\"key\":\"agileview\",\"value\":\"qsdfqsdf\"},{\"key\":\"tatwebui.view.default\",\"value\":\"standardview-list\"},{\"key\":\"tatwebui.view.forced\",\"value\":\"\"}]}' \\\n    https://tatHostname:tatPort/topic/param\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/api-users",
        "title": "API - Users",
        "content": "---\ntitle: \"API - Users\"\nweight: 4\ntoc: true\nprev: \"/engine/api-topics\"\nnext: \"/engine/api-groups\"\n\n---\n\nTat Password\nIt's a generated password by Tat, allowing username to communicate with Tat.\nUser creates an account, a mail is send to verify account and user has to go on a Tat URL to validate account and get password.\nPassword is encrypted in Tat Database (sha512 Sum).\n\nFirst user created is an administrator.\n\n Create a User\nReturn a mail to user, with instruction to validate his account.\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"username\": \"userA\", \"fullname\": \"User AA\", \"email\": \"usera@foo.net\", \"callback\": \" Click on:scheme://:host:port/user/verify/:token to validate your account\"}' \\\n    https://tatHostname:tatPort/user\n\nCallback is a string sent by mail, indicating to the user how to validate his account.\nAvailable fields (automatically filled by Tat ):\n\n:scheme - http of https\n:host - ip or hostname of Tat Engine\n:port - port of Tat Engine\n:username - username\n:token - tokenVerify of user\n\nVerify a User\ncurl -XGET \\\n    https://tatHostname:tatPort/user/verify/yourUsername/tokenVerifyReceivedByMail\nThis url can be called only once per password and expired 30 minutes after querying create user with POST on /user\n\n Ask for reset a password\nReturns: tokenVerify by email\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"username\": \"userA\", \"email\": \"usera@foo.net\"}' \\\n    https://tatHostname:tatPort/user/reset\n\nGet information about current User\ncurl -XGET \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me\n\n Get contacts\n\nRetrieves contacts presences since n seconds\n\nExample since 15 seconds :\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/contacts/15\n\nAdd a contact\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/contact/username\n\n Remove a contact\ncurl -XDELETE \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/contacts/username\n\nAdd a favorite topic\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/topics/myTopic/sub-topic\n\n Remove a favorite topic\ncurl -XDELETE \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/topics/myTopic/sub-topic\n\nEnable notifications on one topic\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/enable/notifications/topics/myTopic/sub-topic\n\n Disable notifications on one topic\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/disable/notifications/topics/myTopic/sub-topic\n\nEnable notifications on all topics\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/enable/notifications/alltopics\n\n Disable notifications on all topics, except /Private/*\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/disable/notifications/alltopics\n\nAdd a favorite tag\n\ncurl -XPOST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/tags/myTag\n\n Remove a favorite tag\ncurl -XDELETE \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userA\" \\\n    -H \"Tat_password: password\" \\\n    https://tatHostname:tatPort/user/me/tags/myTag\n\nGetting Users List\ncurl -XGET https://tatHostname:tatPort/users?skip=skip&limit=limit | python -m json.tool\ncurl -XGET https://tatHostname:tatPort/users?skip=skip&limit=limit&argName=valName&arg2Name=val2Name | python -m json.tool\n\nUsers list with groups (admin only)\ncurl -XGET https://tatHostname:tatPort/users?skip=skip&limit=limit&withGroups=true\n\n Parameters\n\nskip: Skip skips over the n initial documents from the query results\nlimit: Limit restricts the maximum number of documents retrieved\nusername: Username\nfullname: Fullname\ndateMinCreation: filter result on dateCreation, timestamp Unix format\ndateMaxCreation: filter result on dateCreation, timestamp Unix Format\n\nExample\ncurl -XGET https://tatHostname:tatPort/users?skip=0&limit=100 | python -m json.tool\n\n Convert a user to a system user\nOnly for Tat Admin: convert a normal user to a system user.\nA system user must have a username starting with tat.system.\nRemove email and set user attribute IsSystem to true.\nThis action returns a new password for this user.\nWarning: it is an irreversible action.\n\nFlag canWriteNotifications allows (or not if false) the system user to write inside private topics of user /Private/username/Notifications\n\nFlag canListUsersAsAdmin allows this system user to view all user's fields (email, etc...)\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userAdmin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{ \"username\": \"usernameToConvert\", \"canWriteNotifications\": \"true\", \"canListUsersAsAdmin\": \"true\" }' \\\n    https://tatHostname:tatPort/user/convert\n\nUpdate flags on system user\nOnly for Tat Admin.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userAdmin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{ \"username\": \"userSystem\", \"canWriteNotifications\": \"true\", \"canListUsersAsAdmin\": \"true\" }' \\\n    https://tatHostname:tatPort/user/updatesystem\n\n Reset a password for system user\nOnly for Tat Admin.\nA system user must have a username starting with tat.system.\nThis action returns a new password for this user.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userAdmin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{ \"username\": \"userameSystemToReset\" }' \\\n    https://tatHostname:tatPort/user/resetsystem\n\nGrant a user to an admin user\nOnly for Tat Admin: convert a normal user to an admin user.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userAdmin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{ \"username\": \"usernameToGrant\" }' \\\n    https://tatHostname:tatPort/user/setadmin\n\n Rename a username\nOnly for Tat Admin: rename the username of a user. This action updates all Private topics of the user.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userAdmin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{ \"username\": \"usernameToRename\", \"newUsername\": \"NewUsername\" }' \\\n    https://tatHostname:tatPort/user/rename\n\nUpdate fullname or email\nOnly for Tat Admin: update fullname and email of a user.\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userAdmin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{ \"username\": \"usernameToRename\", \"newFullname\": \"NewFullname\", \"newEmail\": \"NewEmail\" }' \\\n    https://tatHostname:tatPort/user/update\n\n Archive a user\nOnly for Tat Admin\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userAdmin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{ \"username\": \"usernameToRename\" }' \\\n    https://tatHostname:tatPort/user/archive\n\nCheck Private Topics and Default Group on one user\nOnly for Tat Admin\n\ncurl -XPUT \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tat_username: userAdmin\" \\\n    -H \"Tat_password: passwordAdmin\" \\\n    -d '{ \"username\": \"usernameToRename\",  \"fixPrivateTopics\": true, \"fixDefaultGroup\": true }' \\\n    https://tatHostname:tatPort/user/check\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/general",
        "title": "General",
        "content": "---\ntitle: \"General\"\nweight: 1\ntoc: true\nprev: \"/engine\"\nnext: \"/engine/api-messages\"\n\n---\n\nGeneral Specifications\n\nTopic\n Contains 0 or n messages\n Administrator(s) of Topic can create Topic inside it\nMessage\n Consists of text, tags and labels\n Can not be deleted or modified (by default)\n Is limited in characters (topic setting)\n Is always attached to one topic\nTag\n Within the message content\n Can not be added after message creation (by default)\nLabel\n Can be added or removed freely\n Have a color\nGroup\n Managed by an administrator(s): adding or removing users from the group\n Without prior authorization, a group or user has no access to topics\n A group or a user can be read-only or read-write on a topic\nTask\n A task is a message that is both in the topic task of a user and in the original topic\nAdministrator(s)\n Tat Administrator: all configuration access\n On Group(s): can add/remove member(s)\n On Topic(s): can create Topic inside it, update parameters\n\n Some rules and rules exception\nDeleting a message is possible in the private topics, or can be granted on other topic\nModification of a message is possible in private topics, or can be granted on other topic\nThe default length of a message is 140 characters, this limit can be modified by topic\nA date creation of a message can be explicitly set by a system user\nmessage.dateCreation and message.dateUpdate are in timestamp format, ex:\n 1436912447: 1436912447 seconds\n 1436912447.345678: 1436912447 seconds and 345678 milliseconds\n\nDetailed Specifications\nTopic\n addAdminGroup     Engine Tatcli Go-SDK\n addAdminUser      Engine Tatcli Go-SDK     \n addParameter      Engine Tatcli Go-SDK     \n addRoGroup        Engine Tatcli Go-SDK\n addRoUser         Engine Tatcli Go-SDK\n addRwGroup        Engine Tatcli Go-SDK\n addRwUser         Engine Tatcli Go-SDK\n allcomputelabels  Engine Tatcli Go-SDK\n allcomputereplies Engine Tatcli Go-SDK\n allcomputetags    Engine Tatcli Go-SDK\n allsetparam       Engine Tatcli Go-SDK\n computelabels     Engine Tatcli Go-SDK\n computetags       Engine Tatcli Go-SDK\n create            Engine Tatcli Go-SDK\n delete            Engine Tatcli Go-SDK\n deleteAdminGroup  Engine Tatcli Go-SDK\n deleteAdminUser   Engine Tatcli Go-SDK\n deleteParameter   Engine Tatcli Go-SDK\n deleteRoGroup     Engine Tatcli Go-SDK\n deleteRoUser      Engine Tatcli Go-SDK\n deleteRwGroup     Engine Tatcli Go-SDK\n deleteRwUser      Engine Tatcli Go-SDK\n list              Engine Tatcli Go-SDK\n oneTopic          Engine Go-SDK\n parameter         Engine Tatcli Go-SDK\n removeFilter      Engine Go-SDK\n truncate          Engine Tatcli Go-SDK\n truncatelabels    Engine Tatcli Go-SDK\n truncatetags      Engine Tatcli Go-SDK\n updateFilter      Engine Tatcli Go-SDK\nMessage\n add         Engine Tatcli Go-SDK\n addbulk     Engine Tatcli Go-SDK\n concat      Engine Tatcli Go-SDK\n count       Engine Tatcli Go-SDK\n delete      Engine Tatcli Go-SDK\n deletebulk  Engine Tatcli Go-SDK\n label       Engine Tatcli Go-SDK\n like        Engine Tatcli Go-SDK\n list        Engine Tatcli Go-SDK\n move        Engine Tatcli Go-SDK\n relabel     Engine Tatcli Go-SDK\n reply       Engine Tatcli Go-SDK\n task        Engine Tatcli Go-SDK\n unlabel     Engine Tatcli Go-SDK\n unlike      Engine Tatcli Go-SDK\n untask      Engine Tatcli Go-SDK\n unvotedown  Engine Tatcli Go-SDK\n unvoteup    Engine Tatcli Go-SDK\n update      Engine Tatcli Go-SDK\n votedown    Engine Tatcli Go-SDK\n voteup      Engine Tatcli Go-SDK\nGroup\n addAdminUser     Engine Tatcli Go-SDK\n addUser          Engine Tatcli Go-SDK\n create           Engine Tatcli Go-SDK\n delete           Engine Tatcli Go-SDK\n deleteAdminUser  Engine Tatcli Go-SDK\n deleteUser       Engine Tatcli Go-SDK\n list             Engine Tatcli Go-SDK\n update           Engine Tatcli Go-SDK\nUser\n add                           Engine Tatcli Go-SDK\n addContact                    Engine Tatcli Go-SDK\n addFavoriteTag                Engine Tatcli Go-SDK\n addFavoriteTopic              Engine Tatcli Go-SDK\n archive                       Engine Tatcli Go-SDK\n check                         Engine Tatcli Go-SDK\n contacts                      Engine Tatcli Go-SDK\n convert                       Engine Tatcli Go-SDK\n disableNotificationsAllTopics Engine Tatcli Go-SDK\n disableNotificationsTopic     Engine Tatcli Go-SDK\n enableNotificationsAllTopics  Engine Tatcli Go-SDK\n enableNotificationsTopic      Engine Tatcli Go-SDK\n list                          Engine Tatcli Go-SDK\n me                            Engine Tatcli Go-SDK\n removeContact                 Engine Tatcli Go-SDK\n removeFavoriteTag             Engine Tatcli Go-SDK\n removeFavoriteTopic           Engine Tatcli Go-SDK\n rename                        Engine Tatcli Go-SDK\n reset                         Engine Tatcli Go-SDK\n resetSystemUser               Engine Tatcli Go-SDK\n setAdmin                      Engine Tatcli Go-SDK\n update                        Engine Tatcli Go-SDK\n updateSystemUser              Engine Tatcli Go-SDK\n verify                        Engine Tatcli Go-SDK\nPresence\n add                           Engine Tatcli Go-SDK\n delete                        Engine Tatcli Go-SDK\n list                          Engine Tatcli Go-SDK\nStats\n count              Engine Tatcli Go-SDK\n dbCollections      Engine Tatcli Go-SDK\n dbReplSetGetConfig Engine Tatcli Go-SDK\n dbReplSetGetStatus Engine Tatcli Go-SDK\n dbServerStatus     Engine Tatcli Go-SDK\n dbSlowestQueries   Engine Tatcli Go-SDK\n dbstats            Engine Tatcli Go-SDK\n distribution       Engine Tatcli Go-SDK\n instance           Engine Tatcli Go-SDK\nSystem\n cacheclean   Engine Tatcli Go-SDK\n cacheinfo    Engine Tatcli Go-SDK\nVersion\n version Engine Tatcli Go-SDK\n\n FAQ\nWhat about attachment (sound, image, etc...) ?\nTat Engine stores only text. Use other application, like Plik (https://github.com/root-gg/plik)\nto upload file and store URL on Tat. This workflow should be done by UI.\n\nIn / Out Format\nTat Engine communicates only with JSON format with its API, even for messages sent above with kafka Hook on a topic.\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/index",
        "title": "Tat Engine Reference",
        "content": "---\ntitle: \"Tat Engine Reference\"\nweight: 0\nnext: \"/engine/general\"\nchapter: true\nicon: \"b3. /b\"\n\n---\n\nChapter 3\n\n Tat Engine\n\nReference\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/production-installation",
        "title": "Installation - Production Way",
        "content": "---\ntitle: \"Installation - Production Way\"\nweight: 42\ntoc: true\nprev: \"/engine/simple-installation\"\n\n---\n\nDon't worry, this installation describes below is used @ OVH to handle at least:\n\n800.000 GET / 2 hours\n50.000 POST / 2 hours\n30.000 DELETE / 2 hours\n45.000 PUT / 2 hours\n\nPrerequisites\nMongoDB, with ReplicaSet\nRedis with Slave and Sentinel\nDownload latest release of Tat\n OSX https://github.com/ovh/tat/releases/download/RELEASE_VERSION/tat-darwin-amd64\n Linux https://github.com/ovh/tat/releases/download/RELEASE_VERSION/tat-linux-amd64\n replace RELEASE_VERSION with latest release from https://github.com/ovh/tat/releases\n\n Run in Production Mode\n\n!/bin/bash\n\n Logs Configuration\nTAT_PRODUCTION=true\n\nTATLISTENPORT=8080\n\nDefault group for each new user\nTATDEFAULTGROUP=Common_Team\n\n HTTP Timeout Configuration\nTATREADTIMEOUT=55\nTATWRITETIMEOUT=55\n\nSMTP Configuration\nTATSMTPHOST=your-smtp-host\nTATSMTPTLS=true\nTATSMTPPORT=25\nTATSMTPFROM=noreply.tat@your-tat-hostname\n\n Exposed var are used in emails for add / reset a user\nTATEXPOSEDSCHEME=http\nTATEXPOSEDPATH=/\nTATEXPOSEDPORT=8080\nTATEXPOSEDHOST=your-tat-hostname\n\nMongoDB Configuration\nTATDBUSER=tat\nTATDBPASSWORD=your-mongodb-password\nTATDBADDR=mongodb-master,mongodb-rs-1,mongodb-rs-2/tat\nTATDBSOCKET_TIMEOUT=60\nTATDBENSURESAFEDB_WRITE=3\n\n Redis Configuration for cache\nTATREDISSENTINELS=redis-host:27001,redis-host:27002,redis-host:27003,redis-host:27004\nTATREDISMASTER=tatredismaster\nTATREDISPASSWORD=your-redis-password\n\nTAT 2 XMPP Configuration\nTATTAT2XMPPUSERNAME=tat.system.jabber\nTATTAT2XMPPURL=http://tat2xmpp.your-domain\nTATTAT2XMPPKEY=a-key-used-by-tat2xmpp\n\n./api\n",
        "tags": []
    },
    {
        "uri": "./tat/engine/simple-installation",
        "title": "Simple Installation",
        "content": "---\ntitle: \"Simple Installation\"\nweight: 41\ntoc: true\nprev: \"/engine/api-system\"\nnext: \"/engine/production-installation\"\n\n---\n\nPrerequisites\nMongoDB\nDownload latest release of Tat\n OSX https://github.com/ovh/tat/releases/download/RELEASE_VERSION/tat-darwin-amd64\n Linux https://github.com/ovh/tat/releases/download/RELEASE_VERSION/tat-linux-amd64\n replace RELEASE_VERSION with latest release from https://github.com/ovh/tat/releases\n\n Run in Development Mode\nStart Tat without SMTP Server. Mails sent will be displayed in console.\n\n$ mv tat-architecture tat\n$ chmod +x tat\n$ ./tat --no-smtp\n\nOutput logs:\n./api --no-smtp\n[GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production.\n using env:\texport GIN_MODE=release\n using code:\tgin.SetMode(gin.ReleaseMode)\n\nINFO[0000] Mongodb : create new instance\n\n[...] # DEBUG Logs here\n\nINFO[0000] No Kafka configured\nINFO[0000] TAT is running on 8080\nINFO[0000] TAT is NOT linked to a redis\nTat is ready\n\nTry it\n$ curl localhost:8080/version\n{\"version\":\"2.0.0\"}\n",
        "tags": []
    },
    {
        "uri": "./tat/overview/architecture",
        "title": "Architecture",
        "content": "---\ntitle: \"Architecture\"\nweight: 4\nprev: \"/overview/lifecycle\"\nnext: \"/overview/contribute\"\ntoc: false\n---\n\nMain components of a Tat Installation are:\n\nTat, also called Tat Engine. Your can running as many Engine as you want.\nYou can imagine running many Tat-Engine instances on  Mesos/Marathon, Kubernetes or Swarm, or configure yourself behind a reverse proxy. Source: http://github.com/ovh/tat\nTatwebui: it's a web application, an easier way to call Tat Engine than curl. This application\nis component oriented, your can display messages with different Views. See next chapter about Tatwebui for\nmore information. Source: http://github.com/ovh/tatwebui\nTatcli, the TAT Command Line Interface. All Tat features are available on tatcli. You can use it\nfor \"one shot\" action on Tat Engine, or for display a UI in command line with tatcli ui. Tatcli ui\nis popular to keep an eye on alerts or monitoring events without having a browser on it. Source: http://github.com/ovh/tat/tatcli\nuServices: Tat Engine is simple to be used, it's also easy to develop uService above tat to\nmake things a little more advanced, like on-call schedule & intervention, reporting, etc...\nYou'll find some opensourced uService in chapter Ecosystem\n",
        "tags": []
    },
    {
        "uri": "./tat/overview/concepts",
        "title": "Concepts",
        "content": "---\ntitle: \"Concepts\"\nweight: 2\ntoc: true\nprev: \"/overview/introduction\"\nnext: \"/overview/lifecycle\"\n\n---\n\nFour Concepts: Topic / Message / Tag / Label\n\nTopic\n Contains 0 or n messages\n Administrator(s) of Topic can create Topic inside it\nMessage\n Consists of text, tags and labels\n Can not be deleted or modified (by default)\n Is limited in characters (topic setting)\n Is always attached to one topic\nTag\n Within the message content\n Can not be added after message creation (by default)\nLabel\n Can be added or removed freely\n Have a color\n\nThink about messages as plain information pieces, their meaning are contextualized through microservices using those messages and views you plug on their topics.\n\n Users, Groups and Administrators\n\nGroup\n Managed by an administrator(s): adding or removing users from the group\n Without prior authorization, a group or user has no access to topics\n A group or a user can be read-only or read-write on a topic\nAdministrator(s)\n First user created is an administrator\n Tat Administrator: all configuration access\n On Group(s): can add/remove member(s)\n On Topic(s): can create sub-topics, update rights parameters and default view\n\nSome rules and rules exception\nDeleting a message is possible in the private topics, or can be granted on other topic\nModification of a message is possible in private topics, or can be granted on other topic\nThe default length of a message is 140 characters, this limit can be modified by topic\nA date creation of a message can be explicitly set by a system user\nmessage.dateCreation and message.dateUpdate are in timestamp format, ex:\n 1436912447: 1436912447 seconds\n 1436912447.345678: 1436912447 seconds and 345678 milliseconds\n\n FAQ\nWhat about attachment (sound, image, etc...) ?\nTat Engine stores only text. Use other application, like Plik\nto upload file and store URL on Tat.\n",
        "tags": []
    },
    {
        "uri": "./tat/overview/contribute",
        "title": "Contribute",
        "content": "---\ntitle: \"Contribute\"\nweight: 5\nprev: \"/overview/architecture\"\ntoc: true\n---\n\nContributing\n\nYou've developed a new cool feature? Fixed an annoying bug? We'd be happy\nto hear from you! Make sure to read CONTRIBUTING file on repository concerned before.\n\n Code\n\nMain Components\nTat Engine Doc - http://github.com/ovh/tat - LICENSE - CONTRIBUTING\nTatwebui Doc - http://github.com/ovh/tatwebui - LICENSE - CONTRIBUTING\nTatcli Doc - http://github.com/ovh/tat/tatcli - LICENSE - CONTRIBUTING\n\n Views\n\nCDS View Doc - https://github.com/ovh/tatwebui-plugin-cdsview - LICENSE - CONTRIBUTING\nDashing View Doc - https://github.com/ovh/tatwebui-plugin-dashingview - LICENSE - CONTRIBUTING\nMonitoring View Doc - https://github.com/ovh/tatwebui-plugin-monitoringview - LICENSE - CONTRIBUTING\nNotifications View Doc  - https://github.com/ovh/tatwebui-plugin-notificationsview - LICENSE - CONTRIBUTING\nPastat View Doc - https://github.com/ovh/tatwebui-plugin-pastatview - LICENSE - CONTRIBUTING\nRelease View Doc - https://github.com/ovh/tatwebui-plugin-releaseview - LICENSE - CONTRIBUTING\nStandard View Doc - https://github.com/ovh/tatwebui-plugin-standardview - LICENSE - CONTRIBUTING\n\nEcosystem\n\nAl2tat Doc - https://github.com/ovh/al2tat - LICENSE - CONTRIBUTING\nMail2tat Doc - https://github.com/ovh/mail2tat - LICENSE - CONTRIBUTING\nTat2XMPP Doc - https://github.com/ovh/tat2xmpp - LICENSE - CONTRIBUTING\n",
        "tags": []
    },
    {
        "uri": "./tat/overview/index",
        "title": "Overview",
        "content": "---\ntitle: \"Overview\"\nweight: 0\nnext: \"/overview/introduction\"\nchapter: true\nicon: \"b1. /b\"\n\n---\n\nChapter 1\n\n TAT Overview\n\nDiscover what is Tat and the core-concepts behind it.\n",
        "tags": []
    },
    {
        "uri": "./tat/overview/introduction",
        "title": "Introduction",
        "content": "---\ntitle: \"Introduction\"\nweight: 1\nprev: \"/overview\"\nnext: \"/overview/concepts\"\ntoc: false\n\n---\n\nTat, aka Text And Tags, is a communication tool - Human & Robot all together.\n\nSome use cases:\n\nViewing Pull Requests, Build And Deployment in one place\nAlerting & Monitoring Overview\nAgile view as simple as a whiteboard with post-it\nTeam Communication & Reporting facilities\n...\n\nTat Engine exposes only an HTTP REST API. You can manipulate this API with Tat Command Line Interface, aka tatcli, see https://github.com/ovh/tat/tatcli.\n\nA WebUI is also available, see https://github.com/ovh/tatwebui.\n\nTat Engine:\n\nUses MongoDB as backend\nIs fully stateless, scale as you want\nIs the central Hub of Tat microservices ecosystem\n\nThe initial goal of TAT was to make an overview on Continuous Delivery Pipeline, with some pre-requisites:\n\nScalable, High Availability, Self-Hosted\nAPI, CLI\nSimple Usage\n\n",
        "tags": []
    },
    {
        "uri": "./tat/overview/lifecycle",
        "title": "DevOps LifeCycle / Feedback Loop",
        "content": "---\ntitle: \"DevOps LifeCycle / Feedback Loop\"\nweight: 3\nprev: \"/overview/concepts\"\nnext: \"/overview/architecture\"\ntoc: true\n\n---\n\nFeedback everywhere\nWe want feedback, not only when applications are in production, but everywhere.\nPullRequest, build, Release, Monitoring, etc...\n\nFollowing examples show how we are using Tat through our DevOps lifecycle @ OVH.\n\nFirst of all, TaT was designed to be a hub of all Continuous Delivery and DevOps communcation. By plugin all the software running in Plug all the software running in your DevOps ecosystem to Tat, you'll be able to follow all the things in TaT and improve as well team and machines collaboration]\n\n    Plan :\n\n    Code :\n\n    Build And Tests :\n\n    Release :\n\n    Monitor :\n\n Plan\n\nStarting the DevOps lifcycle with an agile view designed to plan your next release/iteration\n\nCode\n\nFollow Pull Request, and share pieces of Code\n\n Build & Test\n\nFollow Continuous Integration, Continuous Delivery Pipelines through a pipeline views. Here shown with CDS (lien vers CDS).\n\nRelease\n\nEnd of your cycle commitment: build automatically your release note from your git repository, JIRA ...\n\n Deploy\n\nMonitor\n\nBuild your own dashing view, monitor things with a light Terminal UI, showing resources heatmap of planning your interventions..\n\n Feedback\n\n",
        "tags": []
    },
    {
        "uri": "./tat/sdk/golang-full-example",
        "title": "Golang - Full Example",
        "content": "---\ntitle: \"Golang - Full Example\"\nweight: 2\ntoc: true\nprev: \"/sdk/golang-simple-main\"\n\n---\n\nUsage\n\nThis example uses viper, cobra and tatcli config file.\n\nUsage:\n go build && ./mycli-full demo /YouTopic/subTopic your message\n\nwith a config file:\n go build && ./mycli-full --configFile $HOME/.tatcli/config.local.json demo /YouTopic/subTopic your message\n\n File main.go\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\tlog \"github.com/Sirupsen/logrus\"\n\t\"github.com/ovh/tat\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)\n\nvar rootCmd = &cobra.Command{\n\tUse:  \"mycli-full\",\n\tLong: SDK Use Demo,\n}\n\n// URL of tat engine, tat username and tat password\nvar (\n\thome     = os.Getenv(\"HOME\")\n\ttaturl   string\n\tusername string\n\tpassword string\n\n\t// ConfigFile is $HOME/.tatcli/config.json per default\n\t// contains user, password and url of tat\n\tconfigFile string\n)\n\nfunc main() {\n\taddCommands()\n\n\trootCmd.PersistentFlags().StringVarP(&taturl, \"url\", \"\", \"\", \"URL Tat Engine, facultative if you have a \"+home+\"/.tatcli/config.json file\")\n\trootCmd.PersistentFlags().StringVarP(&username, \"username\", \"u\", \"\", \"username, facultative if you have a \"+home+\"/.tatcli/config.json file\")\n\trootCmd.PersistentFlags().StringVarP(&password, \"password\", \"p\", \"\", \"password, facultative if you have a \"+home+\"/.tatcli/config.json file\")\n\trootCmd.PersistentFlags().StringVarP(&configFile, \"configFile\", \"c\", home+\"/.tatcli/config.json\", \"configuration file, default is \"+home+\"/.tatcli/config.json\")\n\n\tviper.BindPFlag(\"url\", rootCmd.PersistentFlags().Lookup(\"url\"))\n\tviper.BindPFlag(\"username\", rootCmd.PersistentFlags().Lookup(\"username\"))\n\tviper.BindPFlag(\"password\", rootCmd.PersistentFlags().Lookup(\"password\"))\n\n\tlog.SetLevel(log.DebugLevel)\n\n\tif err := rootCmd.Execute(); err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(-1)\n\t}\n}\n\n//AddCommands adds child commands to the root command rootCmd.\nfunc addCommands() {\n\trootCmd.AddCommand(cmdDemo)\n}\n\nvar cmdDemo = &cobra.Command{\n\tUse:   \"demo topic msg\",\n\tShort: \"Demo Post Msg\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tcreate(args[0], args[1])\n\t},\n}\n\n// create creates a message in specified topic\nfunc create(topic, message string) {\n\treadConfig()\n\tm := tat.MessageJSON{Text: message, Topic: topic}\n\tmsgCreated, err := getClient().MessageAdd(m)\n\tif err != nil {\n\t\tlog.Errorf(\"Error:%s\", err)\n\t\treturn\n\t}\n\tlog.Debugf(\"ID Message Created: %d\", msgCreated.Message.ID)\n}\n\nfunc getClient() *tat.Client {\n\ttc, err := tat.NewClient(tat.Options{\n\t\tURL:      viper.GetString(\"url\"),\n\t\tUsername: viper.GetString(\"username\"),\n\t\tPassword: viper.GetString(\"password\"),\n\t\tReferer:  \"mycli.v0\",\n\t})\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Error while create new Tat Client: %s\", err)\n\t}\n\n\ttat.DebugLogFunc = log.Debugf\n\treturn tc\n}\n\n// readConfig reads config in .tatcli/config per default\nfunc readConfig() {\n\tif configFile != \"\" {\n\t\tviper.SetConfigFile(configFile)\n\t\tviper.ReadInConfig() // Find and read the config file\n\t}\n}\n\nNotice\nYou should split this file into many files.\n\nSee https://github.com/ovh/tat/tatcli for CLI with many subcommands.\n",
        "tags": []
    },
    {
        "uri": "./tat/sdk/golang-simple-main",
        "title": "Golang - A simple main example",
        "content": "---\ntitle: \"Golang - A simple main example\"\nweight: 1\ntoc: true\nprev: \"/sdk\"\nnext: \"/sdk/golang-full-example\"\n\n---\n\nUsage\n cd directory-containing-main.go/\n go get -u github.com/ovh/tat\n build && ./mycli-minimal -url=http://url-tat-engine -username=tatUsername -password=tatPassword /Internal/your/topic your message\n\n File main.go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/ovh/tat\"\n)\n\n// taturl, username / password of tat engine\nvar (\n\ttaturl   string\n\tusername string\n\tpassword string\n)\n\nfunc main() {\n\tflag.StringVar(&taturl, \"url\", \"\", \"URL of Tat Engine\")\n\tflag.StringVar(&username, \"username\", \"\", \"tat username\")\n\tflag.StringVar(&password, \"password\", \"\", \"tat password\")\n\tflag.Parse()\n\n\tclient, err := tat.NewClient(tat.Options{\n\t\tURL:      taturl,\n\t\tUsername: username,\n\t\tPassword: password,\n\t\tReferer:  \"mycli-minimal.v0\",\n\t})\n\n\tif err != nil {\n\t\tfmt.Printf(\"Error while create new Tat Client: %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\targs := flag.Args()\n\ttext := strings.Join(args[1:], \" \")\n\ttopic := args[0]\n\tm := tat.MessageJSON{\n\t\tText:  text,\n\t\tTopic: topic,\n\t}\n\n\tfmt.Printf(\"Send on topic %s this message: %s\\n\", topic, text)\n\n\tmsgCreated, err := client.MessageAdd(m)\n\tif err != nil {\n\t\tfmt.Printf(\"Error:%s\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Printf(\"ID Message Created: %s\\n\", msgCreated.Message.ID)\n}\n\nNotice\nThis is just a simple example. Please do not use tat password in argument of your binary.\nPlease check next chapter a href=\"../golang-full-example\"\"Full Example\"/a for a real example.\n",
        "tags": []
    },
    {
        "uri": "./tat/sdk/index",
        "title": "Tat SDK",
        "content": "---\ntitle: \"Tat SDK\"\nweight: 0\nchapter: true\nicon: \"b5. /b\"\nnext: \"/sdk/golang-simple-main\"\n---\n\nChapter 5\n\n Overview\n\nTAT SDK\n\nGodoc\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/general",
        "title": "General",
        "content": "---\ntitle: \"General\"\nweight: 1\ntoc: true\nprev: \"/tatcli\"\nnext: \"/tatcli/tatcli-config\"\n\n---\n\nimg align=\"right\" src=\"https://raw.githubusercontent.com/ovh/tat/master/tat.png\"\n\nTatcli, a Tat Command Line Interface.\n\nSee Tat Engine for more information: https://github.com/ovh/tat\n\nDownload\nDownload latest binary on release page https://github.com/ovh/tat/releases \nthen chmod +x tatcli\n\nIf you have already installed tatcli, you can update it with tatcli update.\n\n Usage - General Rules\n\nA successful command will give you no feedback. If you want one, you can use -v argument.\nAfter each command, the exit code can be found in the $? variable. No error if exit code equals 0.\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/index",
        "title": "Tat CLI Reference",
        "content": "---\ntitle: \"Tat CLI Reference\"\nweight: 0\nchapter: true\nicon: \"b4. /b\"\nnext: \"/tatcli/general\"\n---\n\nChapter 4\n\n TATCLI\n\nReference\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-config",
        "title": "tatcli config -h",
        "content": "---\ntitle: \"tatcli config -h\"\nweight: 2\ntoc: true\nprev: \"/tatcli/general\"\nnext: \"/tatcli/tatcli-group\"\n\n---\n\nCommand Description\n tatcli config -h\n\nConfig commands: tatcli config command\n\nUsage:\n  tatcli config [command]\n\nAliases:\n  config, c\n\nAvailable Commands:\n  template    Write a template configuration file in $HOME/.tatcli/config.json: tatcli config template\n  show        Show Configuration: tatcli config show\n\nFlags:\n  -h, --help=false: help for config\n\nGlobal Flags: see tatcli -h\n\nUse \"tatcli config [command] --help\" for more information about a command.\n\nExample\n Credentials\n\nConfig file is under $HOME/.tatcli/config.json\nYou can create it with this command:\ntatcli config template\n\nTemplate is:\n{\n  \"username\":\"myUsername\",\n  \"password\":\"myPassword\",\n  \"url\":\"http://urltat:port\"\n}\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-group",
        "title": "tatcli group -h",
        "content": "---\ntitle: \"tatcli group -h\"\nweight: 3\ntoc: true\nprev: \"/tatcli/tatcli-config\"\nnext: \"/tatcli/tatcli-message\"\n\n---\n\nCommand Description\n\n tatcli group -h\n\nGroup commands: tatcli group command\n\nUsage:\n  tatcli group [command]\n\nAliases:\n  group, g\n\nAvailable Commands:\n  list            List all groups: tatcli group list skip limit\n  create          create a new group: tatcli group create groupname description\n  update          update a group: tatcli group update groupname newGroupname newDescription\n  delete          delete a group: tatcli group delete groupname\n  addUser         Add Users to a group: tacli group addUser groupname username1 [username2 ... ]\n  deleteUser      Delete Users from a group: tacli group deleteUser groupname username1 [username2 ... ]\n  addAdminUser    Add Admin Users to a group: tacli group addAdminUser groupname username1 [username2 ... ]\n  deleteAdminUser Delete Admin Users from a group: tacli group deleteAdminUser groupname username1 [username2 ... ]\n\nFlags:\n  -h, --help=false: help for group\n\nGlobal Flags: see tatcli -h\n\nUse \"tatcli group [command] --help\" for more information about a command.\n\nExamples\n\n Create a group (Admin only)\ntatcli group add groupname description of group\n\nUpdate a group (Admin only)\ntatcli group update groupname newGroupname new description of group\n\n Delete a group (Admin only)\ntatcli group delete groupname\n\nAdd user to a group\ntatcli group addUser groupname username\n\n Delete a user from a group\ntatcli group deleteUser groupname username\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-message",
        "title": "tatcli message -h",
        "content": "---\ntitle: \"tatcli message -h\"\nweight: 4\ntoc: true\nprev: \"/tatcli/tatcli-group\"\nnext: \"/tatcli/tatcli-presence\"\n\n---\n\nCommand Description\n tatcli message -h\n\nManipulate messages: tatcli message command\n\nUsage:\n  tatcli message [command]\n\nAliases:\n  message, m, msg\n\nAvailable Commands:\n  add         tatcli message add [--dateCreation=timestamp] topic my message\n  concat      Update a message (if it's enabled on topic) by adding additional text at the end of message: tatcli message concat topic idMessage additional text...\n  delete      Delete a message: tatcli message delete topic idMessage [--cascade] [--cascadeForce]\n  deletebulk  Delete a list of messages: tatcli message deletebulk topic skip limit [--cascade] [--cascadeForce]\n  label       Add a label to a message: tatcli message label topic idMessage colorInHexa my Label\n  like        Like a message: tatcli message like topic idMessage\n  list        List all messages on one topic: tatcli msg list Topic skip limit\n  move        Move a message: tatcli message move oldTopic idMessage newTopic\n  relabel     Remove all labels and add new ones to a message: tatcli msg relabel topic idMessage --label=\"#EEEE;myLabel1,#EEEE;myLabel2\" --options=\"myLabelToRemove1,myLabelToRemove2\"\n  reply       Reply to a message: tatcli message reply topic inReplyOfId my message...\n  task        Create a task from one message: tatcli message task /Private/username/tasks/sub-topic idMessage\n  unlabel     Remove a label from a message: tatcli message unlabel topic idMessage my Label\n  unlike      Unlike a message: tatcli message unlike topic idMessage\n  untask      Remove a message from tasks: tatcli message untask /Private/username/tasks idMessage\n  unvotedown  Remove a vote down from a message: tatcli message unvotedown topic idMessage\n  unvoteup    Remove a vote UP from a message: tatcli message unvoteup topic idMessage\n  update      Update a message (if it's enabled on topic): tatcli message update topic idMessage my message...\n  votedown    Vote Down a message: tatcli message votedown topic idMessage\n  voteup      Vote UP a message: tatcli message voteup topic idMessage\n\nCommand Message list\n\nList all messages of a topic: tatcli msg list topic skip limit\n\nUsage:\n  tatcli message list [flags]\n\nAliases:\n  list, l\n\nFlags:\n      --allIDMessage string              Search in All ID Message (idMessage, idReply, idRoot)\n      --andLabel string                  Search by label (and) : could be labelA,labelB\n      --andTag string                    Search by tag (and) : could be tagA,tagB\n      --dateMaxCreation string           Search by dateCreation (timestamp), select messages where dateCreation <= dateMaxCreation\n      --dateMaxUpdate string             Search by dateUpdate (timestamp), select messages where dateUpdate <= dateMaxUpdate\n      --dateMinCreation string           Search by dateCreation (timestamp), select messages where dateCreation = dateMinCreation\n      --dateMinUpdate string             Search by dateUpdate (timestamp), select messages where dateUpdate = dateMinUpdate\n      --dateRefCreation string           This have to be used with dateRefDeltaMinCreation and / or dateRefDeltaMaxCreation. This could be BeginningOfMinute, BeginningOfHour, BeginningOfDay, BeginningOfWeek, BeginningOfMonth, BeginningOfQuarter, BeginningOfYear\n      --dateRefDeltaMaxCreation string   Add seconds to dateRefCreation flag\n      --dateRefDeltaMaxUpdate string     Add seconds to dateRefUpdate flag\n      --dateRefDeltaMinCreation string   Add seconds to dateRefCreation flag\n      --dateRefDeltaMinUpdate string     Add seconds to dateRefUpdate flag\n      --dateRefUpdate string             This have to be used with dateRefDeltaMinUpdate and / or dateRefDeltaMaxUpdate. This could be BeginningOfMinute, BeginningOfHour, BeginningOfDay, BeginningOfWeek, BeginningOfMonth, BeginningOfQuarter, BeginningOfYear\n      --idMessage string                 Search by IDMessage\n      --inReplyOfID string               Search by IDMessage InReply\n      --inReplyOfIDRoot string           Search by IDMessage IdRoot\n      --label string                     Search by label: could be labelA,labelB\n      --lastHourMaxCreation string       Search by dateCreation, select messages where dateCreation <= Now Beginning Of Hour - (60 * lastHourMaxCreation)\n      --lastHourMaxUpdate string         Search by dateUpdate, select messages where dateUpdate <= Now Beginning Of Hour - (60 * lastHourMaxCreation)\n      --lastHourMinCreation string       Search by dateCreation, select messages where dateCreation = Now Beginning Of Hour - (60 * lastHourMinCreation)\n      --lastHourMinUpdate string         Search by dateUpdate, select messages where dateUpdate = Now Beginning Of Hour - (60 * lastHourMinCreation)\n      --lastMaxCreation string           Search by dateCreation (duration in second), select messages where dateCreation <= now - lastMaxCreation\n      --lastMaxUpdate string             Search by dateUpdate (duration in second), select messages where dateUpdate <= now - lastMaxCreation\n      --lastMinCreation string           Search by dateCreation (duration in second), select messages where dateCreation = now - lastMinCreation\n      --lastMinUpdate string             Search by dateUpdate (duration in second), select messages where dateUpdate = now - lastMinCreation\n      --limitMaxNbReplies string         In onetree mode, filter root messages with min or equals maxNbReplies\n      --limitMaxNbVotesDown string       Search by nbVotesDown\n      --limitMaxNbVotesUP string         Search by nbVotesUP\n      --limitMinNbReplies string         In onetree mode, filter root messages with more or equals minNbReplies\n      --limitMinNbVotesDown string       Search by nbVotesDown\n      --limitMinNbVotesUP string         Search by nbVotesUP\n      --notLabel string                  Search by label (exclude): could be labelA,labelB\n      --notTag string                    Search by tag (exclude) : could be tagA,tagB\n      --onlyCount string                 --onlyCount=true: only count messages, without retrieve msg. limit, skip, treeview criterias are ignored.\n      --onlyMsgRoot string               --onlyMsgRoot=true: restricts to root message only (inReplyOfIDRoot empty). If treeView is used, limit search criteria to root message, replies are still given, independently of search criteria.\n      --startLabel string                Search by a label prefix: --startLabel='mykey:,myKey2:'\n      --startTag string                  Search by a tag prefix: --startTag='mykey:,myKey2:'\n      --tag string                       Search by tag : could be tagA,tagB\n      --text string                      Search by text\n      --topic string                     Search by topic\n      --treeView string                  Tree View of messages: onetree or fulltree. Default: notree\n      --username string                  Search by username : could be usernameA,usernameB\n\n Examples\n\nCreate a message\ntatcli message add /topic my message\n\nWith labels:\n\ntatcli msg add --label=\"cccccc;label,#dddddd;label2\" /topic my message\n\nIf you are a system user, you can force date creation. Date as timestamp\n\ntatcli message add --dateCreation=11111 /topic my message\n\nReply to a message\ntatcli message reply /topic idOfMessage my message\n\n Like a message\ntatcli message like /topic idOfMessage\n\nUnlike a message\ntatcli message unlike /topic idOfMessage\n\n Add a label to a message\ntatcli message label /topic idOfMessage color myLabel\n\nRemove a label from a message\ntatcli message unlabel /topic idOfMessage myLabel\n\n Remove all labels and add new ones to a message\ntatcli message relabel /topic idOfMessage --label=\"#cccccc;label,#dddddd;label2\"\n\nUpdate a message by adding additional text at the end of message\ntatcli message concat /topic idOfMessage additional text\n\n Vote UP a message\ntatcli message voteup /topic idOfMessage\n\nVote Down a message\ntatcli message votedown /topic idOfMessage\n\n Remove a Vote UP from a message\ntatcli message unvoteup /topic idOfMessage\n\nRemove a Vote Down from a message\ntatcli message unvotedown /topic idOfMessage\n\n Create a task from one message\ntatcli message task /Private/username/Tasks idOfMessage\n\nRemove a message from tasks\ntatcli message untask /Private/username/Tasks idOfMessage\n\n Move a message to another topic\ntatcli message move /MyOldTopic/SubTopic idOfMessage /MyNewTopic/SubTopic\n\nGetting message\ntatcli message list /topic\ntatcli message list /topic 0 10\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-presence",
        "title": "tatcli presence -h",
        "content": "---\ntitle: \"tatcli presence -h\"\nweight: 5\ntoc: true\nprev: \"/tatcli/tatcli-message\"\nnext: \"/tatcli/tatcli-stats\"\n\n---\n\nCommand Description\n tatcli presence -h\n\nPresence commands: tatcli presence [command]\n\nUsage:\n  tatcli presence [command]\n\nAliases:\n  presence, p\n\nAvailable Commands:\n  add         Add a new presence on one topic with status (online, offline, busy): tatcli presence add topic status\n  delete      Delete a user's presence on one topic: tatcli presence delete topic username\n  list        List all presences on one topic: tatcli presence list topic [skip] [limit]\n\nFlags:\n  -h, --help=false: help for presence\n\nGlobal Flags: see tatcli -h\n\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-stats",
        "title": "tatcli stats -h",
        "content": "---\ntitle: \"tatcli stats -h\"\nweight: 6\ntoc: true\nprev: \"/tatcli/tatcli-presence\"\nnext: \"/tatcli/tatcli-system\"\n\n---\n\nCommand Description\n tatcli stats -h\n\nStats commands (admin only): tatcli stats [command]\n\nUsage:\n  tatcli stats [command]\n\nAliases:\n  stats, stat\n\nAvailable Commands:\n  count              Count all messages, groups, presences, users, groups, topics: tatcli stats count\n  distribution       Distribution of messages per topics: tatcli stats distribution\n  dbstats            DB Stats: tatcli stats dbstats\n  dbServerStatus     DB Stats: tatcli stats dbServerStatus\n  dbReplSetGetConfig DB Stats: tatcli stats dbReplSetGetConfig\n  dbReplSetGetStatus DB Stats: tatcli stats dbReplSetGetStatus\n  dbCollections      DB Stats on each collection: tatcli stats dbCollections\n  dbSlowestQueries   DB Stats slowest Queries: tatcli stats dbSlowestQueries\n  instance           Info about current instance of engine\n\nFlags:\n  -h, --help=false: help for stats\n\nGlobal Flags: see tatcli -h\n\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-system",
        "title": "tatcli system -h",
        "content": "---\ntitle: \"tatcli system -h\"\nweight: 7\ntoc: true\nprev: \"/tatcli/tatcli-stats\"\nnext: \"/tatcli/tatcli-topic\"\n\n---\n\nCommand Description\n tatcli system -h\n\nSystem commands (admin only): tatcli system [command]\n\nUsage:\n  tatcli system [command]\n\nAliases:\n  system, sys\n\nAvailable Commands:\n  cacheclean  Clean Cache: tatcli system cacheclean\n  cacheinfo   Info on Cache: tatcli system cacheinfo\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-topic",
        "title": "tatcli topic -h",
        "content": "---\ntitle: \"tatcli topic -h\"\nweight: 8\ntoc: true\nprev: \"/tatcli/tatcli-system\"\nnext: \"/tatcli/tatcli-ui\"\n\n---\n\nCommand Description\n tatcli topic -h\n\nTopic commands: tatcli topic [command]\n\nUsage:\n  tatcli topic [command]\n\nAliases:\n  topic, t\n\nAvailable Commands:\n  addAdminGroup     Add Admin Groups to a topic: tatcli topic addAdminGroup [--recursive] topic groupname1 [groupname2]...\n  addAdminUser      Add Admin Users to a topic: tatcli topic addAdminUser [--recursive] topic username1 [username2]...\n  addParameter      Add Parameter to a topic: tatcli topic addParameter [--recursive] topic key:value [key2:value2]...\n  addRoGroup        Add Read Only Groups to a topic: tatcli topic addRoGroup [--recursive] topic groupname1 [groupname2]...\n  addRoUser         Add Read Only Users to a topic: tatcli topic addRoUser [--recursive] topic username1 [username2]...\n  addRwGroup        Add Read Write Groups to a topic: tatcli topic addRwGroup [--recursive] topic groupname1 [groupname2]...\n  addRwUser         Add Read Write Users to a topic: tatcli topic addRwUser [--recursive] topic username1 [username2]...\n  allcomputelabels  Compute Labels on all topics, only for tat admin : tatcli topic allcomputelabels\n  allcomputereplies Compute Replies on all topics, only for tat admin : tatcli topic allcomputereplies\n  allcomputetags    Compute Tags on all topics, only for tat admin : tatcli topic allcomputetags\n  allsetparam       Set a param for all topics, only for tat admin : tatcli topic allsetparam paramName paramValue\n  computelabels     Compute Labels on this topic, only for tat admin and administrators on topic : tatcli topic computelabels topic\n  computetags       Compute Tags on this topic, only for tat admin and administrators on topic : tatcli topic computetags topic\n  create            Create a new topic: tatcli create topic description of topic\n  delete            Delete a topic: tatcli delete topic\n  deleteAdminGroup  Delete Admin Groups from a topic: tatcli topic deleteAdminGroup [--recursive] topic groupname1 [groupname2]...\n  deleteAdminUser   Delete Admin Users from a topic: tatcli topic deleteAdminUser [--recursive] topic username1 [username2]...\n  deleteParameter   Remove Parameter to a topic: tatcli topic deleteParameter [--recursive] topic key [key2]...\n  deleteRoGroup     Delete Read Only Groups from a topic: tatcli topic deleteRoGroup [--recursive] topic groupname1 [groupname2]...\n  deleteRoUser      Delete Read Only Users from a topic: tatcli topic deleteRoUser [--recursive] topic username1 [username2]...\n  deleteRwGroup     Delete Read Write Groups from a topic: tatcli topic deleteRwGroup [--recursive] topic groupname1 [groupname2]...\n  deleteRwUser      Delete Read Write Users from a topic: tatcli topic deleteRwUser [--recursive] topic username1 [username2]...\n  list              List all topics: tatcli topic list [skip] [limit], tatcli topic list -h for see all criterias\n  parameter         Update param on one topic: tatcli topic param [--recursive] topic maxLength canForceDate canUpdateMsg canDeleteMsg canUpdateAllMsg canDeleteAllMsg adminCanUpdateAllMsg adminCanDeleteAllMsg isAutoComputeTags isAutoComputeLabels\n  truncate          Remove all messages in a topic, only for tat admin and administrators on topic : tatcli topic truncate topic [--force]\n  truncatelabels    Truncate Labels on this topic, only for tat admin and administrators on topic : tatcli topic truncatelabels topic\n  truncatetags      Truncate Tags on this topic, only for tat admin and administrators on topic : tatcli topic truncatetags topic\n\nFlags:\n  -h, --help=false: help for topic\n\nGlobal Flags: see tatcli -h\n\nExamples\n Create a Topic\ntatcli topic add /topic topic description\n\nDelete a Topic\ntatcli topic delete /topic\n\n Truncate a Topic\ntatcli topic truncate /topic\n\nGetting Topics List\ntatcli topic list\ntatcli topic list skip limit\ntatcli topic list skip limit true\nif true, return nb unread messages\n\n Add a read only user to a topic\ntatcli topic addRoUser /topic username\ntatcli topic addRoUser /topic username1 username2\nAdd a read write user to a topic\ntatcli topic addRwUser /topic username\ntatcli topic addRwUser /topic username1 username2\n\n Add an admin user to a topic\ntatcli topic addAdminUser /topic username\ntatcli topic addAdminUser /topic username1 username2\n\nDelete a read only user from a topic\ntatcli topic deleteRoUser /topic username\ntatcli topic deleteRoUser /topic username1 username2\n\n Delete a read write user from a topic\ntatcli topic deleteRwUser /topic username\ntatcli topic deleteRwUser /topic username1 username2\n\nDelete an admin user from a topic\ntatcli topic deleteAdminUser /topic username\ntatcli topic deleteAdminUser /topic username1 username2\n\n Add a read only group to a topic\ntatcli topic addRoGroup /topic groupname\ntatcli topic addRoGroup /topic groupname1 groupname2\n\nAdd a read write group to a topic\ntatcli topic addRwGroup /topic groupname\ntatcli topic addRwGroup /topic groupname1 groupname2\n\n Add an admin group to a topic\ntatcli topic addAdminGroup /topic groupname\ntatcli topic addAdminGroup /topic groupname1 groupname2\n\nDelete a read only group from a topic\ntatcli topic deleteRoGroup /topic groupname\ntatcli topic deleteRoGroup /topic groupname1 groupname2\n\n Delete a read write group from a topic\ntatcli topic deleteRwGroup /topic groupname\ntatcli topic deleteRwGroup /topic groupname1 groupname2\n\nDelete an admin group from a topic\ntatcli topic deleteAdminGroup /topic groupname\ntatcli topic deleteAdminGroup /topic groupname1 groupname2\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-ui",
        "title": "tatcli ui -h",
        "content": "---\ntitle: \"tatcli ui -h\"\nweight: 9\ntoc: true\nprev: \"/tatcli/tatcli-topic\"\nnext: \"/tatcli/tatcli-update\"\n\n---\n\nInteractive mode of tatcli :\ntatcli ui or with args :\n tatcli ui /YourTopic/SubTopic /run AA,BB /hide-usernames /hide-top\n tatcli ui /YourTopic/SubTopic /split label:open label:doing label:done /mode run /save\n tatcli ui /YourTopic/SubTopic /run AA,BB /hide-usernames /hide-bottom /save\n\nShortcuts:\n ----------------------------------------------\n ----------------------------------------------\n         |||                     |||\n         |||                     |||\n         |||         |||         |||\n         |||         |||         |||\n         |||                     |||\n         |||         |||         |||\n         |||         |||         |||\n         |||                     |||\n         |||                     |||\n\nCtrl + a to view all topics. Cmd /topics in send box\nCtrl + b to go back to messsages list, after selected a message\nCtrl + c clears filters and UI on current messages list\nCtrl + f to view favorites topics. Cmd /favorites\nCtrl + h to go back home. Cmd /home or /help\nCtrl + t hide or show top menu. Cmd /toggle-top\nCtrl + y hide or show actionbox menu. Cmd /toggle-bottom\nCtrl + o open current message on tatwebui with a browser. Cmd /open\n           Use option tatwebui-url in config file. See /set-tatwebui-url\nCtrl + p open links in current message with a browser. Cmd /open-links\nCtrl + j / Ctrl + k (for reverse):\n        if mode run is enabled, set a msg from open to doing,\n             from doing to done from done to open.\n        if mode monitoring is enabled, set a msg from UP to AL,\n             from AL to UP.\nCtrl + q to quit. Cmd /quit\nCtrl + r to view unread topics. Cmd /unread\nCtrl + u display/hide usernames in messages list. Cmd /toggle-usernames\nUP / Down to move into topics & messages list\nUP / Down to navigate through history of action box\ntab to go to next section on screen\n\n Commands on Action Box:\n/help display this page\n/me show information about you\n/version to show tatcli and engine version\n\nOn messages list:\n/label eeeeee yourLabel to add a label on selected message\n/unlabel yourLabel to remove label \"yourLabel\" on selected message\n/voteup, /votedown, /unvoteup, /unvotedown to vote up or down, or remove vote\n/task, /untask to add or remove selected message as a personal task\n/like, /unlike to add or remove like on selected message\n/filter label:labelA,labelB andtag:tag,tagb\n/mode (run|monitoring): enable Ctrl + l shortcut, see on left side for help\n/codereview splits screen into fours panes: label:OPENED label:APPROVED label:MERGED label:DECLINED\n/monitoring splits screen into three panes: label:UP, label:AL, notlabel:AL,UP\n       This is the same as two commands:\n         /split label:UP label:AL notlabel:AL,UP\n         /mode monitoring\n/run tag splits screen into three panes: label:open, label:doing, label:done\n        /run AA,BB is the same as two commands:\n          /split tag:AA,BB;label:open tag:AA,BB;label:doing tag:AA,BB;label:done\n          /mode run\n/set-tatwebui-url urlOfTatWebUI sets tatwebui-url in tatcli config file. This\n        url is used by Ctrl + o shortcut to open message with a tatwebui instance.\n/split criteria splits screen with one section per criteria delimited by space, ex:\n        /split label:labelA label:labelB label:labelC\n        /split label:labelA,labelB andtag:tag,tagb\n        /split tag:myTag;label:labelA,labelB andtag:tag,tagb;label:labelC\n/save saves current filters and /toggle-* in tatcli config file\n/toggle-usernames displays or hides username in messages list\n\nFor /split and /filter, see all parameters on https://github.com/ovh/tat#parameters\n\nOn topics list, ex:\n/filter topic:/Private/firstname.lastname\nsee all parameters on https://github.com/ovh/tat#parameters-4\n\nHooks\n\n Standard Hooks\n\nIn your tatcli config file ($HOME/.tatcli/config.json), add attribut hooks  :\n\nExample :\ncat $HOME/.tatcli/config.json\n{\n  \"username\": \"username\",\n  \"password\": \"tatPassword\",\n  \"url\": \"https://your-tat-engine-url\",\n  \"tatwebui-url\": \"https://your-tat-webui-url\",\n  \"hooks\": [\n    {\n      \"shortcut\": \"C-x\",\n      \"command\": \"/todo\",\n      \"exec\": \"tatcli msg reply $UISELECTEDMSGTOPIC $UISELECTEDMSGID #TODO $UIACTIONTEXT\",\n      \"topics\": [\n        \"/Internal/Alerts\"\n      ]\n    },\n    {\n      \"shortcut\": \"\",\n      \"command\": \"/FIXME\",\n      \"exec\": \"tatcli msg reply $UISELECTEDMSGTOPIC $UISELECTEDMSGID #FIXME $UIACTIONTEXT\",\n      \"topics\": []\n    },\n    {\n      \"shortcut\": \"\",\n      \"command\": \"/foo\",\n      \"exec\": \"foo.sh $UISELECTEDMSGID #FIXME $UIACTION_TEXT\",\n      \"topics\": [\n        \"/Internal/topicA\",\n        \"/Internal/topicB\"\n      ]\n    }\n  ]\n\nEmpty attributes 'topics': hook is available on all topics.\n\nAvailable variable:\n\n$UISELECTEDMSG_ID\n$UISELECTEDMSG_TEXT\n$UISELECTEDMSG_TOPIC\n$UISELECTEDMSGAUTHORUSERNAME\n$UISELECTEDMSGDATECREATION\n$UISELECTEDMSGDATEUPDATE\n$UICURRENTUSERNAME\n\nPost Hook RUN Action\nIn your tatcli config file ($HOME/.tatcli/config.json), add attribut post-hook-run-action  :\n\ncat $HOME/.tatcli/config.json\n{\n  \"username\": \"username\",\n  \"password\": \"tatPassword\",\n  \"url\": \"https://your-tat-engine-url\",\n  \"tatwebui-url\": \"https://your-tat-webui-url\",\n  \"post-hook-run-action\": \"./yourScript.sh\"\n}\n\nIn tatcli ui, mode run, this command will be called each time you move a message.\n\nyourScript.sh will be called like this :\n\n./yourScript.sh action idMessage msgJson\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-update",
        "title": "tatcli update -h",
        "content": "---\ntitle: \"tatcli update -h\"\nweight: 10\ntoc: true\nprev: \"/tatcli/tatcli-ui\"\nnext: \"/tatcli/tatcli-user\"\n\n---\n\nCommand Description\n tatcli update -h\n\ntatcli update\n\nUsage:\n  tatcli update [flags]\n  tatcli update [command]\n\nAliases:\n  update, up\n\nAvailable Commands:\n  snapshot    Update tatcli to latest snapshot version: tatcli update snapshot\n\nFlags:\n  -h, --help=false: help for update\n\nGlobal Flags: see tatcli -h\n\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-user",
        "title": "tatcli users -h",
        "content": "---\ntitle: \"tatcli users -h\"\nweight: 11\ntoc: true\nprev: \"/tatcli/tatcli-update\"\nnext: \"/tatcli/tatcli-version\"\n\n---\n\nCommand Description\n tatcli user -h\n\nUser commands: tatcli user command\n\nUsage:\n  tatcli user [command]\n\nAliases:\n  user, u\n\nAvailable Commands:\n  list                          List all users: tatcli user list [skip] [limit]\n  me                            Get Information about you: tatcli user me\n  contacts                      Get contacts presences since n seconds: tatcli user contacts seconds\n  addContact                    Add a contact: tatcli user addContact contactUsername\n  removeContact                 Remove a contact: tatcli user removeContact contactUsername\n  addFavoriteTopic              Add a favorite Topic: tatcli user addFavoriteTopic topicName\n  removeFavoriteTopic           Remove a favorite Topic: tatcli user removeFavoriteTopic topicName\n  enableNotificationsTopic      Enable notifications on a topic: tatcli user enableNotificationsTopic topicName\n  enableNotificationsAllTopics  Enable notifications on a topic: tatcli user enableNotificationsAllTopics\n  disableNotificationsTopic     Disable notifications on a topic: tatcli user disableNotificationsTopic topicName\n  disableNotificationsAllTopics Disable notifications on all topics: tatcli user disableNotificationsAllTopics\n  addFavoriteTag                Add a favorite Tag: tatcli user addFavoriteTag tag\n  removeFavoriteTag             Remove a favorite Tag: tatcli user removeFavoriteTag tag\n  add                           Add a user: tatcli user add username email fullname\n  reset                         Ask for Reset a password: tatcli user reset username email\n  resetSystemUser               Reset password for a system user (admin only): tatcli user resetSystemUser username\n  convert                       Convert a user to a system user (admin only): tatcli user convert username canWriteNotifications canListUsersAsAdmin\n  updateSystemUser              Update a system user (admin only): tatcli user updateSystemUser username canWriteNotifications canListUsersAsAdmin\n  archive                       Archive a user (admin only): tatcli user archive username\n  rename                        Rename username of a user (admin only): tatcli user rename oldUsername newUsername\n  update                        Update Fullname and Email of a user (admin only): tatcli user update username newEmail newFullname\n  setAdmin                      Grant user to Tat admin (admin only): tatcli user setAdmin username\n  verify                        Verify account: tatcli user verify [--save] username tokenVerify\n  check                         Check Private Topics and Default Group on one user (admin only): tatcli user check username fixPrivateTopics fixDefaultGroup\n\nFlags:\n  -h, --help=false: help for user\n\nGlobal Flags: see tatcli -h\n\nExamples\n Create a user\ntatcli user add username email fullname\n\nVerify account\ntatcli user verify username tokenVerify\n\nFor saving configuration in $HOME/.tatcli/config.json file\ntatcli user verify --save username tokenVerify\n\n Ask for reset password\ntatcli user reset username email\n\nGet information about me\ntatcli user me\n\n Get contacts presences since n seconds: tatcli user contacts seconds\ntatcli user contacts 15\n\nAdd a favorite tag\ntatcli user addFavoriteTag myTag\n\n Remove a favorite tag\ntatcli user removeFavoriteTag myTag\n\nAdd a favorite topic\ntatcli user addFavoriteTopic /topic/sub-topic\n\n Remove a favorite topic\ntatcli user removeFavoriteTopic /topic/sub-topic\n\nEnable notifications on a topic\n\nNotifications are by default enabled on topic\n\ntatcli user enableNotificationsTopic /topic/sub-topic\n\n Disable notifications on a topic\ntatcli user disableNotificationsTopic /topic/sub-topic\n\nEnable notifications on all topics\n\nNotifications are by default enabled on all topics\n\ntatcli user enableNotificationsAllTopics\n\n Disable notifications on all topics\ntatcli user disableNotificationsAllTopics\n\nList Users\ntatcli user list\n\nwith groups (admin only):\n\ntatcli user list --withGroups\n\n Convert to a system user (Admin only)\ntatcli user convert usernameToConvertSystem flagCanWriteOnNotificationsTopics flagCanListUsersAsAdmin\nflagCanWriteOnNotificationsTopics could be true or false\n\nflagCanListUsersAsAdmin could be true or false\n\nUpdate a system user (Admin only)\ntatcli user userSystemUser usernameOfSystemUser flagCanWriteOnNotificationsTopics flagCanListUsersAsAdmin\n\nflagCanWriteOnNotificationsTopics could be true or false\n\nflagCanListUsersAsAdmin could be true or false\n\n Grant a user to Tat Admin (Admin only)\ntatcli user setAdmin usernameToGrant\n\nArchive a user (Admin only)\ntatcli user archive usernameToArchive\n\n Rename a username  (Admin only)\ntatcli user rename oldUsername newUsername\n\nUpdate fullname and email (Admin only)\ntatcli user update username newEmail newFirstname newLastname\n\n Check a user (Admin only)\n\nCheck Private Topics and Default Group on one user:\n\ntatcli user check username fixPrivateTopics fixDefaultGroup\n\nExample :\n\ntatcli check username true true\n",
        "tags": []
    },
    {
        "uri": "./tat/tatcli/tatcli-version",
        "title": "tatcli version -h",
        "content": "---\ntitle: \"tatcli version -h\"\nweight: 12\ntoc: true\nprev: \"/tatcli/tatcli-user\"\n\n---\n\nCommand Description\n tatcli version -h\n\ntatcli version\n\nUsage:\n  tatcli version [flags]\n\nAliases:\n  version, v\n\nFlags:\n  -h, --help=false: help for version\n      --versionNewLine=true: New line after version number. If true, display Version Engine too\n\nGlobal Flags: see tatcli -h\n\n",
        "tags": []
    },
    {
        "uri": "./tat/tatnhack/index",
        "title": "Tat'n Hack",
        "content": "---\ntitle: \"Tat'n Hack\"\nweight: 30\nchapter: true\nicon: \"b7. /b\"\nnext: \"/tatnhack/monitoring-process\"\n---\n\nChapter 7\n\n Tat'n Hack\n",
        "tags": []
    },
    {
        "uri": "./tat/tatnhack/monitoring-process",
        "title": "Monitoring a process with al2tat",
        "content": "---\ntitle: \"Monitoring a process with al2tat\"\nweight: 32\nprev: \"/tatnhack\"\nnext: \"/tatnhack/visual-feedback\"\ntoc: true\n\n---\n\nHere, a script for monitoring process and send alert to al2tat.\n\nScript checkProcess.sh:\n\n!/bin/bash\n\nNAME=\"$1\"\nHOSTNAME=hostname\nTAT_USER=\"tat.system.your.user\"\nTAT_PASSWORD=\"YouTatVeryLongPassword\"\nTAT_TOPIC=\"/Internal/Alerts\"\n\nSERVICE=\"YourService\"\n\nif [[ \"x${NAME}\" == \"x\" ]]; then\n    echo \"invalid usage, ./checkProcess.sh processName\";\n    exit 1;\nfi;\n\npgrep -l ${NAME}  /dev/null 2&1\n\nif [[ $? -ne 0 ]]; then\n    curl -XPOST  \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tatusername: ${TATUSER}\" \\\n    -H \"Tatpassword: ${TATPASSWORD}\" \\\n    -H \"Tattopic: ${TATTOPIC}\" \\\n    -d '{ \"alert\" : \"AL\", \"nbAlert\" : 1, \"service\" : \"'${SERVICE}'\", \"summary\" : \"'${NAME}' is down on '${HOSTNAME}'\" }' https://url2tat/alarm/sync\nfi;\n\nCrontab\n\n*/5 * * * * checkProcess.sh yourProcess  /dev/null 2&1\n",
        "tags": []
    },
    {
        "uri": "./tat/tatnhack/visual-feedback",
        "title": "Visual Feedback",
        "content": "---\ntitle: \"Visual Feedback\"\nweight: 33\ntoc: true\nprev: \"/tatnhack/monitoring-process\"\n\n---\n\nVisual Feedback is a way to be alerted with lights, LED Strip lights or something else.\n\nPrinciples:\n\na message is created on tat\nscript check.sh use tatcli to check if a new message arrives.\non new message, chech.sh writes on /dev/ttyACM0 device\nan arduino, with a LED Strip interprets request to turn on the LEDs\n\nYou need:\n\nArduino Nano or Uno\n470Ω resistor\nA WS2812 strip\n1000ųF capacitor\n5V DC 2A Power Supply\n\nSee http://www.tweaking4all.com/hardware/arduino/arduino-ws2812-led/ or https://www.aufilelec.fr/ruban-de-led-rgb-pilote-par-un-arduino/ (French)\nfor assembly instructions.\n\nFile config.h\n\nifndef CONFIG_H\ndefine CONFIG_H\n\ndefine NUM_LEDS 30\ndefine DATA_PIN 7\nCRGB leds[ NUM_LEDS ];\nint argument = 20;\n\ndefine SERIAL_SPEED 9600\n\ndefine RED    0\ndefine BLUE   1\ndefine GREEN  2\n\nendif\n\nFile tatstripled.ino\ninclude \"FastLED.h\"\n// memo : https://www.arduino.cc/en/Reference/HomePage\n// uint8_t = short\n// uint16_t = int\n// uint32_t = long\n\ninclude \"config.h\"\n\nString cmd;\n\nvoid setup() {\n  Serial.begin(SERIAL_SPEED);\n  delay(2);\n  FastLED.addLedsNEOPIXEL, DATAPIN(leds, NUMLEDS);\n\n  delay(2000);\n  kitt(10,10,30,1,10);\n  kitt(10,30,10,1,10);\n  kitt(30,00,10,1,10);\n  FastLED.showColor(CRGB(0,0,0));\n}\n\nunsigned int parse(char* str, char* command, unsigned long params) {\n  unsigned int result = 0;\n  unsigned long currentInt = 0;\n\n  // get the command\n  for(command = str; (str !=0 ) && (*str != ':');str++);\n  if (*str) {\n    *str = 0;\n\n    // process through  the parameters\n    while (*(++str)) {\n      if ((str = '9') && (str = '0')) {\n        currentInt *= 10;\n        currentInt += *str - '0';\n      } else {\n        params[result++] = currentInt;\n        currentInt = 0;\n      }\n    }\n    params[result++] = currentInt;\n  }\n\n  return result;\n}\n\n// This function runs over and over, and is where you do the magic to light\n// your leds.\nvoid loop() {\n  if (Serial.available()  0) {\n\n    String fromUsb = Serial.readStringUntil('\\n');\n    char* command;\n    unsigned long parameters[20];\n    short red = 0;\n    short blue = 0;\n    short green = 0;\n    unsigned long* params = 0;\n    char fromUsbChar [100];\n    fromUsb.toCharArray(fromUsbChar, 100);\n\n    int parameterLength = parse(fromUsbChar, &command, parameters);\n    cmd = String(command);\n\n    if (cmd == \"stop\") {\n      FastLED.clearData();\n    }\n\n    if (parameterLength  2) {\n      red = (short) parameters[RED];\n      blue = (short) parameters[BLUE];\n      green = (short) parameters[GREEN];\n      params = &parameters[3];\n      parameterLength -= 3;\n\n      if (parameterLength  0) {\n        if (cmd == \"colorWipe\") {\n          colorWipe(red, green, blue, params[0]);\n        }\n        if (cmd == \"colorWipeMicro\") {\n          colorWipeMicro(red, green, blue, params[0]);\n        }     \n        if (cmd == \"Rainbow\") {\n          Rainbow(params[0]);\n        }\n\n        if (parameterLength  1) {\n          if (cmd == \"flashstrip\") {\n            flashstrip(red, green, blue, params[0], params[1]);\n          }\n          if (cmd == \"flash\") {\n            flash(red, green, blue, params[0], params[1]);\n          }\n          if (cmd == \"flashstriptwo\") {\n            flashstriptwo(red, green, blue, params[0], params[1]);\n          }\n          if (cmd == \"pixel\") {\n            pixel(red, green, blue, params[0], params[1]);\n          }\n          if (cmd == \"pixeldelay\") {\n            pixeldelay(red, green, blue, params[0], params[1]);\n          }          \n          if (cmd == \"jauge\") {\n            jauge(red, green, blue, params[0], params[1]);\n          }\n          if (cmd == \"bug\") {\n            bug(params[0], params[1]);\n          }\n          if (cmd == \"kitt\") {\n            kitt(red, green, blue, params[0], params[1]);\n          }\n        }\n      }\n    }\n\n  } //End of if\n}\n\n// cmd fills led with one color\nvoid colorWipe(short r, short g, short b, long tempo) {\n    FastLED.showColor(CRGB( r, g, b));\n    delay(tempo);\n}\n\n//\nvoid colorWipeMicro(short r, short g, short b, long tempoMicro) {\n  FastLED.showColor(CRGB( r, g, b));\n  delayMicroseconds(tempoMicro);\n}\n\n//\nvoid pixel (short r, short g, short b, short pix, long tempoMicro) {\n  leds[(pix - 1)].setRGB( r, g, b);\n  FastLED.show();\n  delayMicroseconds(tempoMicro);\n}\n\n//\nvoid pixeldelay (short r, short g, short b, short pix, long numberOfCycle) {\n  for (int i = 0; i < numberOfCycle; i++) {\n    leds[(pix - 1)].setRGB( r, g, b);\n    FastLED.show();\n    delay(1000);\n    leds[(pix - 1)].setRGB( 0, 0, 0);\n    FastLED.show();\n    delay(1000);\n  }\n}\n\n//\nvoid jauge(short r, short g, short b, short numberOfLed, short tempo) {\n  for (int i = 0; i <= numberOfLed; i++) {\n    leds[(i-1)].setRGB( r, g, b);\n    FastLED.show();\n    delay(tempo);\n  }\n}\n\n//\nvoid flashstrip (short r, short g, short b, int numberOfCycle,int tempo) {\n  for (int i = 0; i < numberOfCycle; i++) {\n    FastLED.showColor(CRGB( r, g, b));\n    delay(tempo);\n    FastLED.showColor(CRGB(0, 0, 0));\n    delay(tempo);\n  }\n}\n\nvoid flashstriptwo (short r, short g, short b, int numberOfCycle, int tempoMicro) {\n  for (int i = 0; i < numberOfCycle; i++) {\n    FastLED.showColor(CRGB( r, g, b));\n    delayMicroseconds(tempoMicro);\n    FastLED.showColor(CRGB(0, 0, 0));\n    delayMicroseconds(tempoMicro);\n  }\n}\n\nvoid flash (short r, short g, short b, int numberOfCycle,int tempo) {\n  for (int i = 0; i < numberOfCycle; i++) {\n    colorWipe(r, g, b, tempo);\n    colorWipe(0, 0, 0, tempo);\n  }\n}\n\n//\nvoid bug (int numberOfCycle, long tempo) {\n  for (int j = 0; j <= numberOfCycle; j++) {\n    leds[(random(0, 30))].setRGB((random(0, 255)), (random(0, 255)), (random(0, 255)));\n    FastLED.show();\n    delay(tempo);\n  }\n}\n\n//\nvoid kitt(short r, short g, short b, short nbForwardBackward, short speed) {\n\n  for (int k = 1; k <= nbForwardBackward; k++) {\n    for (int i = 0; i <= 30; i++) {\n      leds[i].setRGB( r, g, b); // full red actual led\n      FastLED.show();\n      delay (speed);\n      if (i  0) {\n        leds[(i - 1)].setRGB( 0, 0, 0); // full black led before\n        FastLED.show();\n        delay (speed);\n      }\n    }\n    for (int i = 30; i = 0; i--) {\n      if (i != 0) {\n        leds[i].setRGB( r, g, b); // full red actual led\n        FastLED.show();\n        delay (speed);\n      }\n      if (i < 30) {\n        leds[(i + 1)].setRGB( 0, 0, 0); // full black led before\n        FastLED.show();\n        delay (speed);\n      }\n    }\n  }\n}\n\nvoid Rainbow(int tempo){\n  int deltahue = 5;\n  for (int thishue = 0; thishue < 255; thishue++) {\n    fill_rainbow(leds, 30, thishue, deltahue);\n    FastLED.show();\n    delay(tempo);\n  }\n}\n\nFile check.sh\n\n!/bin/bash\n\nNOW=date +\"%s\"\nLASTCALLFILE=\"/tmp/tatstripled.lastcall\"\nMINDATE=cat $LASTCALL_FILE\n\nif [[ \"x\" == \"$MIN_DATE\" ]]; then\n  MIN_DATE=date +%s -d \"1 day ago\"\nfi;\n\nfunction send {\n    if [[ \"x0\" != \"x$2\" ]]; then\n      echo \"$1\"\n      echo -n \"$1\"  /dev/ttyACM0\n      echo \"send done\"\n    fi;\n}\n\n$1 code ret tatli\n $2 title\n$3 type\n $4 color1\n$5 color2\n $6 color3\n$7 speed\nfunction work {\n    RET=$1\n    NB=cat out.log | cut -d ':' -f2 | sed 's/\\}//'\n\n    re='^[0-9]+$'\n    if [[ $RET -ne 0 ]] || [[ \"x\" == \"x$NB\" ]] || [[ \"x$NB\" == \"x502\" ]] || ! [[ $NB =~ $re ]]; then\n        echo '1'  error.log\n        NBE=wc -l log | cut -d ' ' -f1\n        if [[ $NBE -gt 5 ]]; then  tat down more than 5x\n            echo -n \"flash:100,0,0,10,100\"  /dev/ttyACM0 # red\n            sleep 2;\n        fi;\n        exit 1;\n    fi;\n    rm -f error.log\n    echo \"$2:$NB\"\n    send \"$3:$4,$5,$6,$NB,$7\" $NB\n    sleep 2;\n\n    if [[ \"x$3\" == \"xRainbow\" ]]; then # set rainbox to off\n        send \"kitt:$4,$5,$6,$NB,$7\" $NB\n        sleep 2;\n        send \"kitt:$4,$5,$6,$NB,$7\" $NB\n    fi;\n}\n\nrm -f out.log && tatcli msg list /Internal/Alerts --label=open --tag=CD --onlyCount true  out.log\nwork $? \"alerts\" \"kitt\" 100 0 0 10\n\nrm -f out.log && tatcli msg list /Internal/PullRequests --onlyCount=true --label=OPENED --dateMinCreation=$MIN_DATE  out.log\nwork $? \"newpr\" \"Rainbow\" 38 152 224 100\n\nrm -f out.log && tatcli msg list /Internal/PullRequests --onlyCount=true --label=OPENED  out.log\nwork $? \"pr\" \"kitt\" 4 16 22 20\n\necho $NOW  $LASTCALLFILE\n\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/cdsview",
        "title": "CDS View",
        "content": "---\ntitle: \"CDS View\"\nweight: 20\ntoc: true\nprev: \"/tatwebui/releaseview\"\nnext: \"/tatwebui/development\"\n\n---\n\nScreenshot\n\n Details of messages sent by CDS\n\nExample: message and replies created by CDS by pipeline building Tat Engine:\n\n{\n    \"_id\": \"58030253dc55630001c69635\",\n    \"text\": \"#cds #type:pipelineBuild #project:TAT #app:tat-engine #pipeline:build-go-api-tat #environment:NoEnv #build:74 #idp:297065 #branch:master\",\n    \"topic\": \"/Internal/CDS/Notifs\",\n    \"inReplyOfID\": \"\",\n    \"inReplyOfIDRoot\": \"\",\n    \"nbLikes\": 0,\n    \"labels\": [\n        {\n            \"text\": \"Success\",\n            \"color\": \"#3c763d\"\n        }\n    ],\n    \"nbVotesUP\": 0,\n    \"nbVotesDown\": 0,\n    \"tags\": [\n        \"cds\",\n        \"type:pipelineBuild\",\n        \"project:TAT\",\n        \"app:tat-engine\",\n        \"pipeline:build-go-api-tat\",\n        \"environment:NoEnv\",\n        \"build:74\",\n        \"idp:297065\",\n        \"branch:master\"\n    ],\n    \"dateCreation\": 1476592211.0365698,\n    \"dateUpdate\": 1476592269.024161,\n    \"author\": {\n        \"username\": \"tat.system.cds\",\n        \"fullname\": \"CDS System\"\n    },\n    \"replies\": [\n        {\n            \"_id\": \"58030280a41e6200014bf98a\",\n            \"text\": \"#cds #type:actionBuild #project:TAT #app:tat-engine #pipeline:build-go-api-tat #build:74 #action: #actionId:400588 #idp:297065\",\n            \"topic\": \"/Internal/CDS/Notifs\",\n            \"inReplyOfID\": \"58030253dc55630001c69635\",\n            \"inReplyOfIDRoot\": \"58030253dc55630001c69635\",\n            \"nbLikes\": 0,\n            \"labels\": [\n                {\n                    \"text\": \"Success\",\n                    \"color\": \"#3c763d\"\n                }\n            ],\n            \"nbVotesUP\": 0,\n            \"nbVotesDown\": 0,\n            \"tags\": [\n                \"cds\",\n                \"type:actionBuild\",\n                \"project:TAT\",\n                \"app:tat-engine\",\n                \"pipeline:build-go-api-tat\",\n                \"build:74\",\n                \"action:\",\n                \"actionId:400588\",\n                \"idp:297065\"\n            ],\n            \"dateCreation\": 1476592256.450992,\n            \"dateUpdate\": 1476592272.0423489,\n            \"author\": {\n                \"username\": \"tat.system.cds\",\n                \"fullname\": \"CDS System\"\n            },\n            \"nbReplies\": 0\n        },\n        {\n            \"_id\": \"5803027f403f9d0001b1af55\",\n            \"text\": \"#cds #type:actionBuild #project:TAT #app:tat-engine #pipeline:build-go-api-tat #build:74 #action:Packaging #actionId:400588 #idp:297065\",\n            \"topic\": \"/Internal/CDS/Notifs\",\n            \"inReplyOfID\": \"58030253dc55630001c69635\",\n            \"inReplyOfIDRoot\": \"58030253dc55630001c69635\",\n            \"nbLikes\": 0,\n            \"labels\": [\n                {\n                    \"text\": \"Waiting\",\n                    \"color\": \"#8a6d3b\"\n                }\n            ],\n            \"nbVotesUP\": 0,\n            \"nbVotesDown\": 0,\n            \"tags\": [\n                \"cds\",\n                \"type:actionBuild\",\n                \"project:TAT\",\n                \"app:tat-engine\",\n                \"pipeline:build-go-api-tat\",\n                \"build:74\",\n                \"action:Packaging\",\n                \"actionId:400588\",\n                \"idp:297065\"\n            ],\n            \"dateCreation\": 1476592255.230196,\n            \"dateUpdate\": 1476592255.230196,\n            \"author\": {\n                \"username\": \"tat.system.cds\",\n                \"fullname\": \"CDS System\"\n            },\n            \"nbReplies\": 0\n        },\n        {\n            \"_id\": \"580302566f60b7000148d63d\",\n            \"text\": \"#cds #type:actionBuild #project:TAT #app:tat-engine #pipeline:build-go-api-tat #build:74 #action:Commit #actionId:400584 #idp:297065\",\n            \"topic\": \"/Internal/CDS/Notifs\",\n            \"inReplyOfID\": \"58030253dc55630001c69635\",\n            \"inReplyOfIDRoot\": \"58030253dc55630001c69635\",\n            \"nbLikes\": 0,\n            \"labels\": [\n                {\n                    \"text\": \"Success\",\n                    \"color\": \"#3c763d\"\n                }\n            ],\n            \"nbVotesUP\": 0,\n            \"nbVotesDown\": 0,\n            \"tags\": [\n                \"cds\",\n                \"type:actionBuild\",\n                \"project:TAT\",\n                \"app:tat-engine\",\n                \"pipeline:build-go-api-tat\",\n                \"build:74\",\n                \"action:Commit\",\n                \"actionId:400584\",\n                \"idp:297065\"\n            ],\n            \"dateCreation\": 1476592214.5933328,\n            \"dateUpdate\": 1476592255.251998,\n            \"author\": {\n                \"username\": \"tat.system.cds\",\n                \"fullname\": \"CDS System\"\n            },\n            \"nbReplies\": 0\n        }\n    ],\n    \"nbReplies\": 3\n}\n\nConfiguration\nIn plugin.tpl.json file, add this line :\n\n\"tatwebui-plugin-cdsview\": \"git+https://github.com/ovh/tatwebui-plugin-cdsview.git\"\n\n Source\nhttps://github.com/ovh/tatwebui-plugin-cdsview\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/dashingview",
        "title": "Dashing View",
        "content": "---\ntitle: \"Dashing View\"\nweight: 6\ntoc: true\nprev: \"/tatwebui/pastatview\"\nnext: \"/tatwebui/releaseview\"\n\n---\n\nUsage\n\nThis screenshot\n\ncan be done by sending info with tatcli :\n\ntatcli msg add /Internal/YourTopic/Dashing \"monitoring\" \\\n  --label=\"#eeeee;border-width:0px\" \\\n  --label=\"#eeeee;height:110px\" \\\n  --label=\"#eeeee;hide-bottom\" \\\n  --label=\"#eeeee;order:1\" \\\n  --label=\"#eeeee;value:MyDashing\" \\\n  --label=\"#eeeee;width:96%\" \\\n  --label=\"#ffffff;color\" \\\n  --label=\"#161d23;bg-color\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring\" \\\n  --label=\"#93c47d;bg-color\" \\\n  --label=\"#eeeee;border-width:0px\" \\\n  --label=\"#eeeee;height:5px\" \\\n  --label=\"#eeeee;hide-bottom\" \\\n  --label=\"#eeeee;order:2\" \\\n  --label=\"#eeeee;value\" \\\n  --label=\"#eeeee;value\" \\\n  --label=\"#eeeee;value\" \\\n  --label=\"#eeeee;color\" \\\n  --label=\"#eeeee;width:96.3%\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring\" \\\n  --label=\"#161d23;bg-color\" \\\n  --label=\"#eeeee;border-width:0px\" \\\n  --label=\"#eeeee;color\" \\\n  --label=\"#eeeee;height:20px\" \\\n  --label=\"#eeeee;hide-bottom\" \\\n  --label=\"#eeeee;order:3\" \\\n  --label=\"#eeeee;width:96%\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:OCO_Critical\" \\\n  --label=\"#e8f1f4;bg-color\" \\\n  --label=\"#ce352c;color\" \\\n  --label=\"#eeeee;order:11\" \\\n  --label=\"#eeeee;value:79\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:OCO_Warn\" \\\n  --label=\"#e8f1f4;bg-color\" \\\n  --label=\"#fa6800;color\" \\\n  --label=\"#eeeee;order:12\" \\\n  --label=\"#eeeee;value:2312\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:OCO_Info\" \\\n  --label=\"#e8f1f4;bg-color\" \\\n  --label=\"#60a917;color\" \\\n  --label=\"#eeeee;order:13\" \\\n  --label=\"#eeeee;value:2714\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:StatusCake_Tests\" \\\n  --label=\"#e8f1f4;bg-color\" \\\n  --label=\"#63305a;color\" \\\n  --label=\"#eeeee;order:15\" \\\n  --label=\"#eeeee;value:15/15\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:checkFilerz A\" \\\n  --label=\"#eeeee;order:18\" \\\n  --label=\"#e8f1f4;bg-color\" \\\n  --label='#eeeeee;widget:progressbar' \\\n  --label='#eeeeee;percentRunning:70' \\\n  --label='#1ba1e2;color' \\\n  --label='#eeeeee;widget-class:success' \\\n  --label='#eeeeee;widget-mode:vertical'\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:checkFilerz B\" \\\n  --label=\"#eeeee;order:19\" \\\n  --label=\"#e8f1f4;bg-color\" \\\n  --label='#eeeeee;widget:progressbar' \\\n  --label='#eeeeee;percentRunning:30' \\\n  --label='#1ba1e2;color' \\\n  --label='#eeeeee;widget-class:success' \\\n  --label='#eeeeee;widget-mode:horizontal'\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:checkFilerz C\" \\\n  --label=\"#eeeee;order:20\" \\\n  --label=\"#e8f1f4;bg-color\" \\\n  --label='#eeeeee;widget:progressbar' \\\n  --label='#eeeeee;percentRunning:25' \\\n  --label='#eeeeee;widget-class:warning' \\\n  --label='#eeeeee;widget-mode:horizontal'\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:StatusUP\" \\\n  --label=\"#eeeee;order:21\" \\\n  --label=\"#60a917;bg-color\" \\\n  --label=\"#ffffff;color\" \\\n  --label=\"#eeeeee;value:79\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:Status\" \\\n  --label=\"#eeeee;order:22\" \\\n  --label=\"#60a917;bg-color\" \\\n  --label=\"#ffffff;color\" \\\n  --label=\"#eeeeee;value::)\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #YourTeam #item:Status\" \\\n  --label=\"#eeeee;order:22\" \\\n  --label=\"#60a917;bg-color\" \\\n  --label=\"#ffffff;color\" \\\n  --label=\"#eeeeee;value:↑\"\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #item:Pie\" \\\n  --label=\"#eeeee;order:23\" \\\n  --label=\"#e8f1f4;bg-color\"  \\\n  --label=\"#eeeeee;width:20%\" \\\n  --label='#eeeee;widget-data-serie:20 30 40' \\\n  --label='#eeeee;widget-options:donut:true donutWidth:60 startAngle:270 total:200 showLabel:false' \\\n  --label='#eeeee;widget:Pie'\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #item:Line\" \\\n  --label=\"#eeeee;order:24\" \\\n  --label=\"#e8f1f4;bg-color\" \\\n  --label=\"#eeeeee;width:76%\" \\\n  --label='#eeeeee;widget-data-labels:Mon Tue Wed Thu Fri Sat' \\\n  --label='#eeeeee;widget-data-options:low:0 showArea:true showPoint:false fullWidth:true' \\\n  --label='#eeeeee;widget-data-series:1 5 2 5 4 3' \\\n  --label='#eeeeee;widget-data-series:2 3 4 8 1 2' \\\n  --label='#eeeeee;widget-data-series:5 4 3 2 1 0.5' \\\n  --label='#eeeeee;widget:Line'\n\ntatcli msg add /Internal/YourTopic/Dashing \"#monitoring #item:Bar\"  \\\n  --label=\"#eeeee;order:25\" \\\n  --label=\"#e8f1f4;bg-color\" \\\n  --label=\"#eeeeee;height:200px\" \\\n  --label=\"#eeeeee;width:95%\" \\\n  --label=\"#eeeeee;widget:Bar\" \\\n  --label=\"#eeeeee;widget-data-labels:AA BB CC DD EE FF GG\" \\\n  --label=\"#eeeeee;widget-data-series:5 4 3 7 5 10 3\" \\\n  --label=\"#eeeeee;widget-data-series:3 2 9 5 4 6 4\" \\\n  --label=\"#eeeeee;widget-options:seriesBarDistance:10 reverseData:true horizontalBars:true\"\n\nIn standard View, theses messages look like:\n\nConfiguration\nIn plugin.tpl.json file, add this line :\n\n\"tatwebui-plugin-dashingview\": \"git+https://github.com/ovh/tatwebui-plugin-dashingview.git\"\n\n Source\nhttps://github.com/ovh/tatwebui-plugin-dashingview\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/development",
        "title": "Development",
        "content": "---\ntitle: \"Development\"\nweight: 20\ntoc: true\nprev: \"/tatwebui/cdsview\"\n\n---\n\nIntroduction\n\nA view in Tat WebUI is a bower's plugin. You can develop your own view to display message or add specific action on messages.\n\n Steps\nRequirements\nInstall NodeJs [https://nodejs.org/]\nInstall Bower\nnpm install -g bower\n\nInstall Grunt\nnpm install -g grunt-cli\n\nTatwebui bootstrap\n\nmkdir -p $HOME/src/github.com/ovh you can used what you want, it's just for example\ngit clone https://github.com/ovh/tatwebui.git\ncd tatwebui/client\ntouch plugin.tpl.json custom.plugin.tpl.json src/assets/config.json\ncd ../server\ntouch app/config.json\n\nTatwebui configuration\nIn file client/src/assets/config.json, add theses lines\n{\n  \"backend\": {\n    \"scheme\": \"https\",\n    \"host\": \"url-tat-engine\",\n    \"port\": 443,\n    \"autologin\": false\n  },\n  \"releaseview\": {\n    \"tracker\": \"https://github.com/ovh/tat/issues/\",\n    \"keyword\": \"github\"\n  },\n  \"help\": {\n    \"signup\": [\"l'aide ici\"]\n  },\n  \"links\": {\n    \"home\": [{\n      \"caption\": \"label home 1\",\n      \"url\": \"http://tat-engine.tat.tat.home1\"\n    }, {\n      \"caption\": \"label home 2\",\n      \"url\": \"http://tat-engine.tat.tat.home2\"\n    }],\n    \"menu\": [{\n      \"caption\": \"label 1\",\n      \"url\": \"http://tat-engine.tat.tat.label1\"\n    }, {\n      \"caption\": \"label 2\",\n      \"url\": \"http://tat-engine.tat.tat.label2\"\n    }]\n  },\n  \"viewconfigs\": {\n    \"standardview-list\": {\n      \"filters\": {\n        \"placeholder\": {\n          \"text\": \"text\",\n          \"label\": \"open,doing\",\n          \"andLabel\": \"open,doing\",\n          \"notLabel\": \"done\",\n          \"tag\": \"PCC,STOCKAGE\",\n          \"andTag\": \"PCC,STOCKAGE\",\n          \"notTag\": \"PCC,STOCKAGE\"\n        }\n      }\n    }\n  }\n}\n\nIn file server/app/config.json, add theses lines\nThis file is not really used in development, but it's checked by make target.\n\n{\n \"proxy\": {\n   \"tatEngine\": {\n     \"scheme\": \"http\",\n     \"host\": \"ipordomainofproxy\",\n     \"port\": 8080,\n     \"sslInsecureSkipVerify\": false\n   },\n   \"listen_port\": 8001\n },\n \"filesystem\": {\n     \"listen_port\": 8000\n },\n \"process\": {\n   \"nb_forks\": \"2\"\n }\n}\n\n Plugins configuration\nIn file plugin.tpl.json, add theses lines\n\n{\n  \"dependencies\": {\n    \"tatwebui-plugin-standardview\": \"git+https://github.com/ovh/tatwebui-plugin-standardview.git\",\n    \"tatwebui-plugin-notificationsview\": \"git+https://github.com/ovh/tatwebui-plugin-notificationsview.git\",\n    \"tatwebui-plugin-cdsview\": \"git+https://github.com/ovh/tatwebui-plugin-cdsview.git\",\n    \"tatwebui-plugin-monitoringview\": \"git+https://github.com/ovh/tatwebui-plugin-monitoringview.git\",\n    \"tatwebui-plugin-pastatview\": \"git+https://github.com/ovh/tatwebui-plugin-pastatview.git\",\n    \"tatwebui-plugin-dashingview\": \"git+https://github.com/ovh/tatwebui-plugin-dashingview.git\",\n    \"tatwebui-plugin-releaseview\": \"git+https://github.com/ovh/tatwebui-plugin-releaseview.git\"\n  }\n}\n\nFirst Run without additional plugin\n\ncd $HOME/src/github.com/ovh/tatwebui\nmake release && make run\n\nThen go to http://localhost:8000/ , check if it's ok.\nRun in Dev Mode\ncd $HOME/src/github.com/ovh/tatwebui\nmake devclient\n\nThen go to http://localhost:9000/ and use your tatusername and tatpassword to log in.\n\n Bootstrap your plugin\n\ncd $HOME/src/\ngit clone https://github.com/ovh/tatwebui-plugin-standardview.git\nmv tatwebui-plugin-standardview tatwebui-plugin-yourpluginview\ncd tatwebui-plugin-yourpluginview\nthen rename all files standardview to yourpluginview\n then rename all code Standardview to Yourpluginview, standardView to yourpluginView - it's case sensitive !\nadjust files bower.json file and yourpluginview-list.route.js\n\n Tatwebui Plugin Configuration for dev\n\nIn file custom.plugin.tpl.json, add theses lines\n\n{\n  \"dependencies\": {\n    \"your-plugin-view\": \"git+https://.../you-plugin-view.git\"\n  }\n}\n\ncd $HOME/src/github.com/ovh/tatwebui/client/bower_components\nln -s $HOME/you-plugin-view tatwebui-plugin-yourpluginview\ncd $HOME/src/github.com/ovh/tatwebui\nmake devclient\n\nThen go to http://localhost:9000/ and check if your view is available on top right\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/index",
        "title": "Tat Webui",
        "content": "---\ntitle: \"Tat Webui\"\nweight: 0\nchapter: true\nicon: \"b2. /b\"\nnext: \"/tatwebui/introduction\"\n---\n\nChapter 2\n\n Tat Webui\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/introduction",
        "title": "Introduction",
        "content": "---\ntitle: \"Introduction\"\nweight: 1\nprev: \"/tatwebui\"\nnext: \"/tatwebui/standardview\"\ntoc: false\n---\n\nTatwebui is a web application, with a nodejs HTTP Server for serving js/html/css files.\nThis application requests Tat Engine for all actions:\n\nRights Controls, Users & Groups\nTopics management, parameters, ACLs\nManipulate messages\n\nThe views are used to display messages in different ways. Views are plugins, see\nStandard View for example.\nSome OVH views are opensourced like:\n\nStandard View: standard view with all features on messages\nNotifications View: display user notifications in /Private/username/Notifications topic\nMonitoring View: quick look on many items, UP or Down\nRelease View: Plan, Changelog, Release... communicate with others teams\nDashing View: widgets, graph... one way to create dashing about everything\nPastat View: a Gist like\nCDS View: Display CDS Notifications\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/monitoringview",
        "title": "Monitoring View",
        "content": "---\ntitle: \"Monitoring View\"\nweight: 4\ntoc: true\nprev: \"/tatwebui/notificationsview\"\nnext: \"/tatwebui/pastatview\"\n\n---\n\nScreenshot\n\n Using\n\nSend to Tat Engine\n\nThe screenshot above was created with these messages:\n\ntatcli topic truncate /Private/yesnault/Monitoring --force\nfor i in {1..99}; do\n  for j in {1..20}; do\n     MTYPE=\"UP\";\n     COLOR=\"6C6\";\n     if [ ${j} -eq 7 ]; then MTYPE=\"AL\"; COLOR=\"d9534f\"; fi;\n     tatcli msg add /Private/yesnault/Monitoring \"#monitoring #myService #item:myItem${i}${j}\" --label=\"$COLOR;$MTYPE\"\n  done\ndone\n\nProduction Way with al2tat\n\nSend a monitoring message to al2tat microservice on path /monitoring.\nSee https://github.com/ovh/al2tat\n\n Configuration\n\nIn plugin.tpl.json file, add this line :\n\n\"tatwebui-plugin-monitoringview\": \"git+https://github.com/ovh/tatwebui-plugin-monitoringview.git\"\n\nSource\nhttps://github.com/ovh/tatwebui-plugin-monitoringview\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/notificationsview",
        "title": "Notifications View",
        "content": "---\ntitle: \"Notifications View\"\nweight: 3\ntoc: true\nprev: \"/tatwebui/standardview\"\nnext: \"/tatwebui/monitoringview\"\n\n---\n\nWhen a message contains a mention for someone, a other message is created by Tat Engine in topic\n/Private/username/Notifications, where username is the user mentioned.\n\nExample :\n\na message \"a first notification for @yesnault\" in topic /Internal/App\na other message \"and a second @yesnault in topic /Internal/App\" in topic /Internal/App\n\nsee result in screenshot below for these two messages in topic /Private/yesnault/Notifications\n\nScreenshot\n\n Configuration\nIn plugin.tpl.json file, add this line :\n\n\"tatwebui-plugin-notificationsview\": \"git+https://github.com/ovh/tatwebui-plugin-notificationsview.git\"\n\nSource\nhttps://github.com/ovh/tatwebui-plugin-notificationsview\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/pastatview",
        "title": "Pastat View",
        "content": "---\ntitle: \"Pastat View\"\nweight: 5\ntoc: true\nprev: \"/tatwebui/monitoringview\"\nnext: \"/tatwebui/dashingview\"\n\n---\n\nScreenshots\n Messages - List\n\nMessages - Edit\n\n Configuration\n\nIn plugin.tpl.json file, add this line :\n\n\"tatwebui-plugin-dashingview\": \"git+https://github.com/ovh/tatwebui-plugin-dashingview.git\"\n\nSource\nhttps://github.com/ovh/tatwebui-plugin-pastatview\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/releaseview",
        "title": "Release View",
        "content": "---\ntitle: \"Release View\"\nweight: 7\ntoc: true\nprev: \"/tatwebui/dashingview\"\nnext: \"/tatwebui/cdsview\"\n\n---\n\nScreenshot\n\n Using\n\nA release message :\n\nrelease:test a title\n\nA release message with attributes :\n\nrelease:test #attr:EU #attr:CA a title\n\nA release message with a forced date and attributes :\n\nrelease:test attr:EU #attr:CA #date:2015-12-24 a title\n\nAnd replies to complete informations about release :\n\nfix: a fix here\n\nfeat: a new feature\n\nFirst tag of reply will become a section (#feat, #fix, #whatever)\n\nExample\n\nThe screenshot above was created with these messages.\n\n Insert Release Title\ntatcli msg add /Private/yesnault/Release \"#release:2.0.0\" -v\n\nget IDMessage from previous command\nID_MSG=\"58032b202683911aacaa23d0\"\n\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"Major A message belongs to one topic only now.\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Major A GET on /Private/username/Tasks returns message in this topic and all message with label doing:username\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Major the field \"topics\" is kept for backwards compatibility\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Major new mongo index for more efficiency, with new field topic\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Chore logs/iot key\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Chore update deps\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Feat add async for /countEmptyTopic\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Feat add prod logger\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Feat allow http:// in tag\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Feat check date on list\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Feat list presences, get without topic name\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Feat remove condition on move msg\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Fix 401 if wrong auth\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Fix err on find topic\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Fix get msg in unknown topic\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Fix remove admin user\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Fix remove log fatal\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Fix remove unused log / return on unknown topic\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Refactor remove action bookmark\"\ntatcli msg reply /Private/yesnault/Release $ID_MSG \"#Refactor task: add label doing and doing:username\"\n\nConfiguration\nIn plugin.tpl.json file, add this line :\n\n\"tatwebui-plugin-releaseview\": \"git+https://github.com/ovh/tatwebui-plugin-releaseview.git\"\n\nAdd in config.json (client side) of tatwebui this attribute :\n\n\"releaseview\": {\n  \"tracker\": \"RELEASEVIEW_TRACKER\",\n  \"keyword\": \"RELEASEVIEW_KEYWORD\"\n},\n\nSet tracker with your issue tracker system.\n\nSet keyword to your issue tracker.\n\nExample : if you write a\nmessage like \"feat: a big feature RELEASE_KEYWORD:AAA-1\", an url will be generated on tatwebui :\n$RELEASE_TRACKER/AAA-1\n\nSource\nhttps://github.com/ovh/tatwebui-plugin-releaseview\n",
        "tags": []
    },
    {
        "uri": "./tat/tatwebui/standardview",
        "title": "Standard View",
        "content": "---\ntitle: \"Standard View\"\nweight: 2\ntoc: true\nprev: \"/tatwebui/introduction\"\nnext: \"/tatwebui/notificationsview\"\n\n---\n\nScreenshots\n Messages - List\n\nMessages - Edit\n\n Configuration\nIn plugin.tpl.json file, add this line :\n\n\"tatwebui-plugin-standardview\": \"git+https://github.com/ovh/tatwebui-plugin-standardview.git\"\n\nSource\nhttps://github.com/ovh/tatwebui-plugin-standardview\n",
        "tags": []
    }
]
