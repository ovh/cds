package gpg

import (
	"bytes"
	. "github.com/smartystreets/goconvey/convey"
	"testing"
)

func TestCodec(t *testing.T) {
	Convey("Codec", t, func() {

		toEncode := bytes.NewBuffer([]byte("This is a secret message"))

		target := new(bytes.Buffer)

		err := Encode([]byte(PublicKey), toEncode, target)
		So(err, ShouldEqual, nil)

		final := new(bytes.Buffer)

		err = Decode([]byte(PrivateKey), []byte("password"), target, final)
		So(err, ShouldEqual, nil)
		So(final.String(), ShouldEqual, "This is a secret message")
	})
}

// This a test key for "Maxwell Dev (dev@maxwellhealth.com)". I shouldn't have to say this, but DON'T USE THIS IN PRODUCTION
const PublicKey = `-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

mQENBFUjHZIBCACqfoKMDFwEI+mpgM4ILCFg39GfhWmaUJZGl9pPbJ7r7QWDyV7H
tJ2jEMe8JCetg7fALAOvXSzZN8AZl+4AMIiupQ+pEntH1khdw78mWgw23nswdArc
7jyY2t2q63YaRWuEIpDUGrsQkU4gqYfJfibFmBXPJAl66/zWCgpcX9qujWsOE0Ze
ogx0Ume+ecoMRsHYjpUhAKShS1nuYDQ7cS++v9uF0HyNdqSYt6i0p8Nh3N+P4j73
5Pj5U33kxXH8rtm8v4zSPGdsg5HXSctwznDE3z6FmSMMNrFSDwDBJn+1V61Fayt7
OuVixlHs3k4RCYR2fu/7Gk1DQ4jTThv6TFt/ABEBAAG0Ok1heHdlbGwgRGV2IChN
YXh3ZWxsIERldiBUZXN0IEtleSkgPGRldkBtYXh3ZWxsaGVhbHRoLmNvbT6JATgE
EwECACIFAlUjHZICGwMGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJENj6KDvw
GTFkbfgH/jGpgOC4zck82hDvltzDeoB3EcQKgGNYtKN3xP2cJtH3nogR8a1lVp2V
fL+wrkF7bii9K19XTv+xFA0ISdeXdbiNJlBwoVF0f+vhY7QuyzVplBrsupHCZ51R
kRLodf6RnKBZRrXXdqfqvI327ZfbpYTuVTmWmxpCCE5Je471vcKfA+awDqhsbd61
D4Favmb6SCcbDzvVCc0JlGykw+orFwW6XlqZY3WRm6JITYy2yoeFKkXBARUb+xQv
UpJp6GsIC5lKS/iizNF7abVL9ryfKGjSgXLG70lIJUMvZVbsFU6oiFfBIgNOoNVZ
lZQP148ZFjD0+vpHZBCej+14SYIGCKy5AQ0EVSMdkgEIAO0K9VRWr3NJf/e4dS+n
7xIiH8qxNCnDnurlQSGoQRSOrkMk4Hb2ivJA1I4Dt/9/Jk8W8tKhqUmuStA6DRSw
FFzVVfF3vw9Ac2aDQxsNMq57l9wThfIE4qyKCy7rN1tymn+I6vkpywNJWXosP9EY
9EPXGJ9H8sACSasmPZdDR2uLk0c3LfjjwuiPqEZ4IaqLMtXTnfLEpJIWJphKbiRM
6AQGFrHcYBQPnRMQlqdMT2cFePYmp04uL1R/yC4VZDtD5a4SashjBeHJQHtAZryW
VpegvEnALP8HeUmUnv8SA+TlJyiuRM/XAJ2fVufYFhaIVUqhh/+WsrhjKCMd5VgL
9xMAEQEAAYkBHwQYAQIACQUCVSMdkgIbDAAKCRDY+ig78BkxZCXWB/4ksuW6oKdP
zVmB/oNup93tZuMkzmF/g1R+UgqDMK3U4tWeoZpcoBWw/5XYy9CKwf4jo+5mgR9u
WSTwy+SejmfUGF1xxeVJtqKoWN9nhmhHg37CkH/WU4tb6b6Sce1Eknzxw2EMJxlV
a/LCSCC8GArLGNN6Gx8x8PRcR+bRCk3un1TGxGoERlK3uEvffQE6sNKsV/9baEOL
yoLRd/PdOE9m2sIz6LTXFooc+4ikU+Qfbj08lPHLvPqAIY9BrOi6DUaaE4A0NSSp
o/X7vd4M//oT0opSp4spYdussrFEOfWTSnreHCCdOQRhK+nPFaZHhvD+TG+kS9HP
u9AJenPQJOGs
=ngIu
-----END PGP PUBLIC KEY BLOCK-----`

const PrivateKey = `-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: GnuPG v1

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
=r4WR
-----END PGP PRIVATE KEY BLOCK-----`
