name: Create a simple workflow (ITSCWRKFLW3) and run it
testcases:
- name: assert filepath, your current directory must be at the root of this project
  steps:
  - script: '[ -f ./tests/fixtures/ITSCWRKFLW3/ITSCWRKFLW3.yml ]'
  - script: '[ -f ./tests/fixtures/ITSCWRKFLW3/build_api.pip.yml ]'
  - script: '[ -f ./tests/fixtures/ITSCWRKFLW3/build_front.pip.yml ]'
  - script: '[ -f ./tests/fixtures/ITSCWRKFLW3/deploy.pip.yml ]'
  - script: '[ -f ./tests/fixtures/ITSCWRKFLW3/root.pip.yml ]'
  - script: '[ -f ./tests/fixtures/ITSCWRKFLW3/tests.pip.yml ]'

- name: prepare test
  steps:
  - script: "{{.cds.build.cdsctl}} project remove --force ITSCWRKFLW3"
  - script: "{{.cds.build.cdsctl}} group remove --force ITSCWRKFLW3"
  - script: "{{.cds.build.cdsctl}} project add ITSCWRKFLW3 ITSCWRKFLW3"
  - script: "{{.cds.build.cdsctl}} environment add ITSCWRKFLW3 ITSCWRKFLW3-ENV-PREPROD"
  - script: "{{.cds.build.cdsctl}} environment add ITSCWRKFLW3 ITSCWRKFLW3-ENV-PROD"
  - script: "{{.cds.build.cdsctl}} application add ITSCWRKFLW3 ITSCWRKFLW3-APP"

- name: push workflow and pipelines
  steps:
  - script:  {{.cds.build.cdsctl}} workflow push ITSCWRKFLW3 ./tests/fixtures/ITSCWRKFLW3/*.yml

- name: run workflow
  steps:
  - script:  {{.cds.build.cdsctl}} workflow run ITSCWRKFLW3 ITSCWRKFLW3-WORKFLOW
    assertions:
    - result.code ShouldEqual 0
    - "result.systemout ShouldContainSubstring Workflow ITSCWRKFLW3-WORKFLOW #1 has been launched"

- name: run workflow
  steps:
  - script: sleep 1

- name: check workflow
  steps:
  - script:  {{.cds.build.cdsctl}} workflow status ITSCWRKFLW3 ITSCWRKFLW3-WORKFLOW 1 --format json
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.last_execution ShouldNotBeEmpty
    - result.systemoutjson.start ShouldNotBeEmpty
    - result.systemoutjson.payload ShouldBeEmpty
    - result.systemoutjson.num ShouldEqual 1
    - result.systemoutjson.status ShouldEqual 'Never Built'
    - result.systemoutjson.tags ShouldContainSubstring triggered_by

- name: run workflow with good branch
  steps:
  - script:  "{{.cds.build.cdsctl}} workflow run ITSCWRKFLW3 ITSCWRKFLW3-WORKFLOW -d '{\"git.branch\": \"master\"}'"
    assertions:
    - result.code ShouldEqual 0
    - "result.systemout ShouldContainSubstring Workflow ITSCWRKFLW3-WORKFLOW #2 has been launched"

- name: check workflow run with good branch
  steps:
  - script:  {{.cds.build.cdsctl}} workflow status ITSCWRKFLW3 ITSCWRKFLW3-WORKFLOW 2 --format json
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.status ShouldEqual Building
    - result.systemoutjson.payload ShouldContainSubstring master
    - result.systemoutjson.num ShouldContainSubstring 2
