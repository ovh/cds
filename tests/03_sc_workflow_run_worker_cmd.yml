name: Create a simple workflow (03SCWorkflowRunWorkerCmd) that use all  worker command and run it
version: "2"
testcases:
- name: assert filepath, your current directory must be at the root of this project
  steps:
  - script: '[ -f ./fixtures/03SCWorkflowRunWorkerCmd/pipeline.yml ]'
  - script: '[ -f ./fixtures/03SCWorkflowRunWorkerCmd/application.yml ]'
  - script: '[ -f ./fixtures/03SCWorkflowRunWorkerCmd/workflow.yml ]'

- name: prepare test
  steps:
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} project remove --force 03SCWORKFLOWRUNWORKERCMD"
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} group remove --force 03SCWorkflowRunWorkerCmd "
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} project add 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd"

- name: import pipeline and workflow
  steps:
  - script:  {{.cdsctl}} -f {{.cdsctl.config}} pipeline import --force 03SCWORKFLOWRUNWORKERCMD ./fixtures/03SCWorkflowRunWorkerCmd/pipeline.yml
  - script:  {{.cdsctl}} -f {{.cdsctl.config}} application import --force 03SCWORKFLOWRUNWORKERCMD ./fixtures/03SCWorkflowRunWorkerCmd/application.yml
  - script:  {{.cdsctl}} -f {{.cdsctl.config}} application variable add 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-APPLICATION password password mysuperpassword
  - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow import --force 03SCWORKFLOWRUNWORKERCMD ./fixtures/03SCWorkflowRunWorkerCmd/workflow.yml

- name: run workflow
  steps:
  - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow run 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-WORKFLOW
    assertions:
    - result.code ShouldEqual 0
    - "result.systemout ShouldContainSubstring Workflow 03SCWorkflowRunWorkerCmd-WORKFLOW #1 has been launched"

- name: check workflow
  steps:
  - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow status 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-WORKFLOW 1 --format json
    retry: 10
    delay: 10
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.last_execution ShouldNotBeEmpty
    - result.systemoutjson.start ShouldNotBeEmpty
    - result.systemoutjson.num ShouldContainSubstring 1
    - result.systemoutjson.status ShouldEqual Success
    - result.systemoutjson.tags ShouldContainSubstring triggered_by
    - result.systemoutjson.tags ShouldContainSubstring tag1
    - result.systemoutjson.tags ShouldContainSubstring tag2

- name: check result
  steps:
    - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow logs download 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-WORKFLOW 1 --pattern CHECKSECRET
    - script: grep "secret variable cds.app.password is used in file" *.log
    - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow logs download 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-WORKFLOW 1 --pattern TMPL
    - script: grep "this a a line in the file, with a CDS variable 1" *.log
    - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow logs download 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-WORKFLOW 1 --pattern KEY
    - script: grep "BEGIN RSA PRIVATE KEY" *.log
    - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow logs download 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-WORKFLOW 1 --pattern ARTIFACTLIST
    - script: grep "\"name\":\"myFileUploaded\"" *.log
    - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow logs download 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-WORKFLOW 1 --pattern DOWNLOAD
    - script: grep "Je suis un artifact" *.log
    - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow logs download 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-WORKFLOW 1 --pattern EXPORT
    - script: grep "Export value bar" *.log
    - script:  {{.cdsctl}} -f {{.cdsctl.config}} workflow logs download 03SCWORKFLOWRUNWORKERCMD 03SCWorkflowRunWorkerCmd-WORKFLOW 1 --pattern CACHEPULL
    - script: grep "cache push file content" *.log
