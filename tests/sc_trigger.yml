name: Trigger TestSuite
testcases:
- name: prepare test
  steps:
  - script: {{.cds.build.cds}} project remove --force ITSCTRIGGER
  - script: {{.cds.build.cds}} group remove ITSCTRIGGER --force
  - script: {{.cds.build.cds}} project add ITSCTRIGGER ITSCTRIGGER ITSCTRIGGER
  - script: {{.cds.build.cds}} application add ITSCTRIGGER TestApp

- name: trigger
  steps:
  - script: {{.cds.build.cds}} pipeline add ITSCTRIGGER build
  - script: {{.cds.build.cds}} application pipeline add ITSCTRIGGER TestApp build
  - script: {{.cds.build.cds}} pipeline run ITSCTRIGGER TestApp build
  - script: {{.cds.build.cds}} pipeline job add ITSCTRIGGER build myJob1
  - script: {{.cds.build.cds}} pipeline job append ITSCTRIGGER build myJob1 Script -p script="echo buildNumber={{.cds.buildNumber}} and v{{.cds.version}}"

  - script: {{.cds.build.cds}} env add ITSCTRIGGER foo
  - script: {{.cds.build.cds}} env variable add ITSCTRIGGER foo name foo string

  - script: {{.cds.build.cds}} env add ITSCTRIGGER bar
  - script: {{.cds.build.cds}} env variable add ITSCTRIGGER bar name bar string

  - script: {{.cds.build.cds}} pipeline add ITSCTRIGGER deploy --type=deployment
  - script: {{.cds.build.cds}} application pipeline add ITSCTRIGGER TestApp deploy
  - script: {{.cds.build.cds}} pipeline run ITSCTRIGGER TestApp deploy foo
  - script: {{.cds.build.cds}} pipeline run ITSCTRIGGER TestApp deploy foo
  - script: {{.cds.build.cds}} pipeline run ITSCTRIGGER TestApp deploy foo

  - script: {{.cds.build.cds}} pipeline job add ITSCTRIGGER deploy myJob1
  - script: {{.cds.build.cds}} pipeline job append ITSCTRIGGER deploy myJob1 Script -p script="echo buildNumber={{.cds.buildNumber}} and v{{.cds.version}} and env name is '{{.cds.env.name}}'"

  - script: {{.cds.build.cds}} pipeline add ITSCTRIGGER it --type=testing
  - script: {{.cds.build.cds}} application pipeline add ITSCTRIGGER TestApp it
  - script: {{.cds.build.cds}} pipeline run ITSCTRIGGER TestApp it bar
  - script: {{.cds.build.cds}} pipeline run ITSCTRIGGER TestApp it bar
  - script: {{.cds.build.cds}} pipeline run ITSCTRIGGER TestApp it bar
  - script: {{.cds.build.cds}} pipeline run ITSCTRIGGER TestApp it bar
  - script: {{.cds.build.cds}} pipeline job add ITSCTRIGGER it myJob1
  - script: {{.cds.build.cds}} pipeline job append ITSCTRIGGER it myJob1 Script -p script="echo buildNumber={{.cds.buildNumber}} and v{{.cds.version}} and env name is '{{.cds.env.name}}'"

  - script: {{.cds.build.cds}} trigger add ITSCTRIGGER/TestApp/build ITSCTRIGGER/TestApp/deploy/foo -p "tag=master{cds.buildNumber}" -p "foo=bar"
  - script: {{.cds.build.cds}} trigger add ITSCTRIGGER/TestApp/deploy/foo ITSCTRIGGER/TestApp/it/bar

- name: check triggers
  steps:
  - script: {{.cds.build.cds}} trigger list ITSCTRIGGER/TestApp/deploy/foo
  - script: {{.cds.build.cds}} trigger list ITSCTRIGGER/TestApp/deploy/foo
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring build
  - script: {{.cds.build.cds}} trigger list ITSCTRIGGER/TestApp/deploy/foo
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring it

- name: run chained pipelines
  steps:
  - script: {{.cds.build.cds}} pipeline run ITSCTRIGGER TestApp build

- name: expect .cds.buildnumber to be 2
  steps:
  - script: {{.cds.build.cds}} pipeline history ITSCTRIGGER TestApp build
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring 2
  - script: {{.cds.build.cds}} pipeline logs ITSCTRIGGER TestApp build

- name: expect .cds.version to be 2
  steps:
  - script: {{.cds.build.cds}} pipeline logs ITSCTRIGGER TestApp build
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring v2

- name: for testapp/build to trigger testapp/deploy...
  steps:
  - script: sleep 3

- name: expect .cds.buildnumber to be 4
  steps:
  - script: {{.cds.build.cds}} pipeline history ITSCTRIGGER TestApp deploy foo
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring 4
  - script: {{.cds.build.cds}} pipeline logs ITSCTRIGGER TestApp deploy foo

- name: expect .cds.version to be 2
  steps:
  - script: {{.cds.build.cds}} pipeline logs ITSCTRIGGER TestApp deploy foo
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring v2

- name: expect environment to be foo and variable .cds.env.name to be foo
  steps:
  - script: {{.cds.build.cds}} pipeline logs ITSCTRIGGER TestApp deploy foo
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring foo

- name: for testapp/deploy trigger testapp/it
  steps:
  - script: sleep 3

- name: expect .cds.buildnumber to be 5
  steps:
  - script: {{.cds.build.cds}} pipeline history ITSCTRIGGER TestApp it bar
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring 5
  - script: {{.cds.build.cds}} pipeline logs ITSCTRIGGER TestApp it bar

- name: expect .cds.version to be 2
  steps:
  - script: {{.cds.build.cds}} pipeline logs ITSCTRIGGER TestApp it bar
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring v2

- name: expect environment to be bar and variable .cds.env.name to be bar
  steps:
  - script: {{.cds.build.cds}} pipeline logs ITSCTRIGGER TestApp it bar
    assertions:
      - result.code ShouldEqual 0
      - result.systemout ShouldContainSubstring bar

- name: delete trigger
  steps:
  - script: {{.cds.build.cds}} trigger delete ITSCTRIGGER/TestApp/deploy/foo ITSCTRIGGER/TestApp/it/bar

- name: cleanup
  steps:
  - script: {{.cds.build.cds}} project remove --force ITSCTRIGGER
  - script: {{.cds.build.cds}} group remove ITSCTRIGGER
