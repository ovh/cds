executor: v2_install_gpg_key
input:
  gpg_key_id: ""
  git_host: ""
  git_user: ""
  git_password: ""

steps:
  # Export the gpg public key in armor format and save it in a variable
  - script: gpg --export --armor {{.input.gpg_key_id}}
    vars:
      gpgPubKey:
        from: result.systemout

  # Write this variable to a file
  - script: |-
      /bin/bash -c cat <<- EOF > /tmp/{{.input.gpg_key_id}}.gpg.pub
      {{.gpgPubKey}}
      EOF

  # Base64 encode this in a file
  - script: |-
      /bin/bash -c cat <<- EOF > /tmp/{{.input.gpg_key_id}}.gpg.pub.b64
      {{.gpgPubKey | quote | b64enc}}
      EOF

  - script: base64 -d /tmp/{{.input.gpg_key_id}}.gpg.pub.b64 > /tmp/{{.input.gpg_key_id}}.gpg.pub.quoted

  - script: cat /tmp/{{.input.gpg_key_id}}.gpg.pub.quoted

  # Prepare the json payload from the base64 encoded public key
  - script: |-
      /bin/bash -c cat <<- EOF > /tmp/{{.input.gpg_key_id}}.gpg.pub.json
      {
        "armored_public_key" : $(cat /tmp/{{.input.gpg_key_id}}.gpg.pub.quoted)
      }
      EOF
      cat /tmp/{{.input.gpg_key_id}}.gpg.pub.json

  # Get exiting gpg key for users
  - type: http
    method: GET
    url: "{{.input.git_host}}/api/v1/user/gpg_keys"
    headers:
      Content-Type: application/json
    basic_auth_user: "{{.input.git_user}}"
    basic_auth_password: "{{.input.git_password}}"
    assertions:
    - result.statuscode ShouldEqual 200
    vars:
      keys:
        from: result.bodyjson

  # Delete them all
  - range: "{{.keys}}"
    type: http
    method: DELETE
    url: "{{.input.git_host}}/api/v1/user/gpg_keys/{{.value.id}}"
    basic_auth_user: "{{.input.git_user}}"
    basic_auth_password: "{{.input.git_password}}"
    assertions:
    - result.statuscode ShouldEqual 204

  # Upload the key
  - type: http
    method: POST
    url: "{{.input.git_host}}/api/v1/user/gpg_keys"
    bodyFile: "/tmp/{{.input.gpg_key_id}}.gpg.pub.json"
    headers:
      Content-Type: "application/json"
    basic_auth_user: "{{.input.git_user}}"
    basic_auth_password: "{{.input.git_password}}"
    assertions:
    - result.statuscode ShouldEqual 201

output: {}
