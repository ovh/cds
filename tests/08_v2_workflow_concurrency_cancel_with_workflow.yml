name: Workflow cancelled from workflow
vars:
  cds_project: "ITV2WORKFLOWCONCURRENCYCANCELWITHWORKFLOW"
  git_repo: "it_v2_workflow_concurrency_cancel_with_workflow"
  cds_workflow: "WorkflowConcurrency"
testcases:
- name: Prepare test
  steps:
    - name: "Verify cdsctl configuration"
      script: "{{.cdsctl}} -f {{.cdsctl.config}} user me --format json"
      vars:
        cdsUser:
          from: result.systemoutjson.username
    - name: "Display username"
      info: "Connected CDS user is {{.cdsUser}}"

    - type: v2_install_gpg_key
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      gpg_key_id: "{{.gpg.key_id}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      vars:
        emailaddress:
          from: result.emailaddress

    - type: v2_create_project
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      cds_region: "{{.cds.region}}"
      git_emailAddress: "{{.emailaddress}}"

    - type: v2_add_git_repo
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      cds_hook_url: "{{.gitea.hook.url}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      git_repo: "{{.git_repo}}"

- name: Create concurrency on project
  steps:
    - name: Create concurrency
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project concurrency add {{.cds_project}} concu \"This is a concurrency rule\" --pool 1 --cancel-in-progress"
    - name: List concurrency rule
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project concurrency list {{.cds_project}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 1
        - result.systemoutjson.systemoutjson0.name ShouldEqual "concu"
    - name: Get concurrency rule
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project concurrency show {{.cds_project}} concu --format json"
      assertions:
        - result.systemoutjson.name ShouldEqual "concu"

- name: Push workflow file
  steps:
    - type: v2_push_cds_files_on_repo
      git_repo: "{{.git_repo}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_email: "{{.Prepare-test.emailaddress}}"
      git_password: "{{.git.password}}"
      gpg_key_id: "{{.gpg.key_id}}"
      files:
        worker-models/debian.yml:
          name: docker-debian
          osarch: linux/amd64
          type: docker
          spec:
            image: buildpack-deps:bookworm
        workflows/workflow1.yaml:
          name: {{.cds_workflow}}
          concurrency: "concu"
          jobs:
            job1:
              runs-on: {{.cds_project}}/my_vcs_server/{{.git.user}}/{{.git_repo}}/docker-debian
              steps:
                - run: sleep 30
    - name: Check CDS project analyses status
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis list {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 2
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Skipped"
        - result.systemoutjson.systemoutjson1.status ShouldEqual "Success"
      retry: 100
      delay: 1

    - name: Run the first workflow
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow run {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} {{.cds_workflow}}"

    - name: Check that the CDS workflow has at least one execution and is Building
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} {{.cds_workflow}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 1
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Building"
      retry: 20
      delay: 1
      vars:
        workflowRunID:
          from: result.systemoutjson.systemoutjson0.id
    
    - name: Run a 2nd time the workflow
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow run {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} {{.cds_workflow}}"
    
    - name: Check that the first one is cancelled
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} {{.cds_workflow}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 2
        - result.systemoutjson.systemoutjson1.status ShouldEqual "Cancelled"
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Building"
      retry: 20
      delay: 1

    - name: Wait all success
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} {{.cds_workflow}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 2
        - result.systemoutjson.systemoutjson1.status ShouldEqual "Cancelled"
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Success"
      retry: 100
      delay: 1
