name: Hook workflow run
vars:
  cds_project: "ITV2HOOKWORKFLOWRUNDISTANT"
  git_repo_from: "it_v2_hook_workflow_run_distant_from"
  git_repo_to: "it_v2_hook_workflow_run_distant_to"
  git_repo_tocheckout: "it_v2_hook_workflow_run_distant_to_checkout"
  cds_workflow_from: "WorkflowFrom"
  cds_workflow_to: "WorkflowTo"
  worker_model_from: "{{.cds_project}}/my_vcs_server/{{.git.user}}/{{.git_repo_from}}/docker-debian"
  worker_model_to: "{{.cds_project}}/my_vcs_server/{{.git.user}}/{{.git_repo_to}}/docker-debian"
testcases:
- name: Prepare test
  steps:
    - name: "Verify cdsctl configuration"
      script: "{{.cdsctl}} -f {{.cdsctl.config}} user me --format json"
      vars:
        cdsUser:
          from: result.systemoutjson.username
    - name: "Display username"
      info: "Connected CDS user is {{.cdsUser}}"
    - type: v2_create_project
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      cds_region: "{{.cds.region}}"

    - type: v2_add_git_repo
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      cds_hook_url: "{{.gitea.hook.url}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      git_repo: "{{.git_repo_from}}"

    - type: v2_add_git_repo
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      cds_hook_url: "{{.gitea.hook.url}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      git_repo: "{{.git_repo_to}}"  

    - type: v2_add_git_repo
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      cds_hook_url: "{{.gitea.hook.url}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      git_repo: "{{.git_repo_tocheckout}}"  

    - type: v2_install_gpg_key
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      gpg_key_id: "{{.gpg.key_id}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      vars:
        emailaddress:
          from: result.emailaddress

- name: PushFilesOnRepoToCheckout
  steps:
    - type: v2_push_non_cds_files_on_repo
      git_repo: "{{.git_repo_tocheckout}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_email: "{{.Prepare-test.emailaddress}}"
      git_password: "{{.git.password}}"
      gpg_key_id: "{{.gpg.key_id}}"
      files:
        README.md: |
          Hello
    - name: Save repo_to commit
      script: cd /tmp/repos/{{.git_repo_tocheckout}} && git rev-parse HEAD
      vars:
        commitToCheckout:
          from: result.systemout

- name: PushWorkflowWithHook
  steps:
    - type: v2_push_cds_files_on_repo
      git_repo: "{{.git_repo_to}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_email: "{{.Prepare-test.emailaddress}}"
      git_password: "{{.git.password}}"
      gpg_key_id: "{{.gpg.key_id}}"
      files:
        worker-models/debian.yml:
          name: docker-debian
          osarch: linux/amd64
          type: docker
          spec:
            image: buildpack-deps:buster
        workflows/to.yaml:
          name: {{.cds_workflow_to}}
          on:
            workflow-run:
            - workflow: "{{.git.user}}/{{.git_repo_from}}/{{.cds_workflow_from}}"
              status: [Success]
              branches: [master,main]
          repository:
            name: "{{.git.user}}/{{.git_repo_tocheckout}}"
            vcs: my_vcs_server
          jobs:
            init:
              runs-on: {{.worker_model_to}}
              steps:
                - run: env
    - name: Save repo_to commit
      script: cd /tmp/repos/{{.git_repo_to}} && git rev-parse HEAD
      vars:
        commitTo:
          from: result.systemout 

- name: Check analysis repo_to
  steps:
    - name: Check CDS project analyses status
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis list {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo_to}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 2
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Skipped"
        - result.systemoutjson.systemoutjson1.status ShouldEqual "Success"
      retry: 100
      delay: 1    

    - name: Check that the CDS workflow has 0 execution and is Success
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo_to}} {{.cds_workflow_to}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 0
        
- name: PushFromWorkflow
  steps:
    - type: v2_push_cds_files_on_repo
      git_repo: "{{.git_repo_from}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_email: "{{.Prepare-test.emailaddress}}"
      git_password: "{{.git.password}}"
      gpg_key_id: "{{.gpg.key_id}}"
      files:
        worker-models/debian.yml:
          name: docker-debian
          osarch: linux/amd64
          type: docker
          spec:
            image: buildpack-deps:buster
        workflows/from.yaml:
          name: {{.cds_workflow_from}}
          on: [push]
          repository:
            name: "{{.git.user}}/{{.git_repo_from}}"
            vcs: my_vcs_server
          jobs:
            init:
              runs-on: {{.worker_model_from}}
              steps:
                - run: echo Hello      

- name: WorkflowFromExecution
  steps:
    - name: Check CDS project analyses status
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis list {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo_from}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 2
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Skipped"
        - result.systemoutjson.systemoutjson1.status ShouldEqual "Success"
      retry: 100
      delay: 1

    - name: Check that the CDS workflow fro has at least one execution and is Success
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo_from}} {{.cds_workflow_from}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 1
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Success"
      retry: 150
      delay: 1

- name: WorkflowToExecution
  steps:
    - name: Check that the CDS workflow to has at least one execution
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo_to}} {{.cds_workflow_to}} --format json"
      assertions:
        - and:
          - result.systemoutjson ShouldHaveLength 1
          - or:
            - result.systemoutjson.systemoutjson0.status ShouldEqual "Success"
            - result.systemoutjson.systemoutjson0.status ShouldEqual "Fail"
      retry: 150
      delay: 1
      vars:
        workflowRunStatus:
          from: result.systemoutjson.systemoutjson0.status 
        workflowRunID:
          from: result.systemoutjson.systemoutjson0.id    

    - name: Display run info
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow info {{.cds_project}} {{.workflowRunID}}"

    - name: Display job info
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow jobs status {{.cds_project}} {{.workflowRunID}}"

    - name: Download and check logs
      script: |-
        #!/bin/bash
        set -e
        FILE=/tmp/logs3
        mkdir -p $FILE && cd $FILE
        {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow logs download {{.cds_project}} {{.workflowRunID}}
        echo "Display logs"
        cat {{.cds_workflow_to}}* 
        echo "Check logs"
        # Check git_sha
        cat {{.cds_workflow_to}}* | grep "GIT_SHA={{.PushFilesOnRepoToCheckout.commitToCheckout}}"
        cat {{.cds_workflow_to}}* | grep "GIT_REPOSITORY={{.git.user}}/{{.git_repo_tocheckout}}"
        cat {{.cds_workflow_to}}* | grep "CDS_WORKFLOW_REPOSITORY={{.git.user}}/{{.git_repo_to}}"
      retry: 60
      delay: 1