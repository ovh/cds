name: Manual run fork
vars:
  cds_project: "ITV2MANUALFORK"
  git_repo: "it_v2_manual_fork"
  cds_workflow: "WorkflowManualFORK"
  worker_model: "{{.cds_project}}/my_vcs_server/{{.git.user}}/{{.git_repo}}/docker-debian"

testcases:
- name: Prepare test
  steps:
    - name: "Verify cdsctl configuration"
      script: "{{.cdsctl}} -f {{.cdsctl.config}} user me --format json"
      vars:
        cdsUser:
          from: result.systemoutjson.username
    - name: "Display username"
      info: "Connected CDS user is {{.cdsUser}}"
    - type: v2_install_gpg_key
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      gpg_key_id: "{{.gpg.key_id}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      vars:
        emailaddress:
          from: result.emailaddress

    - type: v2_create_project
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      cds_region: "{{.cds.region}}"
      git_emailAddress: "{{.emailaddress}}"

    - type: v2_add_git_repo
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      cds_hook_url: "{{.gitea.hook.url}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      git_repo: "{{.git_repo}}"

    - name: Delete previous fork
      script: "curl -X DELETE {{.git.host}}/api/v1/repos/{{.git.user.fork}}/{{.git_repo}} -u \"{{.git.user.fork}}:{{.git.password}}\""
    - name: Fork repository
      script: "curl --fail -X POST {{.git.host}}/api/v1/repos/{{.git.user}}/{{.git_repo}}/forks --data '{\"name\": \"{{.git_repo}}\"}' -u \"{{.git.user.fork}}:{{.git.password}}\""

- name: Push workflow file
  steps:
    - type: v2_push_cds_files_on_repo
      git_repo: "{{.git_repo}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_email: "{{.Prepare-test.emailaddress}}"
      git_password: "{{.git.password}}"
      gpg_key_id: "{{.gpg.key_id}}"
      files:
        worker-models/debian.yml:
          name: docker-debian
          osarch: linux/amd64
          type: docker
          spec:
            image: buildpack-deps:buster
        workflows/checkout.yaml:
          name: {{.cds_workflow}}
          jobs:
            init:
              runs-on: "{{.worker_model}}"
              steps:
                - id: checkout
                  uses: actions/checkout
                - id: gitvariables
                  run: |-
                    #!/bin/bash -x
                    env | grep GIT

    - name: Check CDS project analyses status
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis list {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 2
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Skipped"
        - result.systemoutjson.systemoutjson1.status ShouldEqual "Success"
      retry: 120
      delay: 1

- name: Run Fork
  steps:
    - name: Manual run 
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow run {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} {{.cds_workflow}} --fork {{.git.user.fork}}/{{.git_repo}}"
    - name: Check CDS project analyses status 
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis list {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 3
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Skipped" 
        - result.systemoutjson.systemoutjson1.status ShouldEqual "Success" 
        - result.systemoutjson.systemoutjson2.status ShouldEqual "Success" 
      retry: 120
      delay: 1
    - name: Check that the CDS workflow has been executed
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} {{.cds_workflow}} --format json"
      assertions:
        - and:
          - result.systemoutjson ShouldHaveLength 1
          - result.systemoutjson.systemoutjson0.status ShouldEqual "Success"
      retry: 150
      delay: 1 
      vars:
        workflowRunID:
          from: result.systemoutjson.systemoutjson0.id
    - name: Download and check logs
      script: |-
        #!/bin/bash
        set -e
        FILE=/tmp/`uuidgen`
        mkdir -p $FILE && cd $FILE
        {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow logs download {{.cds_project}} {{.workflowRunID}}
        # Check log content
        cat {{.cds_workflow}}-1-1-init-gitvariables | grep "GIT_REPOSITORY={{.git.user.fork}}/{{.git_repo}}"
      retry: 60
      delay: 1

            