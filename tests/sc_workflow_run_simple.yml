name: Create a simple workflow (ITSCWRKFLW2) and run it
testcases:
- name: assert filepath, your current directory must be at the root of this project
  steps:
  - script: '[ -f ./tests/fixtures/ITSCWRKFLW2/pipeline.yml ]'
  - script: '[ -f ./tests/fixtures/ITSCWRKFLW2/workflow.yml ]'

- name: prepare test
  steps:
  - script: "{{.cds.build.cdsctl}} project remove --force ITSCWRKFLW2"
  - script: "{{.cds.build.cdsctl}} group remove --force ITSCWRKFLW2 "
  - script: "{{.cds.build.cdsctl}} project add ITSCWRKFLW2 ITSCWRKFLW2"
  - script: "{{.cds.build.cdsctl}} application add ITSCWRKFLW2 ITSCWRKFLW2-APPLICATION"

- name: import pipeline
  steps:
  - script: {{.cds.build.cdsctl}} pipeline import --force ITSCWRKFLW2 ./tests/fixtures/ITSCWRKFLW2/pipeline.yml

- name: import workflow
  steps:
  - script:  {{.cds.build.cdsctl}} workflow import --force ITSCWRKFLW2 ./tests/fixtures/ITSCWRKFLW2/workflow.yml

- name: run workflow
  steps:
  - script:  {{.cds.build.cdsctl}} workflow run ITSCWRKFLW2 ITSCWRKFLW2-WORKFLOW
  assertions:
      - result.code ShouldEqual 0
      - "result.systemout ShouldContain Workflow ITSCWRKFLW2-WORKFLOW #1 has been lauched"

- name: check workflow
  steps:
  - script:  {{.cds.build.cdsctl}} workflow show ITSCWRKFLW2 ITSCWRKFLW2-WORKFLOW 1 --format json
  assertions:
      - result.code ShouldEqual 0
        result.systemout.last_execution ShouldNotBeEmpty
        result.systemout.start ShouldNotBeEmpty
        result.systemout.payload ShouldBeEmpty
        result.systemout.num ShouldEqual 1
        result.systemout.status ShouldEqual Building
        result.systemout.tags ShouldContains triggered_by
        
