name: Cache
vars:
  cds_project: "ITV2CACHE"
  git_repo: "it_v2_cache"
  cds_workflow: "WorkflowCache"
testcases:
- name: Prepare test
  steps:
    - name: "Verify cdsctl configuration"
      script: "{{.cdsctl}} -f {{.cdsctl.config}} user me --format json"
      vars:
        cdsUser:
          from: result.systemoutjson.username
    - name: "Display username"
      info: "Connected CDS user is {{.cdsUser}}"
    - type: v2_create_project
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      cds_region: "{{.cds.region}}"

    - type: v2_add_git_repo
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      cds_project: "{{.cds_project}}"
      cds_hook_url: "{{.gitea.hook.url}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      git_repo: "{{.git_repo}}"

    - type: v2_install_gpg_key
      cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
      gpg_key_id: "{{.gpg.key_id}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_password: "{{.git.password}}"
      vars:
        emailaddress:
          from: result.emailaddress

- name: Push workflow file
  steps:
    - type: v2_push_cds_files_on_repo
      git_repo: "{{.git_repo}}"
      git_host: "{{.git.host}}"
      git_user: "{{.git.user}}"
      git_email: "{{.Prepare-test.emailaddress}}"
      git_password: "{{.git.password}}"
      gpg_key_id: "{{.gpg.key_id}}"
      files:
        worker-models/debian.yml:
          name: docker-debian
          osarch: linux/amd64
          type: docker
          spec:
            image: buildpack-deps:buster
        workflows/sub-action.yaml:
          name: {{.cds_workflow}}
          on: [push]
          jobs:
            init:
              runs-on: .cds/worker-models/debian.yml
              steps:
                - id: cacheGet
                  uses: actions/cache
                  with:
                    key: mycache
                    download-path: ${{ cds.workspace }}
                    content: myfile
                - id: cacheCheck
                  run: echo ${{ steps.cacheGet.outputs.cache-hit }}    
                - run: date > myfile
            getCache:
              runs-on: .cds/worker-models/debian.yml  
              needs: [init]
              steps:
                - uses: actions/cacheRestore
                  id: restore
                  with:
                    key: mycache
                    path: myfile 
                - id: checkHit
                  run: echo ${{ steps.restore.outputs.cache-hit }}        

    - name: Check CDS project analyses status
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis list {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} --format json"
      assertions:
        - result.systemoutjson ShouldHaveLength 2
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Skipped"
        - result.systemoutjson.systemoutjson1.status ShouldEqual "Success"
      retry: 100
      delay: 1

    - name: Check that the CDS workflow has at least one execution and is Success
      script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} {{.cds_workflow}} --format json"
      assertions:
        - and: 
          - result.systemoutjson ShouldHaveLength 1
          - or:
            - result.systemoutjson.systemoutjson0.status ShouldEqual Success
            - result.systemoutjson.systemoutjson0.status ShouldEqual Fail
      retry: 100
      delay: 1
      vars:
        workflowRunID:
          from: result.systemoutjson.systemoutjson0.id
        workflowRunStatus:  
          from: result.systemoutjson.systemoutjson0.status  

    - name: Get run info
      script:  "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow info {{.cds_project}} {{.workflowRunID}}"     

    - name: Get job info
      script:  "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow jobs status {{.cds_project}} {{.workflowRunID}}"     
        
    - name: Download and check logs
      script: |-
        #!/bin/bash
        set -e
        FILE=/tmp/`uuidgen`
        mkdir -p $FILE && cd $FILE
        {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow logs download {{.cds_project}} {{.workflowRunID}}
        ls -l
        cat {{.cds_workflow}}-1-1-init-cacheGet
        cat {{.cds_workflow}}-1-1-init-cacheCheck
        cat {{.cds_workflow}}-1-1-init-Post-cacheGet
        cat {{.cds_workflow}}-1-1-getCache-restore
        cat {{.cds_workflow}}-1-1-getCache-checkHit
        # Check log cache check
        cat {{.cds_workflow}}-1-1-init-cacheCheck | grep "false"
        # Check log cache upload
        cat {{.cds_workflow}}-1-1-init-Post-cacheGet | grep "Cache uploaded"
        # Check log restore cache
        cat {{.cds_workflow}}-1-1-getCache-restore | grep "Cache was downloaded"
        # Check cache hit
        cat {{.cds_workflow}}-1-1-getCache-checkHit | grep "true"
      retry: 60
      delay: 1
    
    - name: Echo Status
      script: echo {{.workflowRunStatus}}
      assertions:
      - result.systemout ShouldEqual Success