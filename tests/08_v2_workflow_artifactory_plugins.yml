name: Python / Debian / Helm push
vars:
  cds_project: "ITV2ARTIFACTORYPLUGINS"
  cds_workflow: "WorkflowA"
  git_repo: "it_v2_rt_plugins"
  worker_model: "{{.cds_project}}/my_vcs_server/{{.git.user}}/{{.git_repo}}/docker-debian"
  rt_url: "rt_url"
  rt_token: "rt_token"
  rt_token_name: "rt_tokenName"
  rt_distribution_url: "rt_distribution_url"
  rt_project: "rt_project"
  rt_component: "rt_component"
  rt_project_key: "rt_project_key"

testcases:
- name: Prepare test
  steps:
  - name: "Verify cdsctl configuration"
    script: "{{.cdsctl}} -f {{.cdsctl.config}} user me --format json"
    vars:
      cdsUser:
        from: result.systemoutjson.username

  - name: "Display username"
    info: "Connected CDS user is {{.cdsUser}}"

  - type: v2_create_project
    cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
    cds_project: "{{.cds_project}}"
    git_host: "{{.git.host}}"
    git_user: "{{.git.user}}"
    git_password: "{{.git.password}}"
    cds_region: "{{.cds.region}}"

  - type: v2_add_git_repo
    cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
    cds_project: "{{.cds_project}}"
    cds_hook_url: "{{.gitea.hook.url}}"
    git_host: "{{.git.host}}"
    git_user: "{{.git.user}}"
    git_password: "{{.git.password}}"
    git_repo: "{{.git_repo}}"

  - type: v2_install_gpg_key
    cdsctl_command: "{{.cdsctl}} -f {{.cdsctl.config}}"
    gpg_key_id: "{{.gpg.key_id}}"
    git_host: "{{.git.host}}"
    git_user: "{{.git.user}}"
    git_password: "{{.git.password}}"
    vars:
      emailaddress:
        from: result.emailaddress

  - name: Prepare integration for project
    script: |-
      /bin/bash -c cat <<- EOF > /tmp/artifactory.yaml
      name: artifactory-{{.rt_project}}
      model:
        name: Artifactory
      config:
        build.info.prefix:
          value: {{.rt_project}}/{{.rt_component}}
          type: string
        cds.repository:
          value: {{.rt_project}}-{{.rt_component}}-cds
          type: string
        distribution.url:
          value: {{.rt_distribution_url}}
          type: string
        platform:
          value: artifactory
          type: string
        project.key:
          value: {{.rt_project_key}}
          type: string
        promotion.maturity.high:
          value: release
          type: string
        promotion.maturity.low:
          value: snapshot
          type: string
        release.token:
          value: ""
          type: password
        repo.prefix:
          value: {{.rt_project}}-{{.rt_component}}
          type: string
        token:
          value: {{.rt_token}}
          type: password
        token.name:
          value: {{.rt_token_name}}
          type: string
        url:
          value: {{.rt_url}}
          type: string
      EOF

  - name: Import integration for project
    script: "{{.cdsctl}} -f {{.cdsctl.config}} project integration import {{.cds_project}} /tmp/artifactory.yaml"

  - name: Assert integration is imported on project
    script: '{{.cdsctl}} -f {{.cdsctl.config}} project integration list {{.cds_project}}'
    assertions:
    - result.systemout ShouldContainSubstring artifactory-{{.rt_project}}

- name: Push workflow file
  steps:
  - type: v2_push_non_cds_files_on_repo
    git_repo: "{{.git_repo}}"
    git_host: "{{.git.host}}"
    git_user: "{{.git.user}}"
    git_email: "{{.Prepare-test.emailaddress}}"
    git_password: "{{.git.password}}"
    gpg_key_id: "{{.gpg.key_id}}"
    files:
      quicksample/src/quicksample.py: |
        def quicktext():\n  print('Hello, welcome to QuickSample package.')
      README.md: |
        Hello
      setup.py: |
        import setuptools
        setuptools.setup(
          name=\"quicksample\",
          version=\"0.0.1\",
          author=\"sgu\",
          description=\"Quicksample Test Package\",
          long_description=\"coucou\",
          long_description_content_type=\"text/markdown\",
          packages=setuptools.find_packages(),
          python_requires=\">=3.6\",
          py_modules=[\"quicksample\"],
          package_dir={\"\":\"quicksample/src\"},
          install_requires=[]
        )
      chart/Chart.yaml:
        apiVersion: v2
        name: mychart
        description: A Helm chart for Kubernetes
        type: application
        version: "0.1.0"
        appVersion: "1.16.0"
      chart/templates/deployment.yaml:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: coucou
        spec:
          selector:
            matchLabels:
              helm.sh/chart: toto
      chart/values.yaml:
        replicaCount: 1
        image:
          repository: nginx
          pullPolicy: IfNotPresent
  - type: v2_push_cds_files_on_repo
    git_repo: "{{.git_repo}}"
    git_host: "{{.git.host}}"
    git_user: "{{.git.user}}"
    git_email: "{{.Prepare-test.emailaddress}}"
    git_password: "{{.git.password}}"
    gpg_key_id: "{{.gpg.key_id}}"
    files:
      worker-models/debian.yaml:
        name: docker-debian
        description: my debian worker model
        osarch: linux/amd64
        type: docker
        spec:
          image: buildpack-deps:buster
      workflows/workflowA.yaml:
        name: {{.cds_workflow}}
        on: [push]
        integrations: [artifactory-{{.rt_project}}]
        jobs:
          Debian-Job:
            runs-on: "{{.worker_model}}"
            steps:
              - uses: actions/checkout
              - run: apt-get update -y && apt-get install -y python3-pip python3-stdeb fakeroot python3-setuptools
              - run: |
                  pip3 install stem stdeb
                  pkgVersion=0.0.$(date +%s)
                  sed -i "s/0.0.1/${pkgVersion}/g" setup.py
              - run: python3 setup.py --command-packages=stdeb.command bdist_deb
              - uses: actions/debianPush
                with:
                  files: deb_dist/*.deb
          Helm-Job:
            runs-on: "{{.worker_model}}"
            steps:
              - uses: actions/checkout
              - uses: actions/helmPush
          Python-Job:
            runs-on: "{{.worker_model}}"
            steps:
              - uses: actions/checkout
              - run: apt-get update -y && apt-get install -y python3-pip python3-setuptools
              - id: packagePython
                run: |
                  pkgVersion=0.0.$(date +%s)
                  worker export pkgVersion ${pkgVersion}
                  python3 -m pip install --user --upgrade setuptools wheel && sed -i "s/0.0.1/${pkgVersion}/g" setup.py
              - uses: actions/pythonPush
                with:
                  pythonBinary: python3
                  package: quicksample
                  version: ${{ steps.packagePython.outputs.pkgVersion }}
                  wheel: "true"
          PromoteAndRelease:
            needs: [Debian-Job, Python-Job, Helm-Job]
            runs-on: "{{.worker_model}}"
            steps:
              - uses: actions/artifactoryPromote
                with:
                  artifacts: python:* helm:* debian:*
              - uses: actions/artifactoryRelease
                with:
                  artifacts: python:* helm:* debian:*
  - name: Check CDS project analyses
    script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis list {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} --format json"
    assertions:
    - result.systemoutjson ShouldHaveLength 3
    retry: 20
    delay: 2
    vars:
      analysisID:
        from:
          result.systemoutjson.systemoutjson2.id

  - name: Get CDS project analysis
    script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis show {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} {{.analysisID}}"
    assertions:
    - 'result.systemout ShouldContainSubstring "status: Success"'
    retry: 20
    delay: 2

  - name: Get hook event status
    script: "{{.cdsctl}} -f {{.cdsctl.config}} admin hook repository event list my_vcs_server {{.git.user}}/{{.git_repo}} --format json"
    vars:
      events:
        from: result.systemoutjson

  - name: Check all hook events status
    range: "{{.events}}"
    script: "{{.cdsctl}} -f {{.cdsctl.config}} admin hook repository event show my_vcs_server {{.git.user}}/{{.git_repo}} {{.value.uuid}} --format json"
    info: "hook event {{.value.uuid}} ({{.value.created}} - {{.result.systemoutjson.last_error}}) status is {{.result.systemoutjson.status}}"
    assertions:
    - result.systemoutjson.status ShouldEqual Done
    retry: 30
    delay: 5

  - name: Check that the CDS workflow has at least one execution and is Success
    script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history {{.cds_project}} my_vcs_server {{.git.user}}/{{.git_repo}} WorkflowA --format json"
    assertions:
      - and: 
        - result.systemoutjson ShouldHaveLength 1
        - or:
          - result.systemoutjson.systemoutjson0.status ShouldEqual Success
          - result.systemoutjson.systemoutjson0.status ShouldEqual Fail
    retry: 120
    delay: 5
    vars:
      workflowRunID:
        from: result.systemoutjson.systemoutjson0.id
      workflowRunStatus:  
        from: result.systemoutjson.systemoutjson0.status

  - name: List all run results
    script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow result list {{.cds_project}} {{.workflowRunID}}"      

  - name: Download logs
    script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow logs download {{.cds_project}} {{.workflowRunID}}"    

  - name: Get run info
    script:  "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow info {{.cds_project}} {{.workflowRunID}}"     

  - name: Get job info
    script:  "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow jobs status {{.cds_project}} {{.workflowRunID}}"       

  - name: Display logs
    script: cat {{.cds_workflow}}-*

  - name: Echo Status
    script: echo {{.workflowRunStatus}}
    assertions:
    - result.systemout ShouldEqual Success

  - name: Check that we have 2 run results of type python
    script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow result list {{.cds_project}} {{.workflowRunID}} --filter type=python --format json"  
    assertions:
      - result.systemoutjson ShouldHaveLength 2
  - name: Check that we have 1 run result of type debian
    script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow result list {{.cds_project}} {{.workflowRunID}} --filter type=debian --format json"  
    assertions:
      - result.systemoutjson ShouldHaveLength 1
  - name: Check that we have 1 run result of type helm
    script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow result list {{.cds_project}} {{.workflowRunID}} --filter type=helm --format json"  
    assertions:
      - result.systemoutjson ShouldHaveLength 1
  - name: Check that we have 1 run result of type release
    script: "{{.cdsctl}} -f {{.cdsctl.config}} experimental workflow result list {{.cds_project}} {{.workflowRunID}} --filter type=release --format json"  
    assertions:
      - result.systemoutjson ShouldHaveLength 1       