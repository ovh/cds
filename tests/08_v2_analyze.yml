name: Project Analyze testSuite
testcases:
- name: prepare test
  steps:
  - script: gpg --batch --yes --delete-secret-key 2B74B3591CEFB2F534265465E027B500E97E52E7 || true
  - script: gpg --batch --yes --delete-key 2B74B3591CEFB2F534265465E027B500E97E52E7 || true
  - script: curl -X DELETE "{{.git.host}}/api/v1/repos/{{.git.user}}/myrepo" -u "{{.git.user}}:{{.git.password}}"
  - script: {{.cdsctl}} -f {{.cdsctl.config}} project remove --force ITCLIPRJVCS
  - script: {{.cdsctl}} -f {{.cdsctl.config}} group remove ITCLIPRJVCS --force
  - script: {{.cdsctl}} -f {{.cdsctl.config}} group add ITCLIPRJVCS
  - script: {{.cdsctl}} -f {{.cdsctl.config}} project create ITCLIPRJVCS "Test Project" ITCLIPRJVCS
  - script: 'curl --fail -X POST "{{.git.host}}/api/v1/user/repos" -u "{{.git.user}}:{{.git.password}}" -d "{\"name\": \"myrepo\", \"auto_init\": true, \"default_branch\": \"master\"}" -H "Content-Type: application/json"'
  - script: gpg --import ./fixtures/gpg-ADMIN/key.priv
  - script: gpg --import ./fixtures/gpg-ADMIN/key.pub
  - script: 'curl -X POST {{.git.host}}/api/v1/user/gpg_keys -u "{{.git.user}}:{{.git.password}}" -H "Content-type: application/json" -d @./fixtures/gpg-ADMIN/key.pub.json'
  - script: {{.cdsctl}} -f {{.cdsctl.config}} project keys list ITCLIPRJVCS --format json
    vars:
      sshKeyPub:
        from: result.systemoutjson.systemoutjson0.publickey
  - script: 'curl -X POST {{.git.host}}/api/v1/user/keys -u "{{.git.user}}:{{.git.password}}" -H "Content-type: application/json" -d "{\"key\": \"{{.sshKeyPub}}\", \"read_only\": true, \"title\": \"mykey\"}"'
  - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental rbac import ./fixtures/rbac/rbac_admin.yml --force

- name: commitStep
  steps:
    - script: rm -Rf /tmp/myrepo && git clone "http://{{.git.user}}:{{.git.password}}@localhost:3000/{{.git.user}}/myrepo.git" /tmp/myrepo
    - script: mkdir -p /tmp/myrepo/.cds/worker-models
    - script: cat ./fixtures/worker-model/docker-debian9.yml > /tmp/myrepo/.cds/worker-models/docker-debian9.yml
    - script: mkdir -p /tmp/myrepo/.cds/actions
    - script: cat ./fixtures/ITCLIPRJVCS/my-parent-action.yml > /tmp/myrepo/.cds/actions/my-parent-action.yml
    - script: cat ./fixtures/ITCLIPRJVCS/my-child-action.yml > /tmp/myrepo/.cds/actions/my-child-action.yml
    - script: mkdir -p /tmp/myrepo/.cds/workflows
    - script: cat ./fixtures/ITCLIPRJVCS/my-workflow.yml > /tmp/myrepo/.cds/workflows/my-workflow.yml
    - script: cd /tmp/myrepo && git config user.email "{{.git.user}}@gitea.eu" && git config user.name "{{.git.user}}"
    - script: cd /tmp/myrepo && git add /tmp/myrepo/.cds/* && git commit . --gpg-sign=2B74B3591CEFB2F534265465E027B500E97E52E7 -m "add file and sign" && git push

- name: import / export vcs server
  steps:
  - script: export PROJECT_KEY=ITCLIPRJVCS && envsubst < ./fixtures/ITCLIPRJVCS/my_vcs_project.yml > ./fixtures/ITCLIPRJVCS/my_vcs_project_replaced.yml
  - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project vcs import ITCLIPRJVCS ./fixtures/ITCLIPRJVCS/my_vcs_project_replaced.yml
  - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project vcs list ITCLIPRJVCS --format json
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.systemoutjson0.name ShouldEqual "my_vcs_server"
  - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project vcs export ITCLIPRJVCS my_vcs_server > my_vcs_project_exported.yml
  - script: grep 'my_vcs_server' my_vcs_project_exported.yml

- name: repositoryProject
  steps:
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project repository add ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project repository list ITCLIPRJVCS --vcs-name my_vcs_server --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.systemoutjson0.reponame ShouldEqual "{{.git.user}}/myrepo"

- name: analysis
  steps:
    - script: sleep 5
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis list ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.__len__ ShouldBeGreaterThan 0
      retry: 3
      delay: 5
      vars:
        analyzeID:
          from: result.systemoutjson.systemoutjson0.id
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project analysis show ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo {{.analyzeID}}
      retry: 10
      delay: 2
      assertions:
        - result.code ShouldEqual 0
        - 'result.systemout ShouldContainSubstring "status: Success"'
        - 'result.systemout ShouldContainSubstring "key_sign_id: E027B500E97E52E7"'
        - 'result.systemout ShouldContainSubstring "my-parent-action.yml"'
        - 'result.systemout ShouldContainSubstring "my-child-action.yml"'
        - 'result.systemout ShouldContainSubstring "my-workflow.yml"'
        - 'result.systemout ShouldContainSubstring "docker-debian9.yml"'
        - 'result.systemout ShouldNotContainSubstring "error:"'
- name: Configure Webhooks
  steps:
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project repository hook-key ITCLIPRJVCS gitea my_vcs_server {{.git.user}}/myrepo --format json
      vars:
        hookSecret:
          from: result.systemoutjson.hook_sign_key
    - script: 'curl -H "Content-Type: application/json" -u "{{.git.user}}:{{.git.password}}" -X POST {{.git.host}}/api/v1/repos/{{.git.user}}/myrepo/hooks -d "{\"active\":true, \"type\":\"gitea\", \"config\": {\"secret\": \"{{.hookSecret}}\", \"content_type\": \"json\", \"url\": \"{{.gitea.hook.url}}/v2/webhook/repository/gitea/my_vcs_server\"}}"'
      vars:
        hookID:
          from: result.systemoutjson.id
    - script: cd /tmp/myrepo && echo 'coucou' > newfile && git add /tmp/myrepo/newfile && git commit . --gpg-sign=2B74B3591CEFB2F534265465E027B500E97E52E7 -m "add file and sign" && git push
- name: Run ascode workflow from hook
  steps:
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow status ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow 1 --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.status ShouldEqual "Success"
      retry: 30
      delay: 10
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow infos ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow 1
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow history ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.systemoutjson0.workflow_name ShouldEqual "MyFirstWorkflow"
        - result.systemoutjson.systemoutjson0.status ShouldEqual "Success"
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow logs download ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow 1
    - script: "cat MyFirstWorkflow-1-0-myFirstJob-checkout | grep \"Checkout completed\""
    - script: "cat MyFirstWorkflow-1-0-myFirstJob-customaction | grep \"Welcome in action test-parent-action\""
    - script: "cat MyFirstWorkflow-1-0-myFirstJob-customaction | grep \"Hello Foo Doe from project ITCLIPRJVCS\""
    - script: "cat MyFirstWorkflow-1-0-myFirstJob-step-2 | grep \"Thank you\""
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow jobs status ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow 1 --format json
      assertions:
        - result.systemoutjson ShouldHaveLength 5
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow jobs get ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow 1 skipJob --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.job_id ShouldEqual "skipJob"
        - result.systemoutjson.status ShouldEqual "Skipped"
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow jobs get ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow 1 skipJob --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.job_id ShouldEqual "skipJob"
        - result.systemoutjson.status ShouldEqual "Skipped"
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow jobs get ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow 1 alwaysJob --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.job_id ShouldEqual "alwaysJob"
        - result.systemoutjson.status ShouldEqual "Success"
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow jobs get ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow 1 mySecondJob --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.job_id ShouldEqual "mySecondJob"
        - result.systemoutjson.status ShouldEqual "Fail"
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental workflow jobs get ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo MyFirstWorkflow 1 myThirdJob --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.job_id ShouldEqual "myThirdJob"
        - result.systemoutjson.status ShouldEqual "Success"
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental worker list --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson ShouldHaveLength 0
      retry: 5
      delay: 5

- name: hook-cli
  steps:
    - script: {{.cdsctl}} -f {{.cdsctl.config}} admin hook repository list
      assertions:
        - result.code ShouldEqual 0
        - 'result.systemout ShouldContainSubstring "my_vcs_server-{{.git.user}}/myrepo"'
    - script: {{.cdsctl}} -f {{.cdsctl.config}} admin hook repository event list my_vcs_server {{.git.user}}/myrepo --format json
      vars:
        hookEventUUID:
          from: result.systemoutjson.systemoutjson0.uuid
      assertions:
        - result.code ShouldEqual 0
        - 'result.systemoutjson.systemoutjson0.event_name ShouldEqual "push"'
        - 'result.systemoutjson.systemoutjson0.status ShouldEqual "Done"'
    - script: {{.cdsctl}} -f {{.cdsctl.config}} admin hook repository event get my_vcs_server {{.git.user}}/myrepo {{.hookEventUUID}}
      assertions:
        - result.code ShouldEqual 0
        - 'result.systemout ShouldContainSubstring "EventName: push"'
        - 'result.systemout ShouldContainSubstring "Status: Done"'
    - script: {{.cdsctl}} -f {{.cdsctl.config}} admin hook repository rm my_vcs_server {{.git.user}}/myrepo --force
    - script: {{.cdsctl}} -f {{.cdsctl.config}} admin hook repository list
      assertions:
        - result.code ShouldEqual 0
        - 'result.systemout ShouldNotContainSubstring "my_vcs_server-{{.git.user}}/myrepo"'
- name: delete rbac on project
  steps:
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental rbac delete perm-test --force
      assertions:
        - result.code ShouldEqual 0
- name: delete repository on project
  steps:
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project repository delete ITCLIPRJVCS my_vcs_server {{.git.user}}/myrepo --force
    - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project repository list ITCLIPRJVCS --vcs-name my_vcs_server --format json
      assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.systemoutjson0.name ShouldNotEqual "{{.git.user}}/myrepo"

- name: delete vcs project
  steps:
  - script: rm my_vcs_project_exported.yml
  - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project vcs delete ITCLIPRJVCS my_vcs_server --force
  - script: {{.cdsctl}} -f {{.cdsctl.config}} experimental project vcs list ITCLIPRJVCS --format json
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.systemoutjson0.name ShouldNotEqual "my_vcs_server"
