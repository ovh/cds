name: Create a simple workflow (ITSCWRKFLW15) run it and then stop it
testcases:
- name: assert filepath, your current directory must be at the root of this project
  steps:
  - script: '[ -f ./fixtures/ITSCWRKFLW15/pipeline.yml ]'
  - script: '[ -f ./fixtures/ITSCWRKFLW15/application.yml ]'
  - script: '[ -f ./fixtures/ITSCWRKFLW15/workflow.yml ]'

- name: prepare test
  steps:
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} project remove --force ITSCWRKFLW15"
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} group remove --force itscwrkflw15 "
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} project add ITSCWRKFLW15 ITSCWRKFLW15"
  - script: |-
      {{.cdsctl}} -f {{.cdsctl.config}} worker model show buildpack-deps
      if [ $? -ne 0 ]; then
          {{.cdsctl}} -f {{.cdsctl.config}} worker model import --force ./fixtures/models/buildpack-deps.yml
      fi

- name: import integration
  steps:
  - script: "cd ./fixtures/ITSCWRKFLW15 && make build"
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} admin integration-model import ./fixtures/ITSCWRKFLW15/simple-integ.yml"
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} admin plugins import ./fixtures/ITSCWRKFLW15/simple-integ-plugin.yml"
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} admin plugins binary-add simple-integ-plugin ./fixtures/ITSCWRKFLW15/plugin-simple-integ-darwin-amd64.yml ./fixtures/ITSCWRKFLW15/plugin-simple-integ-darwin-amd64"
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} admin plugins binary-add simple-integ-plugin ./fixtures/ITSCWRKFLW15/plugin-simple-integ-linux-amd64.yml ./fixtures/ITSCWRKFLW15/plugin-simple-integ-linux-amd64"

- name: import application
  steps:
  - script: |
      export encryptedPassword=$({{.cdsctl}} -f {{.cdsctl.config}} encrypt ITSCWRKFLW15 my-secret jesuisunpassword | cut -d ' ' -f 2)
      echo "version: v1.0
      name: ITSCWRKFLW15-APPLICATION
      deployments:
        simple-integration-dev:
          deployment.token:
            type: password
            value: ${encryptedPassword}
          retry.delay:
            type: string
            value: \"50\"
          retry.max:
            type: string
            value: \"100\"
          version:
            type: string
            value: '{{.cds.version}}'" > ./fixtures/ITSCWRKFLW15/application.yml
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} application import --force ITSCWRKFLW15 ./fixtures/ITSCWRKFLW15/application.yml"

- name: import pipeline
  steps:
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} pipeline import --force ITSCWRKFLW15 ./fixtures/ITSCWRKFLW15/pipeline.yml"

- name: import workflow
  steps:
  - script:  "{{.cdsctl}} -f {{.cdsctl.config}} workflow import --force ITSCWRKFLW15 ./fixtures/ITSCWRKFLW15/workflow.yml"

- name: run workflow
  steps:
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} workflow run ITSCWRKFLW15 ITSCWRKFLW15-WORKFLOW"
    assertions:
    - result.code ShouldEqual 0
    - "result.systemout ShouldContainSubstring Workflow ITSCWRKFLW15-WORKFLOW #1 has been launched"

- name: check workflow
  steps:
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} workflow status ITSCWRKFLW15 ITSCWRKFLW15-WORKFLOW 1 --format json"
    retry: 30
    delay: 1
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.last_execution ShouldNotBeEmpty
    - result.systemoutjson.start ShouldNotBeEmpty
    - result.systemoutjson.num ShouldContainSubstring 1
    - result.systemoutjson.status ShouldEqual Building
    - result.systemoutjson.tags ShouldContainSubstring triggered_by

- name: check if pre-requisite is visible in queue
  steps:
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} admin curl /queue/workflows|grep \"job.requirement.binary.git\""

- name: check workflow
  steps:
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} workflow status ITSCWRKFLW15 ITSCWRKFLW15-WORKFLOW 1 --format json"
    retry: 60
    delay: 1
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.status ShouldEqual Success

- name: check result
  steps:
  - script: "{{.cdsctl}} -f {{.cdsctl.config}} workflow logs download ITSCWRKFLW15 ITSCWRKFLW15-WORKFLOW 1 --pattern NewJob"
    retry: 30
    delay: 1
  - script: grep "Retry.max 100" *.log
  - script: grep "Retry.delay 50" *.log
  - script: grep "Deployment.token drowssapnusiusej" *.log
