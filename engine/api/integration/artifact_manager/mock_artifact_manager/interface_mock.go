// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_artifact_manager is a generated GoMock package.
package mock_artifact_manager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	buildinfo "github.com/jfrog/jfrog-client-go/artifactory/buildinfo"
	services "github.com/jfrog/jfrog-client-go/artifactory/services"
	sdk "github.com/ovh/cds/sdk"
)

// MockArtifactManager is a mock of ArtifactManager interface.
type MockArtifactManager struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactManagerMockRecorder
}

// MockArtifactManagerMockRecorder is the mock recorder for MockArtifactManager.
type MockArtifactManagerMockRecorder struct {
	mock *MockArtifactManager
}

// NewMockArtifactManager creates a new mock instance.
func NewMockArtifactManager(ctrl *gomock.Controller) *MockArtifactManager {
	mock := &MockArtifactManager{ctrl: ctrl}
	mock.recorder = &MockArtifactManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactManager) EXPECT() *MockArtifactManagerMockRecorder {
	return m.recorder
}

// DeleteBuild mocks base method.
func (m *MockArtifactManager) DeleteBuild(project, buildName, buildVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuild", project, buildName, buildVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBuild indicates an expected call of DeleteBuild.
func (mr *MockArtifactManagerMockRecorder) DeleteBuild(project, buildName, buildVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuild", reflect.TypeOf((*MockArtifactManager)(nil).DeleteBuild), project, buildName, buildVersion)
}

// GetFileInfo mocks base method.
func (m *MockArtifactManager) GetFileInfo(repoName, filePath string) (sdk.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", repoName, filePath)
	ret0, _ := ret[0].(sdk.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockArtifactManagerMockRecorder) GetFileInfo(repoName, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockArtifactManager)(nil).GetFileInfo), repoName, filePath)
}

// GetURL mocks base method.
func (m *MockArtifactManager) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockArtifactManagerMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockArtifactManager)(nil).GetURL))
}

// PublishBuildInfo mocks base method.
func (m *MockArtifactManager) PublishBuildInfo(project string, request *buildinfo.BuildInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBuildInfo", project, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBuildInfo indicates an expected call of PublishBuildInfo.
func (mr *MockArtifactManagerMockRecorder) PublishBuildInfo(project, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBuildInfo", reflect.TypeOf((*MockArtifactManager)(nil).PublishBuildInfo), project, request)
}

// SetProperties mocks base method.
func (m *MockArtifactManager) SetProperties(repoName, filePath string, values ...sdk.KeyValues) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{repoName, filePath}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetProperties", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProperties indicates an expected call of SetProperties.
func (mr *MockArtifactManagerMockRecorder) SetProperties(repoName, filePath interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{repoName, filePath}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProperties", reflect.TypeOf((*MockArtifactManager)(nil).SetProperties), varargs...)
}

// XrayScanBuild mocks base method.
func (m *MockArtifactManager) XrayScanBuild(params services.XrayScanParams) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XrayScanBuild", params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XrayScanBuild indicates an expected call of XrayScanBuild.
func (mr *MockArtifactManagerMockRecorder) XrayScanBuild(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XrayScanBuild", reflect.TypeOf((*MockArtifactManager)(nil).XrayScanBuild), params)
}
