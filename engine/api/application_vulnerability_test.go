package api

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"

	"bytes"
	"fmt"

	"github.com/ovh/cds/engine/api/application"
	"github.com/ovh/cds/engine/api/test"
	"github.com/ovh/cds/engine/api/test/assets"
	"github.com/ovh/cds/sdk"
)

func Test_postVulnerabilityHandler(t *testing.T) {
	api, db, router := newTestAPI(t)

	//Create admin user
	u, pass := assets.InsertAdminUser(t, api.mustDB())

	//Insert Project
	pkey := sdk.RandomString(10)
	proj := assets.InsertTestProject(t, db, api.Cache, pkey, pkey)

	app := &sdk.Application{
		Name: sdk.RandomString(10),
	}
	if err := application.Insert(api.mustDB(), *proj, app); err != nil {
		t.Fatal(err)
	}

	v := sdk.Vulnerability{}
	v.ApplicationID = app.ID

	assert.NoError(t, application.InsertVulnerabilities(db, []sdk.Vulnerability{v}, app.ID, "docker"))

	vulns, err := application.LoadVulnerabilities(db, app.ID)
	assert.NoError(t, err)

	vars := map[string]string{
		"permProjectKey":  proj.Key,
		"applicationName": app.Name,
		"id":              fmt.Sprintf("%d", vulns[0].ID),
	}

	uri := router.GetRoute("POST", api.postVulnerabilityHandler, vars)

	vulns[0].Ignored = true
	jsonBody, _ := json.Marshal(vulns[0])
	body := bytes.NewBuffer(jsonBody)

	req, err := http.NewRequest("POST", uri, body)
	test.NoError(t, err)
	assets.AuthentifyRequest(t, req, u, pass)

	// Do the request
	w := httptest.NewRecorder()
	router.Mux.ServeHTTP(w, req)
	assert.Equal(t, 200, w.Code)

}
