// Code generated by MockGen. DO NOT EDIT.
// Source: http.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/ovh/cds/engine/api/services"
	cdsclient "github.com/ovh/cds/sdk/cdsclient"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DoJSONRequest mocks base method
func (m *MockClient) DoJSONRequest(ctx context.Context, method, path string, in, out interface{}, mods ...cdsclient.RequestModifier) (http.Header, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method, path, in, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoJSONRequest", varargs...)
	ret0, _ := ret[0].(http.Header)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoJSONRequest indicates an expected call of DoJSONRequest
func (mr *MockClientMockRecorder) DoJSONRequest(ctx, method, path, in, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method, path, in, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoJSONRequest", reflect.TypeOf((*MockClient)(nil).DoJSONRequest), varargs...)
}

// DoMultiPartRequest mocks base method
func (m *MockClient) DoMultiPartRequest(ctx context.Context, method, path string, multiPartData *services.MultiPartData, in, out interface{}, mods ...cdsclient.RequestModifier) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method, path, multiPartData, in, out}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoMultiPartRequest", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoMultiPartRequest indicates an expected call of DoMultiPartRequest
func (mr *MockClientMockRecorder) DoMultiPartRequest(ctx, method, path, multiPartData, in, out interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method, path, multiPartData, in, out}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoMultiPartRequest", reflect.TypeOf((*MockClient)(nil).DoMultiPartRequest), varargs...)
}
