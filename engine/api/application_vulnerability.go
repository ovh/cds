package api

import (
	"context"
	"net/http"

	"github.com/gorilla/mux"

	"github.com/ovh/cds/engine/api/application"
	"github.com/ovh/cds/engine/api/event"
	"github.com/ovh/cds/engine/service"
	"github.com/ovh/cds/sdk"
)

func (api *API) postVulnerabilityHandler() service.Handler {
	return func(ctx context.Context, w http.ResponseWriter, r *http.Request) error {
		vars := mux.Vars(r)
		key := vars["key"]
		appName := vars["permApplicationName"]

		vulnID, errV := requestVarInt(r, "id")
		if errV != nil {
			return sdk.WrapError(errV, "Unable to read ID")
		}

		var v sdk.Vulnerability
		if err := service.UnmarshalBody(r, &v); err != nil {
			return sdk.WrapError(err, "Unable to read body")
		}

		app, errL := application.LoadByName(api.mustDB(), api.Cache, key, appName, getUser(ctx))
		if errL != nil {
			return sdk.WrapError(errL, "Unable to load application")
		}

		vulnDB, errV := application.LoadVulnerability(api.mustDB(), app.ID, vulnID)
		if errV != nil {
			return sdk.WrapError(errV, "Unable to load vulnerability")
		}

		old := vulnDB

		vulnDB.Ignored = v.Ignored

		if err := application.UpdateVulnerability(api.mustDB(), vulnDB); err != nil {
			return sdk.WrapError(err, "Unable to update vulnerability")
		}

		event.PublishApplicationVulnerabilityUpdate(key, appName, old, vulnDB, getUser(ctx))
		return service.WriteJSON(w, vulnDB, http.StatusOK)
	}
}
