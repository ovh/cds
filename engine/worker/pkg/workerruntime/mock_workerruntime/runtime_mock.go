// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_workerruntime is a generated GoMock package.
package mock_workerruntime

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	workerruntime "github.com/ovh/cds/engine/worker/pkg/workerruntime"
	sdk "github.com/ovh/cds/sdk"
	cdsclient "github.com/ovh/cds/sdk/cdsclient"
	afero "github.com/spf13/afero"
)

// MockRuntime is a mock of Runtime interface.
type MockRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeMockRecorder
}

// MockRuntimeMockRecorder is the mock recorder for MockRuntime.
type MockRuntimeMockRecorder struct {
	mock *MockRuntime
}

// NewMockRuntime creates a new mock instance.
func NewMockRuntime(ctrl *gomock.Controller) *MockRuntime {
	mock := &MockRuntime{ctrl: ctrl}
	mock.recorder = &MockRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntime) EXPECT() *MockRuntimeMockRecorder {
	return m.recorder
}

// AddStepOutput mocks base method.
func (m *MockRuntime) AddStepOutput(ctx context.Context, outputName, outputValue string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStepOutput", ctx, outputName, outputValue)
}

// AddStepOutput indicates an expected call of AddStepOutput.
func (mr *MockRuntimeMockRecorder) AddStepOutput(ctx, outputName, outputValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStepOutput", reflect.TypeOf((*MockRuntime)(nil).AddStepOutput), ctx, outputName, outputValue)
}

// BaseDir mocks base method.
func (m *MockRuntime) BaseDir() afero.Fs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseDir")
	ret0, _ := ret[0].(afero.Fs)
	return ret0
}

// BaseDir indicates an expected call of BaseDir.
func (mr *MockRuntimeMockRecorder) BaseDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseDir", reflect.TypeOf((*MockRuntime)(nil).BaseDir))
}

// Blur mocks base method.
func (m *MockRuntime) Blur(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blur", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Blur indicates an expected call of Blur.
func (mr *MockRuntimeMockRecorder) Blur(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blur", reflect.TypeOf((*MockRuntime)(nil).Blur), arg0)
}

// CDNHttpURL mocks base method.
func (m *MockRuntime) CDNHttpURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDNHttpURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// CDNHttpURL indicates an expected call of CDNHttpURL.
func (mr *MockRuntimeMockRecorder) CDNHttpURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDNHttpURL", reflect.TypeOf((*MockRuntime)(nil).CDNHttpURL))
}

// Client mocks base method.
func (m *MockRuntime) Client() cdsclient.WorkerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(cdsclient.WorkerInterface)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockRuntimeMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockRuntime)(nil).Client))
}

// ClientV2 mocks base method.
func (m *MockRuntime) ClientV2() cdsclient.V2WorkerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientV2")
	ret0, _ := ret[0].(cdsclient.V2WorkerInterface)
	return ret0
}

// ClientV2 indicates an expected call of ClientV2.
func (mr *MockRuntimeMockRecorder) ClientV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientV2", reflect.TypeOf((*MockRuntime)(nil).ClientV2))
}

// Environ mocks base method.
func (m *MockRuntime) Environ() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ.
func (mr *MockRuntimeMockRecorder) Environ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockRuntime)(nil).Environ))
}

// FeatureEnabled mocks base method.
func (m *MockRuntime) FeatureEnabled(featureName sdk.FeatureName) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureEnabled", featureName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FeatureEnabled indicates an expected call of FeatureEnabled.
func (mr *MockRuntimeMockRecorder) FeatureEnabled(featureName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureEnabled", reflect.TypeOf((*MockRuntime)(nil).FeatureEnabled), featureName)
}

// GetActionPlugin mocks base method.
func (m *MockRuntime) GetActionPlugin(pluginName string) *sdk.GRPCPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionPlugin", pluginName)
	ret0, _ := ret[0].(*sdk.GRPCPlugin)
	return ret0
}

// GetActionPlugin indicates an expected call of GetActionPlugin.
func (mr *MockRuntimeMockRecorder) GetActionPlugin(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionPlugin", reflect.TypeOf((*MockRuntime)(nil).GetActionPlugin), pluginName)
}

// GetIntegrationPlugin mocks base method.
func (m *MockRuntime) GetIntegrationPlugin(pluginType string) *sdk.GRPCPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationPlugin", pluginType)
	ret0, _ := ret[0].(*sdk.GRPCPlugin)
	return ret0
}

// GetIntegrationPlugin indicates an expected call of GetIntegrationPlugin.
func (mr *MockRuntimeMockRecorder) GetIntegrationPlugin(pluginType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationPlugin", reflect.TypeOf((*MockRuntime)(nil).GetIntegrationPlugin), pluginType)
}

// GetJobIdentifiers mocks base method.
func (m *MockRuntime) GetJobIdentifiers() (int64, int64, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobIdentifiers")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	return ret0, ret1, ret2
}

// GetJobIdentifiers indicates an expected call of GetJobIdentifiers.
func (mr *MockRuntimeMockRecorder) GetJobIdentifiers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobIdentifiers", reflect.TypeOf((*MockRuntime)(nil).GetJobIdentifiers))
}

// HTTPPort mocks base method.
func (m *MockRuntime) HTTPPort() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPPort")
	ret0, _ := ret[0].(int32)
	return ret0
}

// HTTPPort indicates an expected call of HTTPPort.
func (mr *MockRuntimeMockRecorder) HTTPPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPPort", reflect.TypeOf((*MockRuntime)(nil).HTTPPort))
}

// InstallKey mocks base method.
func (m *MockRuntime) InstallKey(key sdk.Variable) (*workerruntime.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallKey", key)
	ret0, _ := ret[0].(*workerruntime.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallKey indicates an expected call of InstallKey.
func (mr *MockRuntimeMockRecorder) InstallKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallKey", reflect.TypeOf((*MockRuntime)(nil).InstallKey), key)
}

// InstallKeyTo mocks base method.
func (m *MockRuntime) InstallKeyTo(key sdk.Variable, destinationPath string) (*workerruntime.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallKeyTo", key, destinationPath)
	ret0, _ := ret[0].(*workerruntime.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallKeyTo indicates an expected call of InstallKeyTo.
func (mr *MockRuntimeMockRecorder) InstallKeyTo(key, destinationPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallKeyTo", reflect.TypeOf((*MockRuntime)(nil).InstallKeyTo), key, destinationPath)
}

// Name mocks base method.
func (m *MockRuntime) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRuntimeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRuntime)(nil).Name))
}

// Parameters mocks base method.
func (m *MockRuntime) Parameters() []sdk.Parameter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].([]sdk.Parameter)
	return ret0
}

// Parameters indicates an expected call of Parameters.
func (mr *MockRuntimeMockRecorder) Parameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*MockRuntime)(nil).Parameters))
}

// PluginGet mocks base method.
func (m *MockRuntime) PluginGet(pluginName string) (*sdk.GRPCPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGet", pluginName)
	ret0, _ := ret[0].(*sdk.GRPCPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginGet indicates an expected call of PluginGet.
func (mr *MockRuntimeMockRecorder) PluginGet(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGet", reflect.TypeOf((*MockRuntime)(nil).PluginGet), pluginName)
}

// PluginGetBinary mocks base method.
func (m *MockRuntime) PluginGetBinary(name, os, arch string, w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginGetBinary", name, os, arch, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginGetBinary indicates an expected call of PluginGetBinary.
func (mr *MockRuntimeMockRecorder) PluginGetBinary(name, os, arch, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginGetBinary", reflect.TypeOf((*MockRuntime)(nil).PluginGetBinary), name, os, arch, w)
}

// ProcessJob mocks base method.
func (m *MockRuntime) ProcessJob(job sdk.WorkflowNodeJobRunData) sdk.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessJob", job)
	ret0, _ := ret[0].(sdk.Result)
	return ret0
}

// ProcessJob indicates an expected call of ProcessJob.
func (mr *MockRuntimeMockRecorder) ProcessJob(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessJob", reflect.TypeOf((*MockRuntime)(nil).ProcessJob), job)
}

// Register mocks base method.
func (m *MockRuntime) Register(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRuntimeMockRecorder) Register(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRuntime)(nil).Register), ctx)
}

// RunResultSignature mocks base method.
func (m *MockRuntime) RunResultSignature(fileName string, perm uint32, t sdk.WorkflowRunResultType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunResultSignature", fileName, perm, t)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunResultSignature indicates an expected call of RunResultSignature.
func (mr *MockRuntimeMockRecorder) RunResultSignature(fileName, perm, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunResultSignature", reflect.TypeOf((*MockRuntime)(nil).RunResultSignature), fileName, perm, t)
}

// SendLog mocks base method.
func (m *MockRuntime) SendLog(ctx context.Context, level workerruntime.Level, format string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendLog", ctx, level, format)
}

// SendLog indicates an expected call of SendLog.
func (mr *MockRuntimeMockRecorder) SendLog(ctx, level, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLog", reflect.TypeOf((*MockRuntime)(nil).SendLog), ctx, level, format)
}

// SetActionPlugin mocks base method.
func (m *MockRuntime) SetActionPlugin(p *sdk.GRPCPlugin) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActionPlugin", p)
}

// SetActionPlugin indicates an expected call of SetActionPlugin.
func (mr *MockRuntimeMockRecorder) SetActionPlugin(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActionPlugin", reflect.TypeOf((*MockRuntime)(nil).SetActionPlugin), p)
}

// Take mocks base method.
func (m *MockRuntime) Take(ctx context.Context, job sdk.WorkflowNodeJobRun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Take", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockRuntimeMockRecorder) Take(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockRuntime)(nil).Take), ctx, job)
}

// Unregister mocks base method.
func (m *MockRuntime) Unregister(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockRuntimeMockRecorder) Unregister(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockRuntime)(nil).Unregister), ctx)
}

// V2AddRunResult mocks base method.
func (m *MockRuntime) V2AddRunResult(ctx context.Context, req workerruntime.V2RunResultRequest) (*workerruntime.V2AddResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2AddRunResult", ctx, req)
	ret0, _ := ret[0].(*workerruntime.V2AddResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2AddRunResult indicates an expected call of V2AddRunResult.
func (mr *MockRuntimeMockRecorder) V2AddRunResult(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2AddRunResult", reflect.TypeOf((*MockRuntime)(nil).V2AddRunResult), ctx, req)
}

// V2GetCacheLink mocks base method.
func (m *MockRuntime) V2GetCacheLink(ctx context.Context, cacheKey string) (*sdk.CDNItemLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2GetCacheLink", ctx, cacheKey)
	ret0, _ := ret[0].(*sdk.CDNItemLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2GetCacheLink indicates an expected call of V2GetCacheLink.
func (mr *MockRuntimeMockRecorder) V2GetCacheLink(ctx, cacheKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2GetCacheLink", reflect.TypeOf((*MockRuntime)(nil).V2GetCacheLink), ctx, cacheKey)
}

// V2GetCacheSignature mocks base method.
func (m *MockRuntime) V2GetCacheSignature(ctx context.Context, cacheKey string) (*workerruntime.CDNSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2GetCacheSignature", ctx, cacheKey)
	ret0, _ := ret[0].(*workerruntime.CDNSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2GetCacheSignature indicates an expected call of V2GetCacheSignature.
func (mr *MockRuntimeMockRecorder) V2GetCacheSignature(ctx, cacheKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2GetCacheSignature", reflect.TypeOf((*MockRuntime)(nil).V2GetCacheSignature), ctx, cacheKey)
}

// V2GetJobContext mocks base method.
func (m *MockRuntime) V2GetJobContext(ctx context.Context) *sdk.WorkflowRunJobsContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2GetJobContext", ctx)
	ret0, _ := ret[0].(*sdk.WorkflowRunJobsContext)
	return ret0
}

// V2GetJobContext indicates an expected call of V2GetJobContext.
func (mr *MockRuntimeMockRecorder) V2GetJobContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2GetJobContext", reflect.TypeOf((*MockRuntime)(nil).V2GetJobContext), ctx)
}

// V2GetJobRun mocks base method.
func (m *MockRuntime) V2GetJobRun(ctx context.Context) *sdk.V2WorkflowRunJob {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2GetJobRun", ctx)
	ret0, _ := ret[0].(*sdk.V2WorkflowRunJob)
	return ret0
}

// V2GetJobRun indicates an expected call of V2GetJobRun.
func (mr *MockRuntimeMockRecorder) V2GetJobRun(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2GetJobRun", reflect.TypeOf((*MockRuntime)(nil).V2GetJobRun), ctx)
}

// V2GetProjectKey mocks base method.
func (m *MockRuntime) V2GetProjectKey(ctx context.Context, keyName string, clear bool) (*sdk.ProjectKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2GetProjectKey", ctx, keyName, clear)
	ret0, _ := ret[0].(*sdk.ProjectKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2GetProjectKey indicates an expected call of V2GetProjectKey.
func (mr *MockRuntimeMockRecorder) V2GetProjectKey(ctx, keyName, clear interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2GetProjectKey", reflect.TypeOf((*MockRuntime)(nil).V2GetProjectKey), ctx, keyName, clear)
}

// V2GetRunResult mocks base method.
func (m *MockRuntime) V2GetRunResult(ctx context.Context, filter workerruntime.V2FilterRunResult) (*workerruntime.V2GetResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2GetRunResult", ctx, filter)
	ret0, _ := ret[0].(*workerruntime.V2GetResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2GetRunResult indicates an expected call of V2GetRunResult.
func (mr *MockRuntimeMockRecorder) V2GetRunResult(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2GetRunResult", reflect.TypeOf((*MockRuntime)(nil).V2GetRunResult), ctx, filter)
}

// V2UpdateRunResult mocks base method.
func (m *MockRuntime) V2UpdateRunResult(ctx context.Context, req workerruntime.V2RunResultRequest) (*workerruntime.V2UpdateResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2UpdateRunResult", ctx, req)
	ret0, _ := ret[0].(*workerruntime.V2UpdateResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// V2UpdateRunResult indicates an expected call of V2UpdateRunResult.
func (mr *MockRuntimeMockRecorder) V2UpdateRunResult(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2UpdateRunResult", reflect.TypeOf((*MockRuntime)(nil).V2UpdateRunResult), ctx, req)
}

// WorkerCacheSignature mocks base method.
func (m *MockRuntime) WorkerCacheSignature(tag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerCacheSignature", tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerCacheSignature indicates an expected call of WorkerCacheSignature.
func (mr *MockRuntimeMockRecorder) WorkerCacheSignature(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerCacheSignature", reflect.TypeOf((*MockRuntime)(nil).WorkerCacheSignature), tag)
}
