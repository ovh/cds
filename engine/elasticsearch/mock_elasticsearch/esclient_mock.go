// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_elasticsearch is a generated GoMock package.
package mock_elasticsearch

import (
	context "context"
	reflect "reflect"

	osquery "github.com/defensestation/osquery"
	gomock "github.com/golang/mock/gomock"
	opensearchapi "github.com/opensearch-project/opensearch-go/v4/opensearchapi"
)

// MockESClient is a mock of ESClient interface.
type MockESClient struct {
	ctrl     *gomock.Controller
	recorder *MockESClientMockRecorder
}

// MockESClientMockRecorder is the mock recorder for MockESClient.
type MockESClientMockRecorder struct {
	mock *MockESClient
}

// NewMockESClient creates a new mock instance.
func NewMockESClient(ctrl *gomock.Controller) *MockESClient {
	mock := &MockESClient{ctrl: ctrl}
	mock.recorder = &MockESClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockESClient) EXPECT() *MockESClientMockRecorder {
	return m.recorder
}

// IndexDocWithoutType mocks base method.
func (m *MockESClient) IndexDocWithoutType(ctx context.Context, index, id string, body interface{}) (*opensearchapi.DocumentCreateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexDocWithoutType", ctx, index, id, body)
	ret0, _ := ret[0].(*opensearchapi.DocumentCreateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDocWithoutType indicates an expected call of IndexDocWithoutType.
func (mr *MockESClientMockRecorder) IndexDocWithoutType(ctx, index, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocWithoutType", reflect.TypeOf((*MockESClient)(nil).IndexDocWithoutType), ctx, index, id, body)
}

// Ping mocks base method.
func (m *MockESClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockESClientMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockESClient)(nil).Ping), ctx)
}

// SearchDoc mocks base method.
func (m *MockESClient) SearchDoc(ctx context.Context, index string, query *osquery.SearchRequest, sorts []string, from, size int) (*opensearchapi.SearchResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDoc", ctx, index, query, sorts, from, size)
	ret0, _ := ret[0].(*opensearchapi.SearchResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDoc indicates an expected call of SearchDoc.
func (mr *MockESClientMockRecorder) SearchDoc(ctx, index, query, sorts, from, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDoc", reflect.TypeOf((*MockESClient)(nil).SearchDoc), ctx, index, query, sorts, from, size)
}
